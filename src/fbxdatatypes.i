// ***********************************************************************
// Copyright (c) 2017 Unity Technologies. All rights reserved.
//
// Licensed under the ##LICENSENAME##.
// See LICENSE.md file in the project root for full license information.
// ***********************************************************************

#ifdef IGNORE_ALL_INCLUDE_SOME
// Unignore class
%rename("%s") FbxDataType;
%rename("%s") FbxDataType::~FbxDataType;

%rename("%s") FbxDataType::GetType;

/* We synthesize this function (which is a global static in the original SDK for
 * some reason) */
%rename("%s") FbxDataType::GetNameForIO;

/* GetName doesn't return what you expect, so don't output it. */

#endif

/* todo */
%ignore FbxDataType::FbxDataType(const FbxPropertyHandle& pTypeInfoHandle);
%ignore FbxDataType::GetTypeInfoHandle;

/* Constructors.
 *
 * Create/Destroy are defined, but they're acting exactly like the ctor/dtor, so just use
 * ctor/dtor.
 *
 * There's also the mapping from enum to data type, which is handled as a global function
 * in Fbx, but fits well as a constructor.
 */
%ignore FbxDataType::Create;
%ignore FbxDataType::Destroy;
%extend FbxDataType {
  FbxDataType(const char* pName, const EFbxType pType) {
    return new FbxDataType(FbxDataType::Create(pName, pType));
  }
  /* This one crashes. Leave it out for now.
  FbxDataType(const char* pName, const FbxDataType& pDataType) {
    return new FbxDataType(FbxDataType::Create(pName, pDataType));
  }*/
  FbxDataType(EFbxType pType) {
    return new FbxDataType(FbxGetDataTypeFromEnum(pType));
  }
}

/* No assignment. Use the copy constructor instead */
%ignore FbxDataType::operator=;

/* Disable equality. It doesn't do what you'd think it does. */
%ignore FbxDataType::operator==;
%ignore FbxDataType::operator!=;

/*
 * GetType is a special function in C#, so we need to rename it.
 */
%rename("ToEnum") FbxDataType::GetType;

/*
 * Naming and ToString().
 * There's a global function that should be a member function; add it.
 */
%extend FbxDataType {
  const char *GetNameForIO() const {
    return FbxGetDataTypeNameForIO(*$self);
  }
}
%define_tostring(FbxDataType, GetNameForIO());

/* Take in a whole bunch of constants. Mark them all immutable.
 * Should we put them in the FbxDataTypes namespace?
 * The list of constants is generated by a script. */
%define %fbxdatatype(NAME)
%rename("%s") NAME;
%immutable NAME;
%enddef
#ifndef SWIG_GENERATING_TYPEDEFS
/* This file is generated, so we must not include it when generating typedefs. */
%include "fbxdatatypeconstants.i"
#endif

%include "fbxsdk/core/fbxdatatypes.h"
