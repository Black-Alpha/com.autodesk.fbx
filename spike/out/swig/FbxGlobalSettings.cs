//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxGlobalSettings : FbxObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxGlobalSettings(global::System.IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.FbxGlobalSettings_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxGlobalSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxGlobalSettings_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxGlobalSettings_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxGlobalSettings_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxGlobalSettings Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGlobalSettings_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxGlobalSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxGlobalSettings(cPtr, false);
    return ret;
  }

  public new static FbxGlobalSettings Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGlobalSettings_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxGlobalSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxGlobalSettings(cPtr, false);
    return ret;
  }

  public void SetAxisSystem(FbxAxisSystem pAxisSystem) {
    examplePINVOKE.FbxGlobalSettings_SetAxisSystem(swigCPtr, FbxAxisSystem.getCPtr(pAxisSystem));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxAxisSystem GetAxisSystem() {
    FbxAxisSystem ret = new FbxAxisSystem(examplePINVOKE.FbxGlobalSettings_GetAxisSystem(swigCPtr), true);
    return ret;
  }

  public void SetOriginalUpAxis(FbxAxisSystem pAxisSystem) {
    examplePINVOKE.FbxGlobalSettings_SetOriginalUpAxis(swigCPtr, FbxAxisSystem.getCPtr(pAxisSystem));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetOriginalUpAxis() {
    int ret = examplePINVOKE.FbxGlobalSettings_GetOriginalUpAxis(swigCPtr);
    return ret;
  }

  public void SetSystemUnit(FbxSystemUnit pOther) {
    examplePINVOKE.FbxGlobalSettings_SetSystemUnit(swigCPtr, FbxSystemUnit.getCPtr(pOther));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxSystemUnit GetSystemUnit() {
    FbxSystemUnit ret = new FbxSystemUnit(examplePINVOKE.FbxGlobalSettings_GetSystemUnit(swigCPtr), true);
    return ret;
  }

  public void SetOriginalSystemUnit(FbxSystemUnit pOther) {
    examplePINVOKE.FbxGlobalSettings_SetOriginalSystemUnit(swigCPtr, FbxSystemUnit.getCPtr(pOther));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxSystemUnit GetOriginalSystemUnit() {
    FbxSystemUnit ret = new FbxSystemUnit(examplePINVOKE.FbxGlobalSettings_GetOriginalSystemUnit(swigCPtr), true);
    return ret;
  }

  public void SetAmbientColor(FbxColor pAmbientColor) {
    examplePINVOKE.FbxGlobalSettings_SetAmbientColor(swigCPtr, FbxColor.getCPtr(pAmbientColor));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxColor GetAmbientColor() {
    FbxColor ret = new FbxColor(examplePINVOKE.FbxGlobalSettings_GetAmbientColor(swigCPtr), true);
    return ret;
  }

  public bool SetDefaultCamera(string pCameraName) {
    bool ret = examplePINVOKE.FbxGlobalSettings_SetDefaultCamera(swigCPtr, pCameraName);
    return ret;
  }

  public FbxString GetDefaultCamera() {
    FbxString ret = new FbxString(examplePINVOKE.FbxGlobalSettings_GetDefaultCamera(swigCPtr), true);
    return ret;
  }

  public void SetTimeMode(FbxTime.EMode pTimeMode) {
    examplePINVOKE.FbxGlobalSettings_SetTimeMode(swigCPtr, (int)pTimeMode);
  }

  public FbxTime.EMode GetTimeMode() {
    FbxTime.EMode ret = (FbxTime.EMode)examplePINVOKE.FbxGlobalSettings_GetTimeMode(swigCPtr);
    return ret;
  }

  public void SetTimeProtocol(FbxTime.EProtocol pTimeProtocol) {
    examplePINVOKE.FbxGlobalSettings_SetTimeProtocol(swigCPtr, (int)pTimeProtocol);
  }

  public FbxTime.EProtocol GetTimeProtocol() {
    FbxTime.EProtocol ret = (FbxTime.EProtocol)examplePINVOKE.FbxGlobalSettings_GetTimeProtocol(swigCPtr);
    return ret;
  }

  public void SetSnapOnFrameMode(FbxGlobalSettings.ESnapOnFrameMode pSnapOnFrameMode) {
    examplePINVOKE.FbxGlobalSettings_SetSnapOnFrameMode(swigCPtr, (int)pSnapOnFrameMode);
  }

  public FbxGlobalSettings.ESnapOnFrameMode GetSnapOnFrameMode() {
    FbxGlobalSettings.ESnapOnFrameMode ret = (FbxGlobalSettings.ESnapOnFrameMode)examplePINVOKE.FbxGlobalSettings_GetSnapOnFrameMode(swigCPtr);
    return ret;
  }

  public void SetTimelineDefaultTimeSpan(FbxTimeSpan pTimeSpan) {
    examplePINVOKE.FbxGlobalSettings_SetTimelineDefaultTimeSpan(swigCPtr, FbxTimeSpan.getCPtr(pTimeSpan));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTimelineDefaultTimeSpan(FbxTimeSpan pTimeSpan) {
    examplePINVOKE.FbxGlobalSettings_GetTimelineDefaultTimeSpan(swigCPtr, FbxTimeSpan.getCPtr(pTimeSpan));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCustomFrameRate(double pCustomFrameRate) {
    examplePINVOKE.FbxGlobalSettings_SetCustomFrameRate(swigCPtr, pCustomFrameRate);
  }

  public double GetCustomFrameRate() {
    double ret = examplePINVOKE.FbxGlobalSettings_GetCustomFrameRate(swigCPtr);
    return ret;
  }

  public class TimeMarker : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal TimeMarker(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TimeMarker obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~TimeMarker() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            examplePINVOKE.delete_FbxGlobalSettings_TimeMarker(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public TimeMarker() : this(examplePINVOKE.new_FbxGlobalSettings_TimeMarker__SWIG_0(), true) {
    }
  
    public TimeMarker(FbxGlobalSettings.TimeMarker pTimeMarker) : this(examplePINVOKE.new_FbxGlobalSettings_TimeMarker__SWIG_1(FbxGlobalSettings.TimeMarker.getCPtr(pTimeMarker)), true) {
      if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public FbxString mName {
      set {
        examplePINVOKE.FbxGlobalSettings_TimeMarker_mName_set(swigCPtr, FbxString.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = examplePINVOKE.FbxGlobalSettings_TimeMarker_mName_get(swigCPtr);
        FbxString ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxString(cPtr, false);
        return ret;
      } 
    }
  
    public FbxTime mTime {
      set {
        examplePINVOKE.FbxGlobalSettings_TimeMarker_mTime_set(swigCPtr, FbxTime.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = examplePINVOKE.FbxGlobalSettings_TimeMarker_mTime_get(swigCPtr);
        FbxTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxTime(cPtr, false);
        return ret;
      } 
    }
  
    public bool mLoop {
      set {
        examplePINVOKE.FbxGlobalSettings_TimeMarker_mLoop_set(swigCPtr, value);
      } 
      get {
        bool ret = examplePINVOKE.FbxGlobalSettings_TimeMarker_mLoop_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public int GetTimeMarkerCount() {
    int ret = examplePINVOKE.FbxGlobalSettings_GetTimeMarkerCount(swigCPtr);
    return ret;
  }

  public FbxGlobalSettings.TimeMarker GetTimeMarker(int pIndex, FbxStatus pStatus) {
    FbxGlobalSettings.TimeMarker ret = new FbxGlobalSettings.TimeMarker(examplePINVOKE.FbxGlobalSettings_GetTimeMarker__SWIG_0(swigCPtr, pIndex, FbxStatus.getCPtr(pStatus)), true);
    return ret;
  }

  public FbxGlobalSettings.TimeMarker GetTimeMarker(int pIndex) {
    FbxGlobalSettings.TimeMarker ret = new FbxGlobalSettings.TimeMarker(examplePINVOKE.FbxGlobalSettings_GetTimeMarker__SWIG_1(swigCPtr, pIndex), true);
    return ret;
  }

  public void AddTimeMarker(FbxGlobalSettings.TimeMarker pTimeMarker, FbxStatus pStatus) {
    examplePINVOKE.FbxGlobalSettings_AddTimeMarker__SWIG_0(swigCPtr, FbxGlobalSettings.TimeMarker.getCPtr(pTimeMarker), FbxStatus.getCPtr(pStatus));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTimeMarker(FbxGlobalSettings.TimeMarker pTimeMarker) {
    examplePINVOKE.FbxGlobalSettings_AddTimeMarker__SWIG_1(swigCPtr, FbxGlobalSettings.TimeMarker.getCPtr(pTimeMarker));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReplaceTimeMarker(int pIndex, FbxGlobalSettings.TimeMarker pTimeMarker, FbxStatus pStatus) {
    examplePINVOKE.FbxGlobalSettings_ReplaceTimeMarker__SWIG_0(swigCPtr, pIndex, FbxGlobalSettings.TimeMarker.getCPtr(pTimeMarker), FbxStatus.getCPtr(pStatus));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReplaceTimeMarker(int pIndex, FbxGlobalSettings.TimeMarker pTimeMarker) {
    examplePINVOKE.FbxGlobalSettings_ReplaceTimeMarker__SWIG_1(swigCPtr, pIndex, FbxGlobalSettings.TimeMarker.getCPtr(pTimeMarker));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllTimeMarkers() {
    examplePINVOKE.FbxGlobalSettings_RemoveAllTimeMarkers(swigCPtr);
  }

  public bool SetCurrentTimeMarker(int pIndex, FbxStatus pStatus) {
    bool ret = examplePINVOKE.FbxGlobalSettings_SetCurrentTimeMarker__SWIG_0(swigCPtr, pIndex, FbxStatus.getCPtr(pStatus));
    return ret;
  }

  public bool SetCurrentTimeMarker(int pIndex) {
    bool ret = examplePINVOKE.FbxGlobalSettings_SetCurrentTimeMarker__SWIG_1(swigCPtr, pIndex);
    return ret;
  }

  public int GetCurrentTimeMarker() {
    int ret = examplePINVOKE.FbxGlobalSettings_GetCurrentTimeMarker(swigCPtr);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(examplePINVOKE.FbxGlobalSettings_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ESnapOnFrameMode {
    eNoSnap,
    eSnapOnFrame,
    ePlayOnFrame,
    eSnapAndPlayOnFrame
  }

}

}
