//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxAtomOp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxAtomOp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAtomOp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxAtomOp() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_FbxAtomOp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static void Inc(SWIGTYPE_p_long_long pPtr) {
    examplePINVOKE.FbxAtomOp_Inc(SWIGTYPE_p_long_long.getCPtr(pPtr));
  }

  public static void Dec(SWIGTYPE_p_long_long pPtr) {
    examplePINVOKE.FbxAtomOp_Dec(SWIGTYPE_p_long_long.getCPtr(pPtr));
  }

  public static bool Add(SWIGTYPE_p_long_long pPtr, long pVal) {
    bool ret = examplePINVOKE.FbxAtomOp_Add(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static bool Sub(SWIGTYPE_p_long_long pPtr, long pVal) {
    bool ret = examplePINVOKE.FbxAtomOp_Sub(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static bool And(SWIGTYPE_p_long_long pPtr, long pVal) {
    bool ret = examplePINVOKE.FbxAtomOp_And(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static bool Or(SWIGTYPE_p_long_long pPtr, long pVal) {
    bool ret = examplePINVOKE.FbxAtomOp_Or(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static bool Nand(SWIGTYPE_p_long_long pPtr, long pVal) {
    bool ret = examplePINVOKE.FbxAtomOp_Nand(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static bool Xor(SWIGTYPE_p_long_long pPtr, long pVal) {
    bool ret = examplePINVOKE.FbxAtomOp_Xor(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static bool CompareAndSwap(SWIGTYPE_p_long_long pPtr, long pOld, long pSwap) {
    bool ret = examplePINVOKE.FbxAtomOp_CompareAndSwap(SWIGTYPE_p_long_long.getCPtr(pPtr), pOld, pSwap);
    return ret;
  }

  public static long TestAndSet(SWIGTYPE_p_long_long pPtr) {
    long ret = examplePINVOKE.FbxAtomOp_TestAndSet(SWIGTYPE_p_long_long.getCPtr(pPtr));
    return ret;
  }

  public static long FetchAndSwap(SWIGTYPE_p_long_long pPtr, long pSwap) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndSwap(SWIGTYPE_p_long_long.getCPtr(pPtr), pSwap);
    return ret;
  }

  public static long FetchAndInc(SWIGTYPE_p_long_long pPtr) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndInc(SWIGTYPE_p_long_long.getCPtr(pPtr));
    return ret;
  }

  public static long FetchAndDec(SWIGTYPE_p_long_long pPtr) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndDec(SWIGTYPE_p_long_long.getCPtr(pPtr));
    return ret;
  }

  public static long FetchAndAdd(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndAdd(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long FetchAndSub(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndSub(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long FetchAndOr(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndOr(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long FetchAndAnd(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndAnd(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long FetchAndXor(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndXor(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long FetchAndNand(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_FetchAndNand(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long IncAndFetch(SWIGTYPE_p_long_long pPtr) {
    long ret = examplePINVOKE.FbxAtomOp_IncAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr));
    return ret;
  }

  public static long DecAndFetch(SWIGTYPE_p_long_long pPtr) {
    long ret = examplePINVOKE.FbxAtomOp_DecAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr));
    return ret;
  }

  public static long AddAndFetch(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_AddAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long SubAndFetch(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_SubAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long OrAndFetch(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_OrAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long AndAndFetch(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_AndAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long XorAndFetch(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_XorAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public static long NandAndFetch(SWIGTYPE_p_long_long pPtr, long pVal) {
    long ret = examplePINVOKE.FbxAtomOp_NandAndFetch(SWIGTYPE_p_long_long.getCPtr(pPtr), pVal);
    return ret;
  }

  public FbxAtomOp() : this(examplePINVOKE.new_FbxAtomOp(), true) {
  }

}

}
