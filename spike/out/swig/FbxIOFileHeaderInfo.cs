//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxIOFileHeaderInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxIOFileHeaderInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxIOFileHeaderInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxIOFileHeaderInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_FbxIOFileHeaderInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxIOFileHeaderInfo() : this(examplePINVOKE.new_FbxIOFileHeaderInfo(), true) {
  }

  public virtual void Reset() {
    examplePINVOKE.FbxIOFileHeaderInfo_Reset(swigCPtr);
  }

  public virtual bool ReadExtendedHeaderInformation(FbxIO arg0) {
    bool ret = examplePINVOKE.FbxIOFileHeaderInfo_ReadExtendedHeaderInformation(swigCPtr, FbxIO.getCPtr(arg0));
    return ret;
  }

  public FbxIODefaultRenderResolution mDefaultRenderResolution {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mDefaultRenderResolution_set(swigCPtr, FbxIODefaultRenderResolution.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIOFileHeaderInfo_mDefaultRenderResolution_get(swigCPtr);
      FbxIODefaultRenderResolution ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxIODefaultRenderResolution(cPtr, false);
      return ret;
    } 
  }

  public int mFileVersion {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mFileVersion_set(swigCPtr, value);
    } 
    get {
      int ret = examplePINVOKE.FbxIOFileHeaderInfo_mFileVersion_get(swigCPtr);
      return ret;
    } 
  }

  public bool mCreationTimeStampPresent {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mCreationTimeStampPresent_set(swigCPtr, value);
    } 
    get {
      bool ret = examplePINVOKE.FbxIOFileHeaderInfo_mCreationTimeStampPresent_get(swigCPtr);
      return ret;
    } 
  }

  public FbxLocalTime mCreationTimeStamp {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mCreationTimeStamp_set(swigCPtr, FbxLocalTime.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIOFileHeaderInfo_mCreationTimeStamp_get(swigCPtr);
      FbxLocalTime ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLocalTime(cPtr, false);
      return ret;
    } 
  }

  public FbxString mCreator {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mCreator_set(swigCPtr, FbxString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIOFileHeaderInfo_mCreator_get(swigCPtr);
      FbxString ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxString(cPtr, false);
      return ret;
    } 
  }

  public bool mIOPlugin {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mIOPlugin_set(swigCPtr, value);
    } 
    get {
      bool ret = examplePINVOKE.FbxIOFileHeaderInfo_mIOPlugin_get(swigCPtr);
      return ret;
    } 
  }

  public bool mPLE {
    set {
      examplePINVOKE.FbxIOFileHeaderInfo_mPLE_set(swigCPtr, value);
    } 
    get {
      bool ret = examplePINVOKE.FbxIOFileHeaderInfo_mPLE_get(swigCPtr);
      return ret;
    } 
  }

}

}
