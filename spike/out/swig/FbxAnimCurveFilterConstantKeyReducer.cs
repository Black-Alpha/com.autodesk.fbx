//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxAnimCurveFilterConstantKeyReducer : FbxAnimCurveFilter {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxAnimCurveFilterConstantKeyReducer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAnimCurveFilterConstantKeyReducer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxAnimCurveFilterConstantKeyReducer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_FbxAnimCurveFilterConstantKeyReducer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FbxAnimCurveFilterConstantKeyReducer() : this(examplePINVOKE.new_FbxAnimCurveFilterConstantKeyReducer(), true) {
  }

  public override string GetName() {
    string ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_GetName(swigCPtr);
    return ret;
  }

  public override bool Apply(FbxAnimStack pAnimStack, FbxStatus pStatus) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_0(swigCPtr, FbxAnimStack.getCPtr(pAnimStack), FbxStatus.getCPtr(pStatus));
    return ret;
  }

  public override bool Apply(FbxAnimStack pAnimStack) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_1(swigCPtr, FbxAnimStack.getCPtr(pAnimStack));
    return ret;
  }

  public override bool Apply(FbxObject pObj, FbxAnimStack pAnimStack, FbxStatus pStatus) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_2(swigCPtr, FbxObject.getCPtr(pObj), FbxAnimStack.getCPtr(pAnimStack), FbxStatus.getCPtr(pStatus));
    return ret;
  }

  public override bool Apply(FbxObject pObj, FbxAnimStack pAnimStack) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_3(swigCPtr, FbxObject.getCPtr(pObj), FbxAnimStack.getCPtr(pAnimStack));
    return ret;
  }

  public override bool Apply(SWIGTYPE_p_p_FbxAnimCurve pCurve, int pCount, FbxStatus pStatus) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_4(swigCPtr, SWIGTYPE_p_p_FbxAnimCurve.getCPtr(pCurve), pCount, FbxStatus.getCPtr(pStatus));
    return ret;
  }

  public override bool Apply(SWIGTYPE_p_p_FbxAnimCurve pCurve, int pCount) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_5(swigCPtr, SWIGTYPE_p_p_FbxAnimCurve.getCPtr(pCurve), pCount);
    return ret;
  }

  public override bool Apply(FbxAnimCurveNode pCurveNode, FbxStatus pStatus) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_6(swigCPtr, FbxAnimCurveNode.getCPtr(pCurveNode), FbxStatus.getCPtr(pStatus));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Apply(FbxAnimCurveNode pCurveNode) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_7(swigCPtr, FbxAnimCurveNode.getCPtr(pCurveNode));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Apply(FbxAnimCurve pCurve, FbxStatus pStatus) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_8(swigCPtr, FbxAnimCurve.getCPtr(pCurve), FbxStatus.getCPtr(pStatus));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Apply(FbxAnimCurve pCurve) {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Apply__SWIG_9(swigCPtr, FbxAnimCurve.getCPtr(pCurve));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_Reset(swigCPtr);
  }

  public double GetDerivativeTolerance() {
    double ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_GetDerivativeTolerance(swigCPtr);
    return ret;
  }

  public void SetDerivativeTolerance(double pValue) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetDerivativeTolerance(swigCPtr, pValue);
  }

  public double GetValueTolerance() {
    double ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_GetValueTolerance(swigCPtr);
    return ret;
  }

  public void SetValueTolerance(double pValue) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetValueTolerance(swigCPtr, pValue);
  }

  public bool GetKeepFirstAndLastKeys() {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_GetKeepFirstAndLastKeys(swigCPtr);
    return ret;
  }

  public void SetKeepFirstAndLastKeys(bool pKeepFirstAndLastKeys) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetKeepFirstAndLastKeys(swigCPtr, pKeepFirstAndLastKeys);
  }

  public bool GetKeepOneKey() {
    bool ret = examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_GetKeepOneKey(swigCPtr);
    return ret;
  }

  public void SetKeepOneKey(bool pKeepOneKey) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetKeepOneKey(swigCPtr, pKeepOneKey);
  }

  public void SetKeepNotPureAutoKeys(bool pKeep) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetKeepNotPureAutoKeys(swigCPtr, pKeep);
  }

  public void SetTranslationThreshold(double pTranslationThreshold) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetTranslationThreshold(swigCPtr, pTranslationThreshold);
  }

  public void SetRotationThreshold(double pRotationThreshold) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetRotationThreshold(swigCPtr, pRotationThreshold);
  }

  public void SetScalingThreshold(double pScalingThreshold) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetScalingThreshold(swigCPtr, pScalingThreshold);
  }

  public void SetDefaultThreshold(double pDefaultThreshold) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetDefaultThreshold(swigCPtr, pDefaultThreshold);
  }

  public void SetModes(bool pExporting, FbxIOSettings pIOS) {
    examplePINVOKE.FbxAnimCurveFilterConstantKeyReducer_SetModes(swigCPtr, pExporting, FbxIOSettings.getCPtr(pIOS));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
