//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxCameraManipulator : FbxObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxCameraManipulator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.FbxCameraManipulator_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxCameraManipulator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxCameraManipulator_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxCameraManipulator_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxCameraManipulator Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxCameraManipulator ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCameraManipulator(cPtr, false);
    return ret;
  }

  public new static FbxCameraManipulator Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxCameraManipulator ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCameraManipulator(cPtr, false);
    return ret;
  }

  public void Begin(FbxCameraManipulator.EAction pAction, float pX, float pY) {
    examplePINVOKE.FbxCameraManipulator_Begin(swigCPtr, (int)pAction, pX, pY);
  }

  public void Notify(float pX, float pY, float pScale) {
    examplePINVOKE.FbxCameraManipulator_Notify__SWIG_0(swigCPtr, pX, pY, pScale);
  }

  public void Notify(float pX, float pY) {
    examplePINVOKE.FbxCameraManipulator_Notify__SWIG_1(swigCPtr, pX, pY);
  }

  public void End() {
    examplePINVOKE.FbxCameraManipulator_End(swigCPtr);
  }

  public void Update(FbxTime pTimeDelta) {
    examplePINVOKE.FbxCameraManipulator_Update__SWIG_0(swigCPtr, FbxTime.getCPtr(pTimeDelta));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update() {
    examplePINVOKE.FbxCameraManipulator_Update__SWIG_1(swigCPtr);
  }

  public void Action(FbxCameraManipulator.EAction pAction, float pX, float pY, float pScale) {
    examplePINVOKE.FbxCameraManipulator_Action__SWIG_0(swigCPtr, (int)pAction, pX, pY, pScale);
  }

  public void Action(FbxCameraManipulator.EAction pAction, float pX, float pY) {
    examplePINVOKE.FbxCameraManipulator_Action__SWIG_1(swigCPtr, (int)pAction, pX, pY);
  }

  public FbxCameraManipulator.EAction GetCurrentAction() {
    FbxCameraManipulator.EAction ret = (FbxCameraManipulator.EAction)examplePINVOKE.FbxCameraManipulator_GetCurrentAction(swigCPtr);
    return ret;
  }

  public void FrameAll(FbxTime pTime) {
    examplePINVOKE.FbxCameraManipulator_FrameAll__SWIG_0(swigCPtr, FbxTime.getCPtr(pTime));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FrameAll() {
    examplePINVOKE.FbxCameraManipulator_FrameAll__SWIG_1(swigCPtr);
  }

  public void FrameSelected(FbxTime pTime) {
    examplePINVOKE.FbxCameraManipulator_FrameSelected__SWIG_0(swigCPtr, FbxTime.getCPtr(pTime));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FrameSelected() {
    examplePINVOKE.FbxCameraManipulator_FrameSelected__SWIG_1(swigCPtr);
  }

  public void FrameScreenPosition(float pX, float pY, bool pCulling, FbxTime pTime) {
    examplePINVOKE.FbxCameraManipulator_FrameScreenPosition__SWIG_0(swigCPtr, pX, pY, pCulling, FbxTime.getCPtr(pTime));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FrameScreenPosition(float pX, float pY, bool pCulling) {
    examplePINVOKE.FbxCameraManipulator_FrameScreenPosition__SWIG_1(swigCPtr, pX, pY, pCulling);
  }

  public void FrameScreenPosition(float pX, float pY) {
    examplePINVOKE.FbxCameraManipulator_FrameScreenPosition__SWIG_2(swigCPtr, pX, pY);
  }

  public SWIGTYPE_p_FbxPropertyTT_FbxObject_p_t Camera {
    set {
      examplePINVOKE.FbxCameraManipulator_Camera_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_FbxObject_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_Camera_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_FbxObject_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_FbxObject_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_float_t ViewportWidth {
    set {
      examplePINVOKE.FbxCameraManipulator_ViewportWidth_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_float_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_ViewportWidth_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_float_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_float_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_float_t ViewportHeight {
    set {
      examplePINVOKE.FbxCameraManipulator_ViewportHeight_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_float_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_ViewportHeight_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_float_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_float_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t Smooth {
    set {
      examplePINVOKE.FbxCameraManipulator_Smooth_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_Smooth_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_double_t SmoothSpeed {
    set {
      examplePINVOKE.FbxCameraManipulator_SmoothSpeed_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_SmoothSpeed_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t InvertX {
    set {
      examplePINVOKE.FbxCameraManipulator_InvertX_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_InvertX_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t InvertY {
    set {
      examplePINVOKE.FbxCameraManipulator_InvertY_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_InvertY_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t Restore {
    set {
      examplePINVOKE.FbxCameraManipulator_Restore_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraManipulator_Restore_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public enum EAction {
    eNone,
    eOrbit,
    eDolly,
    ePan,
    eFreePan
  }

}

}
