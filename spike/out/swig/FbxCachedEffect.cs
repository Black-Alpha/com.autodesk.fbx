//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxCachedEffect : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxCachedEffect(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxCachedEffect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxCachedEffect_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCachedEffect_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public virtual FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxCachedEffect_GetClassId(swigCPtr), true);
    return ret;
  }

  public static FbxCachedEffect Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCachedEffect_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxCachedEffect ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCachedEffect(cPtr, false);
    return ret;
  }

  public static FbxCachedEffect Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCachedEffect_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxCachedEffect ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCachedEffect(cPtr, false);
    return ret;
  }

  public virtual FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)examplePINVOKE.FbxCachedEffect_GetAttributeType(swigCPtr);
    return ret;
  }

  public FbxCachedEffect.ECategory GetCategory() {
    FbxCachedEffect.ECategory ret = (FbxCachedEffect.ECategory)examplePINVOKE.FbxCachedEffect_GetCategory(swigCPtr);
    return ret;
  }

  public void SetCache(FbxCache pCache, FbxCachedEffect.ECategory pCategory) {
    examplePINVOKE.FbxCachedEffect_SetCache__SWIG_0(swigCPtr, FbxCache.getCPtr(pCache), (int)pCategory);
  }

  public void SetCache(FbxCache pCache) {
    examplePINVOKE.FbxCachedEffect_SetCache__SWIG_1(swigCPtr, FbxCache.getCPtr(pCache));
  }

  public FbxCache GetCache() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCachedEffect_GetCache(swigCPtr);
    FbxCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCache(cPtr, false);
    return ret;
  }

  public virtual string GetTypeName() {
    string ret = examplePINVOKE.FbxCachedEffect_GetTypeName(swigCPtr);
    return ret;
  }

  public virtual FbxStringList GetTypeFlags() {
    FbxStringList ret = new FbxStringList(examplePINVOKE.FbxCachedEffect_GetTypeFlags(swigCPtr), true);
    return ret;
  }

  public enum ECategory {
    eParticles,
    eFluids,
    eHair,
    eGeneric
  }

}

}
