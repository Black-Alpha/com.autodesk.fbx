//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxNurbs : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxNurbs(global::System.IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.FbxNurbs_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxNurbs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxNurbs_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxNurbs_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxNurbs Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxNurbs ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNurbs(cPtr, false);
    return ret;
  }

  public new static FbxNurbs Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxNurbs ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNurbs(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)examplePINVOKE.FbxNurbs_GetAttributeType(swigCPtr);
    return ret;
  }

  public void Reset() {
    examplePINVOKE.FbxNurbs_Reset(swigCPtr);
  }

  public void SetSurfaceMode(FbxGeometry.ESurfaceMode pMode) {
    examplePINVOKE.FbxNurbs_SetSurfaceMode(swigCPtr, (int)pMode);
  }

  public FbxGeometry.ESurfaceMode GetSurfaceMode() {
    FbxGeometry.ESurfaceMode ret = (FbxGeometry.ESurfaceMode)examplePINVOKE.FbxNurbs_GetSurfaceMode(swigCPtr);
    return ret;
  }

  public void InitControlPoints(int pUCount, FbxNurbs.EType pUType, int pVCount, FbxNurbs.EType pVType) {
    examplePINVOKE.FbxNurbs_InitControlPoints__SWIG_0(swigCPtr, pUCount, (int)pUType, pVCount, (int)pVType);
  }

  public int GetUCount() {
    int ret = examplePINVOKE.FbxNurbs_GetUCount(swigCPtr);
    return ret;
  }

  public int GetVCount() {
    int ret = examplePINVOKE.FbxNurbs_GetVCount(swigCPtr);
    return ret;
  }

  public FbxNurbs.EType GetNurbsUType() {
    FbxNurbs.EType ret = (FbxNurbs.EType)examplePINVOKE.FbxNurbs_GetNurbsUType(swigCPtr);
    return ret;
  }

  public FbxNurbs.EType GetNurbsVType() {
    FbxNurbs.EType ret = (FbxNurbs.EType)examplePINVOKE.FbxNurbs_GetNurbsVType(swigCPtr);
    return ret;
  }

  public int GetUKnotCount() {
    int ret = examplePINVOKE.FbxNurbs_GetUKnotCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double GetUKnotVector() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_GetUKnotVector(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public int GetVKnotCount() {
    int ret = examplePINVOKE.FbxNurbs_GetVKnotCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double GetVKnotVector() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_GetVKnotVector(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_int GetUMultiplicityVector() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_GetUMultiplicityVector(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_int GetVMultiplicityVector() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxNurbs_GetVMultiplicityVector(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void SetOrder(uint pUOrder, uint pVOrder) {
    examplePINVOKE.FbxNurbs_SetOrder(swigCPtr, pUOrder, pVOrder);
  }

  public int GetUOrder() {
    int ret = examplePINVOKE.FbxNurbs_GetUOrder(swigCPtr);
    return ret;
  }

  public int GetVOrder() {
    int ret = examplePINVOKE.FbxNurbs_GetVOrder(swigCPtr);
    return ret;
  }

  public void SetStep(int pUStep, int pVStep) {
    examplePINVOKE.FbxNurbs_SetStep(swigCPtr, pUStep, pVStep);
  }

  public int GetUStep() {
    int ret = examplePINVOKE.FbxNurbs_GetUStep(swigCPtr);
    return ret;
  }

  public int GetVStep() {
    int ret = examplePINVOKE.FbxNurbs_GetVStep(swigCPtr);
    return ret;
  }

  public int GetUSpanCount() {
    int ret = examplePINVOKE.FbxNurbs_GetUSpanCount(swigCPtr);
    return ret;
  }

  public int GetVSpanCount() {
    int ret = examplePINVOKE.FbxNurbs_GetVSpanCount(swigCPtr);
    return ret;
  }

  public void SetApplyFlipUV(bool pFlag) {
    examplePINVOKE.FbxNurbs_SetApplyFlipUV(swigCPtr, pFlag);
  }

  public bool GetApplyFlipUV() {
    bool ret = examplePINVOKE.FbxNurbs_GetApplyFlipUV(swigCPtr);
    return ret;
  }

  public void SetApplyFlipLinks(bool pFlag) {
    examplePINVOKE.FbxNurbs_SetApplyFlipLinks(swigCPtr, pFlag);
  }

  public bool GetApplyFlipLinks() {
    bool ret = examplePINVOKE.FbxNurbs_GetApplyFlipLinks(swigCPtr);
    return ret;
  }

  public bool GetApplyFlip() {
    bool ret = examplePINVOKE.FbxNurbs_GetApplyFlip(swigCPtr);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(examplePINVOKE.FbxNurbs_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetControlPointAt(FbxVector4 pCtrlPoint, int pIndex) {
    examplePINVOKE.FbxNurbs_SetControlPointAt(swigCPtr, FbxVector4.getCPtr(pCtrlPoint), pIndex);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InitControlPoints(int pCount) {
    examplePINVOKE.FbxNurbs_InitControlPoints__SWIG_1(swigCPtr, pCount);
  }

  public enum EType {
    ePeriodic,
    eClosed,
    eOpen
  }

  public enum EErrorCode {
    eNurbsTypeUnknown,
    eWrongNumberOfControlPoint,
    eWeightTooSmall,
    eUMultiplicityVectorError,
    eVMultiplicityVectorError,
    eUKnotVectorError,
    eVKnotVectorError,
    eErrorCount
  }

}

}
