//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class example {
  public static void FbxSetMallocHandler(SWIGTYPE_p_f_size_t__p_void pHandler) {
    examplePINVOKE.FbxSetMallocHandler(SWIGTYPE_p_f_size_t__p_void.getCPtr(pHandler));
  }

  public static void FbxSetCallocHandler(SWIGTYPE_p_f_size_t_size_t__p_void pHandler) {
    examplePINVOKE.FbxSetCallocHandler(SWIGTYPE_p_f_size_t_size_t__p_void.getCPtr(pHandler));
  }

  public static void FbxSetReallocHandler(SWIGTYPE_p_f_p_void_size_t__p_void pHandler) {
    examplePINVOKE.FbxSetReallocHandler(SWIGTYPE_p_f_p_void_size_t__p_void.getCPtr(pHandler));
  }

  public static void FbxSetFreeHandler(SWIGTYPE_p_f_p_void__void pHandler) {
    examplePINVOKE.FbxSetFreeHandler(SWIGTYPE_p_f_p_void__void.getCPtr(pHandler));
  }

  public static SWIGTYPE_p_f_size_t__p_void FbxGetMallocHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetMallocHandler();
    SWIGTYPE_p_f_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_size_t_size_t__p_void FbxGetCallocHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetCallocHandler();
    SWIGTYPE_p_f_size_t_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void_size_t__p_void FbxGetReallocHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetReallocHandler();
    SWIGTYPE_p_f_p_void_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void__void FbxGetFreeHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetFreeHandler();
    SWIGTYPE_p_f_p_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_size_t__p_void FbxGetDefaultMallocHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetDefaultMallocHandler();
    SWIGTYPE_p_f_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_size_t_size_t__p_void FbxGetDefaultCallocHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetDefaultCallocHandler();
    SWIGTYPE_p_f_size_t_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_size_t_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void_size_t__p_void FbxGetDefaultReallocHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetDefaultReallocHandler();
    SWIGTYPE_p_f_p_void_size_t__p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_size_t__p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_void__void FbxGetDefaultFreeHandler() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetDefaultFreeHandler();
    SWIGTYPE_p_f_p_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxMalloc(uint pSize) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxMalloc(pSize);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxCalloc(uint pCount, uint pSize) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCalloc(pCount, pSize);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxRealloc(SWIGTYPE_p_void pData, uint pSize) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxRealloc(SWIGTYPE_p_void.getCPtr(pData), pSize);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void FbxFree(SWIGTYPE_p_void pData) {
    examplePINVOKE.FbxFree(SWIGTYPE_p_void.getCPtr(pData));
  }

  public static string FbxStrDup(string pString) {
    string ret = examplePINVOKE.FbxStrDup(pString);
    return ret;
  }

  public static SWIGTYPE_p_wchar_t FbxStrDupWC(SWIGTYPE_p_wchar_t pString) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxStrDupWC(SWIGTYPE_p_wchar_t.getCPtr(pString));
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxMallocDebug(uint pSize, int pBlock, string pFile, int pLine) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxMallocDebug(pSize, pBlock, pFile, pLine);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxCallocDebug(uint pCount, uint pSize, int pBlock, string pFile, int pLine) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxCallocDebug(pCount, pSize, pBlock, pFile, pLine);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxReallocDebug(SWIGTYPE_p_void pData, uint pSize, int pBlock, string pFile, int pLine) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxReallocDebug(SWIGTYPE_p_void.getCPtr(pData), pSize, pBlock, pFile, pLine);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void FbxFreeDebug(SWIGTYPE_p_void pData, int pBlock) {
    examplePINVOKE.FbxFreeDebug(SWIGTYPE_p_void.getCPtr(pData), pBlock);
  }

  public static void FbxAssertSetProc(SWIGTYPE_p_f_p_q_const__char_p_q_const__char_q_const__unsigned_int_p_q_const__char__void pAssertProc) {
    examplePINVOKE.FbxAssertSetProc(SWIGTYPE_p_f_p_q_const__char_p_q_const__char_q_const__unsigned_int_p_q_const__char__void.getCPtr(pAssertProc));
  }

  public static void FbxAssertSetDefaultProc() {
    examplePINVOKE.FbxAssertSetDefaultProc();
  }

  public static void _FbxAssert(string pFileName, string pFunctionName, uint pLineNumber, bool pFormat, string pMessage) {
    examplePINVOKE._FbxAssert(pFileName, pFunctionName, pLineNumber, pFormat, pMessage);
  }

  public static void _FbxTrace(string pMessage) {
    examplePINVOKE._FbxTrace(pMessage);
  }

  public static int FBXSDK_sprintf(string dst, uint dstsize, string format) {
    int ret = examplePINVOKE.FBXSDK_sprintf(dst, dstsize, format);
    return ret;
  }

  public static int FBXSDK_snprintf(string dst, uint dstsize, string format) {
    int ret = examplePINVOKE.FBXSDK_snprintf(dst, dstsize, format);
    return ret;
  }

  public static int FBXSDK_vsprintf(string dst, uint dstsize, string format, SWIGTYPE_p_va_list vl) {
    int ret = examplePINVOKE.FBXSDK_vsprintf(dst, dstsize, format, SWIGTYPE_p_va_list.getCPtr(vl));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FBXSDK_vsnprintf(string dst, uint dstsize, string format, SWIGTYPE_p_va_list vl) {
    int ret = examplePINVOKE.FBXSDK_vsnprintf(dst, dstsize, format, SWIGTYPE_p_va_list.getCPtr(vl));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static sbyte FbxMin(sbyte arg0) {
    sbyte ret = examplePINVOKE.FbxMin__SWIG_0(arg0);
    return ret;
  }

  public static byte FbxMin(byte arg0) {
    byte ret = examplePINVOKE.FbxMin__SWIG_1(arg0);
    return ret;
  }

  public static short FbxMin(short arg0) {
    short ret = examplePINVOKE.FbxMin__SWIG_2(arg0);
    return ret;
  }

  public static ushort FbxMin(ushort arg0) {
    ushort ret = examplePINVOKE.FbxMin__SWIG_3(arg0);
    return ret;
  }

  public static int FbxMin(int arg0) {
    int ret = examplePINVOKE.FbxMin__SWIG_4(arg0);
    return ret;
  }

  public static uint FbxMin(uint arg0) {
    uint ret = examplePINVOKE.FbxMin__SWIG_5(arg0);
    return ret;
  }

  public static long FbxMin(long arg0) {
    long ret = examplePINVOKE.FbxMin__SWIG_6(arg0);
    return ret;
  }

  public static ulong FbxMin(ulong arg0) {
    ulong ret = examplePINVOKE.FbxMin__SWIG_7(arg0);
    return ret;
  }

  public static float FbxMin(float arg0) {
    float ret = examplePINVOKE.FbxMin__SWIG_8(arg0);
    return ret;
  }

  public static double FbxMin(double arg0) {
    double ret = examplePINVOKE.FbxMin__SWIG_9(arg0);
    return ret;
  }

  public static sbyte FbxMax(sbyte arg0) {
    sbyte ret = examplePINVOKE.FbxMax__SWIG_0(arg0);
    return ret;
  }

  public static byte FbxMax(byte arg0) {
    byte ret = examplePINVOKE.FbxMax__SWIG_1(arg0);
    return ret;
  }

  public static short FbxMax(short arg0) {
    short ret = examplePINVOKE.FbxMax__SWIG_2(arg0);
    return ret;
  }

  public static ushort FbxMax(ushort arg0) {
    ushort ret = examplePINVOKE.FbxMax__SWIG_3(arg0);
    return ret;
  }

  public static int FbxMax(int arg0) {
    int ret = examplePINVOKE.FbxMax__SWIG_4(arg0);
    return ret;
  }

  public static uint FbxMax(uint arg0) {
    uint ret = examplePINVOKE.FbxMax__SWIG_5(arg0);
    return ret;
  }

  public static long FbxMax(long arg0) {
    long ret = examplePINVOKE.FbxMax__SWIG_6(arg0);
    return ret;
  }

  public static ulong FbxMax(ulong arg0) {
    ulong ret = examplePINVOKE.FbxMax__SWIG_7(arg0);
    return ret;
  }

  public static float FbxMax(float arg0) {
    float ret = examplePINVOKE.FbxMax__SWIG_8(arg0);
    return ret;
  }

  public static double FbxMax(double arg0) {
    double ret = examplePINVOKE.FbxMax__SWIG_9(arg0);
    return ret;
  }

  public static void FbxUTF8ToWC(string pInUTF8, SWIGTYPE_p_p_wchar_t pOutWideChar, SWIGTYPE_p_size_t pOutWideCharSize) {
    examplePINVOKE.FbxUTF8ToWC__SWIG_0(pInUTF8, SWIGTYPE_p_p_wchar_t.getCPtr(pOutWideChar), SWIGTYPE_p_size_t.getCPtr(pOutWideCharSize));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxUTF8ToWC(string pInUTF8, SWIGTYPE_p_p_wchar_t pOutWideChar) {
    examplePINVOKE.FbxUTF8ToWC__SWIG_1(pInUTF8, SWIGTYPE_p_p_wchar_t.getCPtr(pOutWideChar));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxWCToUTF8(SWIGTYPE_p_wchar_t pInWideChar, string pOutUTF8, SWIGTYPE_p_size_t pOutUTF8Size) {
    examplePINVOKE.FbxWCToUTF8__SWIG_0(SWIGTYPE_p_wchar_t.getCPtr(pInWideChar), pOutUTF8, SWIGTYPE_p_size_t.getCPtr(pOutUTF8Size));
  }

  public static void FbxWCToUTF8(SWIGTYPE_p_wchar_t pInWideChar, string pOutUTF8) {
    examplePINVOKE.FbxWCToUTF8__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(pInWideChar), pOutUTF8);
  }

  public static void FbxRemoveChar(FbxString pString, char pToRemove) {
    examplePINVOKE.FbxRemoveChar(FbxString.getCPtr(pString), pToRemove);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int FbxCompareStringListSort(SWIGTYPE_p_void E1, SWIGTYPE_p_void E2) {
    int ret = examplePINVOKE.FbxCompareStringListSort(SWIGTYPE_p_void.getCPtr(E1), SWIGTYPE_p_void.getCPtr(E2));
    return ret;
  }

  public static int FbxCompareStringListFindEqual(SWIGTYPE_p_void E1, SWIGTYPE_p_void E2) {
    int ret = examplePINVOKE.FbxCompareStringListFindEqual(SWIGTYPE_p_void.getCPtr(E1), SWIGTYPE_p_void.getCPtr(E2));
    return ret;
  }

  public static int FbxCompareCaseSensitiveStringList(SWIGTYPE_p_void E1, SWIGTYPE_p_void E2) {
    int ret = examplePINVOKE.FbxCompareCaseSensitiveStringList(SWIGTYPE_p_void.getCPtr(E1), SWIGTYPE_p_void.getCPtr(E2));
    return ret;
  }

  public static FbxTime.EMode FbxGetGlobalTimeMode() {
    FbxTime.EMode ret = (FbxTime.EMode)examplePINVOKE.FbxGetGlobalTimeMode();
    return ret;
  }

  public static SWIGTYPE_p_FbxTimeModeObject FbxGetGlobalTimeModeObject() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxGetGlobalTimeModeObject();
    SWIGTYPE_p_FbxTimeModeObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxTimeModeObject(cPtr, false);
    return ret;
  }

  public static FbxTime.EProtocol FbxGetGlobalTimeFormat() {
    FbxTime.EProtocol ret = (FbxTime.EProtocol)examplePINVOKE.FbxGetGlobalTimeFormat();
    return ret;
  }

  public static void FbxSetGlobalTimeMode(FbxTime.EMode pTimeMode, double pFrameRate) {
    examplePINVOKE.FbxSetGlobalTimeMode__SWIG_0((int)pTimeMode, pFrameRate);
  }

  public static void FbxSetGlobalTimeFormat(FbxTime.EProtocol pTimeFormat) {
    examplePINVOKE.FbxSetGlobalTimeFormat((int)pTimeFormat);
  }

  public static FbxTime FbxTimeSeconds(double pTime) {
    FbxTime ret = new FbxTime(examplePINVOKE.FbxTimeSeconds__SWIG_0(pTime), true);
    return ret;
  }

  public static FbxTime FbxTimeSeconds() {
    FbxTime ret = new FbxTime(examplePINVOKE.FbxTimeSeconds__SWIG_1(), true);
    return ret;
  }

  public static void FbxGetCurrentLocalTime(FbxLocalTime pLocalTime) {
    examplePINVOKE.FbxGetCurrentLocalTime(FbxLocalTime.getCPtr(pLocalTime));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxSetGlobalTimeMode(FbxTime.EMode pTimeMode) {
    examplePINVOKE.FbxSetGlobalTimeMode__SWIG_1((int)pTimeMode);
  }

  public static FbxTime.EOldMode FbxGetOldTimeModeCorrespondance(FbxTime.EMode pMode) {
    FbxTime.EOldMode ret = (FbxTime.EOldMode)examplePINVOKE.FbxGetOldTimeModeCorrespondance((int)pMode);
    return ret;
  }

  public static FbxTime.EMode FbxGetTimeModeFromOldValue(FbxTime.EOldMode pOldMode) {
    FbxTime.EMode ret = (FbxTime.EMode)examplePINVOKE.FbxGetTimeModeFromOldValue((int)pOldMode);
    return ret;
  }

  public static FbxTime.EMode FbxGetTimeModeFromFrameRate(string pFrameRate) {
    FbxTime.EMode ret = (FbxTime.EMode)examplePINVOKE.FbxGetTimeModeFromFrameRate(pFrameRate);
    return ret;
  }

  public static void FbxGetControlStringList(string pControlString, FbxTime.EProtocol pTimeFormat) {
    examplePINVOKE.FbxGetControlStringList(pControlString, (int)pTimeFormat);
  }

  public static string FbxGetGlobalFrameRateString(FbxTime.EMode pTimeMode) {
    string ret = examplePINVOKE.FbxGetGlobalFrameRateString((int)pTimeMode);
    return ret;
  }

  public static string FbxGetGlobalTimeModeString(FbxTime.EMode pTimeMode) {
    string ret = examplePINVOKE.FbxGetGlobalTimeModeString((int)pTimeMode);
    return ret;
  }

  public static double FbxGetFrameRate(FbxTime.EMode pTimeMode) {
    double ret = examplePINVOKE.FbxGetFrameRate((int)pTimeMode);
    return ret;
  }

  public static FbxTime.EProtocol FbxSelectionToTimeFormat(int pSelection) {
    FbxTime.EProtocol ret = (FbxTime.EProtocol)examplePINVOKE.FbxSelectionToTimeFormat(pSelection);
    return ret;
  }

  public static FbxTime.EMode FbxSelectionToTimeMode(int pSelection) {
    FbxTime.EMode ret = (FbxTime.EMode)examplePINVOKE.FbxSelectionToTimeMode(pSelection);
    return ret;
  }

  public static int FbxTimeToSelection(FbxTime.EMode pTimeMode, int pTimeFormat) {
    int ret = examplePINVOKE.FbxTimeToSelection__SWIG_0((int)pTimeMode, pTimeFormat);
    return ret;
  }

  public static int FbxTimeToSelection(FbxTime.EMode pTimeMode) {
    int ret = examplePINVOKE.FbxTimeToSelection__SWIG_1((int)pTimeMode);
    return ret;
  }

  public static int FbxTimeToSelection() {
    int ret = examplePINVOKE.FbxTimeToSelection__SWIG_2();
    return ret;
  }

  public static string FbxGetTimeModeName(FbxTime.EMode pTimeMode) {
    string ret = examplePINVOKE.FbxGetTimeModeName((int)pTimeMode);
    return ret;
  }

  public static int FbxGetFrameRateStringListIndex(FbxTime.EMode pTimeMode) {
    int ret = examplePINVOKE.FbxGetFrameRateStringListIndex((int)pTimeMode);
    return ret;
  }

  public static bool FbxIsValidCustomFrameRate(double pFramerate) {
    bool ret = examplePINVOKE.FbxIsValidCustomFrameRate(pFramerate);
    return ret;
  }

  public static bool FbxGetNearestCustomFrameRate(double pFramerate, SWIGTYPE_p_double pNearestRate) {
    bool ret = examplePINVOKE.FbxGetNearestCustomFrameRate(pFramerate, SWIGTYPE_p_double.getCPtr(pNearestRate));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSeconds(long pTime) {
    long ret = examplePINVOKE.FbxTCSeconds(pTime);
    return ret;
  }

  public static long FbxTCMinutes(long pTime) {
    long ret = examplePINVOKE.FbxTCMinutes(pTime);
    return ret;
  }

  public static long FbxTCHours(long pTime) {
    long ret = examplePINVOKE.FbxTCHours(pTime);
    return ret;
  }

  public static long FbxTCSetRate(int pHour, int pMinute, int pSecond, long pFrame, long pPeriod) {
    long ret = examplePINVOKE.FbxTCSetRate(pHour, pMinute, pSecond, pFrame, pPeriod);
    return ret;
  }

  public static long FbxTCGetRate(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, long pPeriod) {
    long ret = examplePINVOKE.FbxTCGetRate(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), pPeriod);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetNTSC(int pHour, int pMinute, int pSecond, long pFrame, int pField) {
    long ret = examplePINVOKE.FbxTCSetNTSC(pHour, pMinute, pSecond, pFrame, pField);
    return ret;
  }

  public static long FbxTCGetNTSC(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    long ret = examplePINVOKE.FbxTCGetNTSC(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetMNTSCnd(int pHour, int pMinute, int pSecond, long pFrame, int pField) {
    long ret = examplePINVOKE.FbxTCSetMNTSCnd(pHour, pMinute, pSecond, pFrame, pField);
    return ret;
  }

  public static long FbxTCGetMNTSCnd(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    long ret = examplePINVOKE.FbxTCGetMNTSCnd(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetMNTSC_2Xnd(int pHour, int pMinute, int pSecond, long pFrame, int pField) {
    long ret = examplePINVOKE.FbxTCSetMNTSC_2Xnd(pHour, pMinute, pSecond, pFrame, pField);
    return ret;
  }

  public static long FbxTCGetMNTSC_2Xnd(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    long ret = examplePINVOKE.FbxTCGetMNTSC_2Xnd(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetMNTSC(int pHour, int pMinute, int pSecond, long pFrame, int pField) {
    long ret = examplePINVOKE.FbxTCSetMNTSC(pHour, pMinute, pSecond, pFrame, pField);
    return ret;
  }

  public static long FbxTCGetMNTSC(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    long ret = examplePINVOKE.FbxTCGetMNTSC(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetPAL(int pHour, int pMinute, int pSecond, long pFrame, int pField) {
    long ret = examplePINVOKE.FbxTCSetPAL(pHour, pMinute, pSecond, pFrame, pField);
    return ret;
  }

  public static long FbxTCGetPAL(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    long ret = examplePINVOKE.FbxTCGetPAL(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetFILM(int pHour, int pMinute, int pSecond, long pFrame) {
    long ret = examplePINVOKE.FbxTCSetFILM(pHour, pMinute, pSecond, pFrame);
    return ret;
  }

  public static long FbxTCGetFILM(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame) {
    long ret = examplePINVOKE.FbxTCGetFILM(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long FbxTCSetFILMND(int pHour, int pMinute, int pSecond, long pFrame, int pField) {
    long ret = examplePINVOKE.FbxTCSetFILMND(pHour, pMinute, pSecond, pFrame, pField);
    return ret;
  }

  public static long FbxTCGetFILMND(long pTime, SWIGTYPE_p_int pHour, SWIGTYPE_p_int pMinute, SWIGTYPE_p_int pSecond, SWIGTYPE_p_int pFrame, SWIGTYPE_p_int pField) {
    long ret = examplePINVOKE.FbxTCGetFILMND(pTime, SWIGTYPE_p_int.getCPtr(pHour), SWIGTYPE_p_int.getCPtr(pMinute), SWIGTYPE_p_int.getCPtr(pSecond), SWIGTYPE_p_int.getCPtr(pFrame), SWIGTYPE_p_int.getCPtr(pField));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString FbxGetEnv(string pEnvVar) {
    FbxString ret = new FbxString(examplePINVOKE.FbxGetEnv(pEnvVar), true);
    return ret;
  }

  public static FbxString FbxGetApplicationDirectory() {
    FbxString ret = new FbxString(examplePINVOKE.FbxGetApplicationDirectory(), true);
    return ret;
  }

  public static FbxString FbxGetSystemTempPath() {
    FbxString ret = new FbxString(examplePINVOKE.FbxGetSystemTempPath(), true);
    return ret;
  }

  public static void FbxSetSystemTempPath(string pPathUTF8) {
    examplePINVOKE.FbxSetSystemTempPath(pPathUTF8);
  }

  public static FbxString FbxGetCurrentWorkPath() {
    FbxString ret = new FbxString(examplePINVOKE.FbxGetCurrentWorkPath(), true);
    return ret;
  }

  public static void FbxSetCurrentWorkPath(string pPath_UTF8) {
    examplePINVOKE.FbxSetCurrentWorkPath(pPath_UTF8);
  }

  public static FbxDataType FbxGetDataTypeFromEnum(EFbxType pType) {
    FbxDataType ret = new FbxDataType(examplePINVOKE.FbxGetDataTypeFromEnum((int)pType), false);
    return ret;
  }

  public static string FbxGetDataTypeNameForIO(FbxDataType pDataType) {
    string ret = examplePINVOKE.FbxGetDataTypeNameForIO(FbxDataType.getCPtr(pDataType));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxDataType FbxUndefinedDT {
    set {
      examplePINVOKE.FbxUndefinedDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxUndefinedDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxBoolDT {
    set {
      examplePINVOKE.FbxBoolDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxBoolDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCharDT {
    set {
      examplePINVOKE.FbxCharDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCharDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUCharDT {
    set {
      examplePINVOKE.FbxUCharDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxUCharDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxShortDT {
    set {
      examplePINVOKE.FbxShortDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxShortDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUShortDT {
    set {
      examplePINVOKE.FbxUShortDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxUShortDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIntDT {
    set {
      examplePINVOKE.FbxIntDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIntDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUIntDT {
    set {
      examplePINVOKE.FbxUIntDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxUIntDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLongLongDT {
    set {
      examplePINVOKE.FbxLongLongDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLongLongDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxULongLongDT {
    set {
      examplePINVOKE.FbxULongLongDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxULongLongDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFloatDT {
    set {
      examplePINVOKE.FbxFloatDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxFloatDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxHalfFloatDT {
    set {
      examplePINVOKE.FbxHalfFloatDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxHalfFloatDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDoubleDT {
    set {
      examplePINVOKE.FbxDoubleDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDoubleDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble2DT {
    set {
      examplePINVOKE.FbxDouble2DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDouble2DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble3DT {
    set {
      examplePINVOKE.FbxDouble3DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDouble3DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble4DT {
    set {
      examplePINVOKE.FbxDouble4DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDouble4DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDouble4x4DT {
    set {
      examplePINVOKE.FbxDouble4x4DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDouble4x4DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxEnumDT {
    set {
      examplePINVOKE.FbxEnumDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxEnumDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxStringDT {
    set {
      examplePINVOKE.FbxStringDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxStringDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTimeDT {
    set {
      examplePINVOKE.FbxTimeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTimeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxReferenceDT {
    set {
      examplePINVOKE.FbxReferenceDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxReferenceDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxBlobDT {
    set {
      examplePINVOKE.FbxBlobDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxBlobDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDistanceDT {
    set {
      examplePINVOKE.FbxDistanceDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDistanceDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxDateTimeDT {
    set {
      examplePINVOKE.FbxDateTimeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxDateTimeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxColor3DT {
    set {
      examplePINVOKE.FbxColor3DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxColor3DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxColor4DT {
    set {
      examplePINVOKE.FbxColor4DT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxColor4DT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCompoundDT {
    set {
      examplePINVOKE.FbxCompoundDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCompoundDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxReferenceObjectDT {
    set {
      examplePINVOKE.FbxReferenceObjectDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxReferenceObjectDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxReferencePropertyDT {
    set {
      examplePINVOKE.FbxReferencePropertyDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxReferencePropertyDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxVisibilityDT {
    set {
      examplePINVOKE.FbxVisibilityDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxVisibilityDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxVisibilityInheritanceDT {
    set {
      examplePINVOKE.FbxVisibilityInheritanceDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxVisibilityInheritanceDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUrlDT {
    set {
      examplePINVOKE.FbxUrlDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxUrlDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxXRefUrlDT {
    set {
      examplePINVOKE.FbxXRefUrlDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxXRefUrlDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTranslationDT {
    set {
      examplePINVOKE.FbxTranslationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTranslationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRotationDT {
    set {
      examplePINVOKE.FbxRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxScalingDT {
    set {
      examplePINVOKE.FbxScalingDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxScalingDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxQuaternionDT {
    set {
      examplePINVOKE.FbxQuaternionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxQuaternionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalTranslationDT {
    set {
      examplePINVOKE.FbxLocalTranslationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLocalTranslationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalRotationDT {
    set {
      examplePINVOKE.FbxLocalRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLocalRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalScalingDT {
    set {
      examplePINVOKE.FbxLocalScalingDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLocalScalingDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLocalQuaternionDT {
    set {
      examplePINVOKE.FbxLocalQuaternionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLocalQuaternionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTransformMatrixDT {
    set {
      examplePINVOKE.FbxTransformMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTransformMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTranslationMatrixDT {
    set {
      examplePINVOKE.FbxTranslationMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTranslationMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRotationMatrixDT {
    set {
      examplePINVOKE.FbxRotationMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxRotationMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxScalingMatrixDT {
    set {
      examplePINVOKE.FbxScalingMatrixDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxScalingMatrixDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialEmissiveDT {
    set {
      examplePINVOKE.FbxMaterialEmissiveDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialEmissiveDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialEmissiveFactorDT {
    set {
      examplePINVOKE.FbxMaterialEmissiveFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialEmissiveFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialAmbientDT {
    set {
      examplePINVOKE.FbxMaterialAmbientDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialAmbientDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialAmbientFactorDT {
    set {
      examplePINVOKE.FbxMaterialAmbientFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialAmbientFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialDiffuseDT {
    set {
      examplePINVOKE.FbxMaterialDiffuseDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialDiffuseDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialDiffuseFactorDT {
    set {
      examplePINVOKE.FbxMaterialDiffuseFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialDiffuseFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialBumpDT {
    set {
      examplePINVOKE.FbxMaterialBumpDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialBumpDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialNormalMapDT {
    set {
      examplePINVOKE.FbxMaterialNormalMapDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialNormalMapDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialTransparentColorDT {
    set {
      examplePINVOKE.FbxMaterialTransparentColorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialTransparentColorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialTransparencyFactorDT {
    set {
      examplePINVOKE.FbxMaterialTransparencyFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialTransparencyFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialSpecularDT {
    set {
      examplePINVOKE.FbxMaterialSpecularDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialSpecularDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialSpecularFactorDT {
    set {
      examplePINVOKE.FbxMaterialSpecularFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialSpecularFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialShininessDT {
    set {
      examplePINVOKE.FbxMaterialShininessDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialShininessDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialReflectionDT {
    set {
      examplePINVOKE.FbxMaterialReflectionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialReflectionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialReflectionFactorDT {
    set {
      examplePINVOKE.FbxMaterialReflectionFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialReflectionFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialDisplacementDT {
    set {
      examplePINVOKE.FbxMaterialDisplacementDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialDisplacementDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialVectorDisplacementDT {
    set {
      examplePINVOKE.FbxMaterialVectorDisplacementDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialVectorDisplacementDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialCommonFactorDT {
    set {
      examplePINVOKE.FbxMaterialCommonFactorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialCommonFactorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxMaterialCommonTextureDT {
    set {
      examplePINVOKE.FbxMaterialCommonTextureDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMaterialCommonTextureDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementUndefinedDT {
    set {
      examplePINVOKE.FbxLayerElementUndefinedDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementUndefinedDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementNormalDT {
    set {
      examplePINVOKE.FbxLayerElementNormalDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementNormalDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementBinormalDT {
    set {
      examplePINVOKE.FbxLayerElementBinormalDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementBinormalDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementTangentDT {
    set {
      examplePINVOKE.FbxLayerElementTangentDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementTangentDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementMaterialDT {
    set {
      examplePINVOKE.FbxLayerElementMaterialDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementMaterialDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementTextureDT {
    set {
      examplePINVOKE.FbxLayerElementTextureDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementTextureDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementPolygonGroupDT {
    set {
      examplePINVOKE.FbxLayerElementPolygonGroupDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementPolygonGroupDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementUVDT {
    set {
      examplePINVOKE.FbxLayerElementUVDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementUVDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementVertexColorDT {
    set {
      examplePINVOKE.FbxLayerElementVertexColorDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementVertexColorDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementSmoothingDT {
    set {
      examplePINVOKE.FbxLayerElementSmoothingDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementSmoothingDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementCreaseDT {
    set {
      examplePINVOKE.FbxLayerElementCreaseDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementCreaseDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementHoleDT {
    set {
      examplePINVOKE.FbxLayerElementHoleDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementHoleDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementUserDataDT {
    set {
      examplePINVOKE.FbxLayerElementUserDataDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementUserDataDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLayerElementVisibilityDT {
    set {
      examplePINVOKE.FbxLayerElementVisibilityDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayerElementVisibilityDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxAliasDT {
    set {
      examplePINVOKE.FbxAliasDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxAliasDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxPresetsDT {
    set {
      examplePINVOKE.FbxPresetsDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxPresetsDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxStatisticsDT {
    set {
      examplePINVOKE.FbxStatisticsDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxStatisticsDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTextLineDT {
    set {
      examplePINVOKE.FbxTextLineDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTextLineDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxUnitsDT {
    set {
      examplePINVOKE.FbxUnitsDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxUnitsDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxWarningDT {
    set {
      examplePINVOKE.FbxWarningDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxWarningDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxWebDT {
    set {
      examplePINVOKE.FbxWebDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxWebDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxActionDT {
    set {
      examplePINVOKE.FbxActionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxActionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCameraIndexDT {
    set {
      examplePINVOKE.FbxCameraIndexDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCameraIndexDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxCharPtrDT {
    set {
      examplePINVOKE.FbxCharPtrDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxCharPtrDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxConeAngleDT {
    set {
      examplePINVOKE.FbxConeAngleDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxConeAngleDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxEventDT {
    set {
      examplePINVOKE.FbxEventDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxEventDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFieldOfViewDT {
    set {
      examplePINVOKE.FbxFieldOfViewDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxFieldOfViewDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFieldOfViewXDT {
    set {
      examplePINVOKE.FbxFieldOfViewXDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxFieldOfViewXDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFieldOfViewYDT {
    set {
      examplePINVOKE.FbxFieldOfViewYDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxFieldOfViewYDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxFogDT {
    set {
      examplePINVOKE.FbxFogDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxFogDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxHSBDT {
    set {
      examplePINVOKE.FbxHSBDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxHSBDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIKReachTranslationDT {
    set {
      examplePINVOKE.FbxIKReachTranslationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIKReachTranslationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIKReachRotationDT {
    set {
      examplePINVOKE.FbxIKReachRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIKReachRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxIntensityDT {
    set {
      examplePINVOKE.FbxIntensityDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIntensityDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxLookAtDT {
    set {
      examplePINVOKE.FbxLookAtDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLookAtDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOcclusionDT {
    set {
      examplePINVOKE.FbxOcclusionDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxOcclusionDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOpticalCenterXDT {
    set {
      examplePINVOKE.FbxOpticalCenterXDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxOpticalCenterXDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOpticalCenterYDT {
    set {
      examplePINVOKE.FbxOpticalCenterYDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxOpticalCenterYDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxOrientationDT {
    set {
      examplePINVOKE.FbxOrientationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxOrientationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRealDT {
    set {
      examplePINVOKE.FbxRealDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxRealDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxRollDT {
    set {
      examplePINVOKE.FbxRollDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxRollDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxScalingUVDT {
    set {
      examplePINVOKE.FbxScalingUVDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxScalingUVDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxShapeDT {
    set {
      examplePINVOKE.FbxShapeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxShapeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxStringListDT {
    set {
      examplePINVOKE.FbxStringListDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxStringListDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTextureRotationDT {
    set {
      examplePINVOKE.FbxTextureRotationDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTextureRotationDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTimeCodeDT {
    set {
      examplePINVOKE.FbxTimeCodeDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTimeCodeDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTimeWarpDT {
    set {
      examplePINVOKE.FbxTimeWarpDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTimeWarpDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxTranslationUVDT {
    set {
      examplePINVOKE.FbxTranslationUVDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxTranslationUVDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static FbxDataType FbxWeightDT {
    set {
      examplePINVOKE.FbxWeightDT_set(FbxDataType.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxWeightDT_get();
      FbxDataType ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxDataType(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_void FbxModuleLoad(string pFilePath) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxModuleLoad(pFilePath);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void FbxModuleGetProc(SWIGTYPE_p_void pModuleHandle, string pProcName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxModuleGetProc(SWIGTYPE_p_void.getCPtr(pModuleHandle), pProcName);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static bool FbxModuleFree(SWIGTYPE_p_void pModuleHandle) {
    bool ret = examplePINVOKE.FbxModuleFree(SWIGTYPE_p_void.getCPtr(pModuleHandle));
    return ret;
  }

  public static FbxPeripheral NULL_PERIPHERAL {
    set {
      examplePINVOKE.NULL_PERIPHERAL_set(FbxPeripheral.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.NULL_PERIPHERAL_get();
      FbxPeripheral ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPeripheral(cPtr, false);
      return ret;
    } 
  }

  public static FbxPeripheral TMPFILE_PERIPHERAL {
    set {
      examplePINVOKE.TMPFILE_PERIPHERAL_set(FbxPeripheral.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.TMPFILE_PERIPHERAL_get();
      FbxPeripheral ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPeripheral(cPtr, false);
      return ret;
    } 
  }

  public static void FbxMarkObject(FbxObject pObject, SWIGTYPE_p_FbxMapT_FbxObject_p_int_t pObjectDstDisconnectCount, SWIGTYPE_p_FbxSetT_FbxObject_p_t pObjectsToDeleted, SWIGTYPE_p_FbxArrayT_FbxObject_p_t pObjectToDeletedInSequence) {
    examplePINVOKE.FbxMarkObject(FbxObject.getCPtr(pObject), SWIGTYPE_p_FbxMapT_FbxObject_p_int_t.getCPtr(pObjectDstDisconnectCount), SWIGTYPE_p_FbxSetT_FbxObject_p_t.getCPtr(pObjectsToDeleted), SWIGTYPE_p_FbxArrayT_FbxObject_p_t.getCPtr(pObjectToDeletedInSequence));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxCleanUpConnectionsAtDestructionBoundary(FbxScene pObject, SWIGTYPE_p_FbxArrayT_FbxObject_p_t pObjectToDeletedInSequence) {
    examplePINVOKE.FbxCleanUpConnectionsAtDestructionBoundary(FbxScene.getCPtr(pObject), SWIGTYPE_p_FbxArrayT_FbxObject_p_t.getCPtr(pObjectToDeletedInSequence));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint FbxTypeSizeOf(EFbxType pType) {
    uint ret = examplePINVOKE.FbxTypeSizeOf((int)pType);
    return ret;
  }

  public static uint FbxTypeComponentCount(EFbxType pType) {
    uint ret = examplePINVOKE.FbxTypeComponentCount((int)pType);
    return ret;
  }

  public static EFbxType FbxTypeOf(sbyte arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_0(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(byte arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_1(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(short arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_2(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(ushort arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_3(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(uint arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_4(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(long arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_5(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(ulong arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_6(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxHalfFloat arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_7(FbxHalfFloat.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(bool arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_8(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(int arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_9(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(float arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_10(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(double arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_11(arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_FbxVectorTemplate2T_double_t arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_12(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_13(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_14(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_15(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVector2 arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_16(FbxVector2.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVector4 arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_17(FbxVector4.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxQuaternion arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_18(FbxQuaternion.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxMatrix arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_19(FbxMatrix.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxAMatrix arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_20(FbxAMatrix.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxString arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_21(FbxString.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTime arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_22(FbxTime.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxObject arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_23(FbxObject.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxBlob arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_24(FbxBlob.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxColor arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_25(FbxColor.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDistance arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_26(FbxDistance.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxDateTime arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_27(FbxDateTime.getCPtr(arg0));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_double pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_0(SWIGTYPE_p_double.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_bool pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_1(SWIGTYPE_p_bool.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_int pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_2(SWIGTYPE_p_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_signed_char pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_3(SWIGTYPE_p_signed_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_char pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_4(SWIGTYPE_p_unsigned_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_short pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_5(SWIGTYPE_p_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_short pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_6(SWIGTYPE_p_unsigned_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_int pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_7(SWIGTYPE_p_unsigned_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_long_long pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_8(SWIGTYPE_p_long_long.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(SWIGTYPE_p_unsigned_long_long pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_9(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopyStr(FbxHalfFloat pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopyStr__SWIG_10(FbxHalfFloat.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_1(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_2(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_3(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_4(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_5(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_6(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_7(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_8(FbxHalfFloat.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_9(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_10(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_11(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_12(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, SWIGTYPE_p_FbxVectorTemplate2T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_13(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, SWIGTYPE_p_FbxVectorTemplate3T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_14(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t pDst, SWIGTYPE_p_FbxVectorTemplate4T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_15(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t pDst, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_16(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_17(FbxString.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxTime pDst, FbxTime pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_18(FbxTime.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_p_FbxObject pDst, FbxObject pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_19(SWIGTYPE_p_p_FbxObject.getCPtr(pDst), FbxObject.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxBlob pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_20(FbxBlob.getCPtr(pDst), FbxBlob.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance pDst, FbxDistance pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_21(FbxDistance.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime pDst, FbxDateTime pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_22(FbxDateTime.getCPtr(pDst), FbxDateTime.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_23(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_24(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_25(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_26(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_27(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_28(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_29(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_30(SWIGTYPE_p_bool.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_31(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_32(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_33(SWIGTYPE_p_bool.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_34(SWIGTYPE_p_bool.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_35(SWIGTYPE_p_bool.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_36(SWIGTYPE_p_bool.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_37(SWIGTYPE_p_bool.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_38(SWIGTYPE_p_bool.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_39(SWIGTYPE_p_bool.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_40(SWIGTYPE_p_bool.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_41(SWIGTYPE_p_bool.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_42(SWIGTYPE_p_bool.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_bool arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_43(SWIGTYPE_p_bool.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_44(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, short arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_45(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, ushort arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_46(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_47(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_48(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_49(SWIGTYPE_p_signed_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_50(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_51(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_52(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_53(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_54(SWIGTYPE_p_signed_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_55(SWIGTYPE_p_signed_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_56(SWIGTYPE_p_signed_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_57(SWIGTYPE_p_signed_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_58(SWIGTYPE_p_signed_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_59(SWIGTYPE_p_signed_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_60(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_61(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_62(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_63(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_signed_char arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_64(SWIGTYPE_p_signed_char.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_65(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, short arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_66(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, ushort arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_67(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_68(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_69(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_70(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_71(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_72(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_73(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_74(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_75(SWIGTYPE_p_unsigned_char.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_76(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_77(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_78(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_79(SWIGTYPE_p_unsigned_char.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_80(SWIGTYPE_p_unsigned_char.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_81(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_82(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_83(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_84(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_char arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_85(SWIGTYPE_p_unsigned_char.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_86(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_87(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, ushort arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_88(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_89(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_90(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_91(SWIGTYPE_p_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_92(SWIGTYPE_p_short.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_93(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_94(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_95(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_96(SWIGTYPE_p_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_97(SWIGTYPE_p_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_98(SWIGTYPE_p_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_99(SWIGTYPE_p_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_100(SWIGTYPE_p_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_101(SWIGTYPE_p_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_102(SWIGTYPE_p_short.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_103(SWIGTYPE_p_short.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_104(SWIGTYPE_p_short.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_105(SWIGTYPE_p_short.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_short arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_106(SWIGTYPE_p_short.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_107(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_108(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_109(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_110(SWIGTYPE_p_unsigned_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_111(SWIGTYPE_p_unsigned_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_112(SWIGTYPE_p_unsigned_short.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_113(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_114(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_115(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_116(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_117(SWIGTYPE_p_unsigned_short.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_118(SWIGTYPE_p_unsigned_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_119(SWIGTYPE_p_unsigned_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_120(SWIGTYPE_p_unsigned_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_121(SWIGTYPE_p_unsigned_short.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_122(SWIGTYPE_p_unsigned_short.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_123(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_124(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_125(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_126(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_short arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_127(SWIGTYPE_p_unsigned_short.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_128(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_129(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_130(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_131(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_132(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_133(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_134(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_135(SWIGTYPE_p_int.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_136(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_137(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_138(SWIGTYPE_p_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_139(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_140(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_141(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_142(SWIGTYPE_p_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_143(SWIGTYPE_p_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_144(SWIGTYPE_p_int.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_145(SWIGTYPE_p_int.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_146(SWIGTYPE_p_int.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_147(SWIGTYPE_p_int.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_int arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_148(SWIGTYPE_p_int.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_149(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_150(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_151(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_152(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_153(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_154(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_155(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_156(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_157(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_158(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_159(SWIGTYPE_p_unsigned_int.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_160(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_161(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_162(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_163(SWIGTYPE_p_unsigned_int.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_164(SWIGTYPE_p_unsigned_int.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_165(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_166(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_167(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_168(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_int arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_169(SWIGTYPE_p_unsigned_int.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_170(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_171(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_172(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_173(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_174(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_175(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_176(SWIGTYPE_p_long_long.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_177(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_178(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_179(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_180(SWIGTYPE_p_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_181(SWIGTYPE_p_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_182(SWIGTYPE_p_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_183(SWIGTYPE_p_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_184(SWIGTYPE_p_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_185(SWIGTYPE_p_long_long.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_186(SWIGTYPE_p_long_long.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_187(SWIGTYPE_p_long_long.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_188(SWIGTYPE_p_long_long.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_189(SWIGTYPE_p_long_long.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_long_long arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_190(SWIGTYPE_p_long_long.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_191(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_192(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_193(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_194(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_195(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_196(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_197(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_198(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_199(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_200(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_201(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_202(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_203(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_204(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_205(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_206(SWIGTYPE_p_unsigned_long_long.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_207(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_208(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_209(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_210(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_unsigned_long_long arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_211(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_212(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_213(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_214(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_215(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_216(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_217(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_218(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_219(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_220(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_221(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_222(FbxHalfFloat.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_223(FbxHalfFloat.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_224(FbxHalfFloat.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_225(FbxHalfFloat.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_226(FbxHalfFloat.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxString arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_227(FbxHalfFloat.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_228(FbxHalfFloat.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_229(FbxHalfFloat.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_230(FbxHalfFloat.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat pDst, FbxDistance pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_231(FbxHalfFloat.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxHalfFloat arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_232(FbxHalfFloat.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_233(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_234(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_235(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_236(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_237(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_238(SWIGTYPE_p_float.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_239(SWIGTYPE_p_float.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_240(SWIGTYPE_p_float.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_241(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_242(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_243(SWIGTYPE_p_float.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_244(SWIGTYPE_p_float.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_245(SWIGTYPE_p_float.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_246(SWIGTYPE_p_float.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_247(SWIGTYPE_p_float.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxString arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_248(SWIGTYPE_p_float.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_249(SWIGTYPE_p_float.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_250(SWIGTYPE_p_float.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_251(SWIGTYPE_p_float.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float pDst, FbxDistance pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_252(SWIGTYPE_p_float.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_float arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_253(SWIGTYPE_p_float.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_254(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_255(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_256(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_257(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_258(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_259(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_260(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_261(SWIGTYPE_p_double.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_262(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_263(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_264(SWIGTYPE_p_double.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, SWIGTYPE_p_FbxVectorTemplate2T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_265(SWIGTYPE_p_double.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, SWIGTYPE_p_FbxVectorTemplate3T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_266(SWIGTYPE_p_double.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, SWIGTYPE_p_FbxVectorTemplate4T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_267(SWIGTYPE_p_double.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_268(SWIGTYPE_p_double.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_269(SWIGTYPE_p_double.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxTime pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_270(SWIGTYPE_p_double.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_double pDst, FbxDistance pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_271(SWIGTYPE_p_double.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_272(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_273(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_274(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_275(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_276(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_277(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_278(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_279(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_280(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_281(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_282(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate2T_double_t pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_283(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_284(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_285(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_286(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_287(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_288(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_289(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_290(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_291(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_292(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_293(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_294(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_295(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_296(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t pDst, SWIGTYPE_p_FbxVectorTemplate4T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_297(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_298(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, FbxString arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_299(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_300(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_301(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_302(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_303(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate3T_double_t arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_304(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, sbyte arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_305(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, byte arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_306(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, short arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_307(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, ushort arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_308(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_309(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_310(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_311(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_312(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, bool arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_313(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, int arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_314(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, float arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_315(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, double arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_316(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_317(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t pDst, SWIGTYPE_p_FbxVectorTemplate3T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_318(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_319(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxString arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_320(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_321(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_322(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_323(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_324(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_FbxVectorTemplate4T_double_t arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_325(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_326(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_327(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_328(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_329(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_330(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_331(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_332(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_333(FbxString.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_334(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_335(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_336(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_337(FbxString.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, SWIGTYPE_p_FbxVectorTemplate2T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_338(FbxString.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, SWIGTYPE_p_FbxVectorTemplate3T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_339(FbxString.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, SWIGTYPE_p_FbxVectorTemplate4T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_340(FbxString.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_341(FbxString.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxTime pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_342(FbxString.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_343(FbxString.getCPtr(pDst), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_344(FbxString.getCPtr(pDst), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDistance pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_345(FbxString.getCPtr(pDst), FbxDistance.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxString pDst, FbxDateTime pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_346(FbxString.getCPtr(pDst), FbxDateTime.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, sbyte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_347(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, byte pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_348(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, short pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_349(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, ushort pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_350(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, uint pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_351(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, long pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_352(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, ulong pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_353(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxHalfFloat pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_354(FbxBlob.getCPtr(pDst), FbxHalfFloat.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, bool pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_355(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, int pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_356(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, float pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_357(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, double pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_358(FbxBlob.getCPtr(pDst), pSrc);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, SWIGTYPE_p_FbxVectorTemplate2T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_359(FbxBlob.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, SWIGTYPE_p_FbxVectorTemplate3T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_360(FbxBlob.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, SWIGTYPE_p_FbxVectorTemplate4T_double_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_361(FbxBlob.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_362(FbxBlob.getCPtr(pDst), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_363(FbxBlob.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob pDst, FbxTime pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_364(FbxBlob.getCPtr(pDst), FbxTime.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_365(FbxBlob.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_366(FbxBlob.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxBlob arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_367(FbxBlob.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, sbyte arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_368(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, byte arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_369(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, short arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_370(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, ushort arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_371(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_372(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_373(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_374(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_375(FbxDistance.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, bool arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_376(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, int arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_377(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, float arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_378(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, double arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_379(FbxDistance.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_380(FbxDistance.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_381(FbxDistance.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_382(FbxDistance.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_383(FbxDistance.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxString arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_384(FbxDistance.getCPtr(arg0), FbxString.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_385(FbxDistance.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_386(FbxDistance.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_387(FbxDistance.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDistance arg0, FbxDateTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_388(FbxDistance.getCPtr(arg0), FbxDateTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, sbyte arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_389(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, byte arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_390(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, short arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_391(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, ushort arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_392(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, uint arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_393(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, long arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_394(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, ulong arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_395(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxHalfFloat arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_396(FbxDateTime.getCPtr(arg0), FbxHalfFloat.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, bool arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_397(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, int arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_398(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, float arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_399(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, double arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_400(FbxDateTime.getCPtr(arg0), arg1);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, SWIGTYPE_p_FbxVectorTemplate2T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_401(FbxDateTime.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, SWIGTYPE_p_FbxVectorTemplate3T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_402(FbxDateTime.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, SWIGTYPE_p_FbxVectorTemplate4T_double_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_403(FbxDateTime.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_404(FbxDateTime.getCPtr(arg0), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime pDst, FbxString pSrc) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_405(FbxDateTime.getCPtr(pDst), FbxString.getCPtr(pSrc));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxTime arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_406(FbxDateTime.getCPtr(arg0), FbxTime.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxObject arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_407(FbxDateTime.getCPtr(arg0), FbxObject.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxBlob arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_408(FbxDateTime.getCPtr(arg0), FbxBlob.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(FbxDateTime arg0, FbxDistance arg1) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_409(FbxDateTime.getCPtr(arg0), FbxDistance.getCPtr(arg1));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxTypeCopy(SWIGTYPE_p_void pDst, EFbxType pDstType, SWIGTYPE_p_void pSrc, EFbxType pSrcType) {
    bool ret = examplePINVOKE.FbxTypeCopy__SWIG_412(SWIGTYPE_p_void.getCPtr(pDst), (int)pDstType, SWIGTYPE_p_void.getCPtr(pSrc), (int)pSrcType);
    return ret;
  }

  public static SWIGTYPE_p_void FbxTypeAllocate(EFbxType pType) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxTypeAllocate((int)pType);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static bool FbxTypeDeallocate(EFbxType pType, SWIGTYPE_p_void pData) {
    bool ret = examplePINVOKE.FbxTypeDeallocate((int)pType, SWIGTYPE_p_void.getCPtr(pData));
    return ret;
  }

  public static bool FbxTypeCompare(SWIGTYPE_p_void pA, SWIGTYPE_p_void pB, EFbxType pType) {
    bool ret = examplePINVOKE.FbxTypeCompare(SWIGTYPE_p_void.getCPtr(pA), SWIGTYPE_p_void.getCPtr(pB), (int)pType);
    return ret;
  }

  public static int isnan(double arg0) {
    int ret = examplePINVOKE.isnan(arg0);
    return ret;
  }

  public static SWIGTYPE_p_a_4__double FbxIdentityMatrix {
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxIdentityMatrix_get();
      SWIGTYPE_p_a_4__double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_4__double(cPtr, false);
      return ret;
    } 
  }

  public static FbxVector4 FbxZeroVector4 {
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxZeroVector4_get();
      FbxVector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxVector4(cPtr, false);
      return ret;
    } 
  }

  public static float FbxFloor(float x) {
    float ret = examplePINVOKE.FbxFloor__SWIG_0(x);
    return ret;
  }

  public static double FbxFloor(double x) {
    double ret = examplePINVOKE.FbxFloor__SWIG_1(x);
    return ret;
  }

  public static float FbxCeil(float x) {
    float ret = examplePINVOKE.FbxCeil__SWIG_0(x);
    return ret;
  }

  public static double FbxCeil(double x) {
    double ret = examplePINVOKE.FbxCeil__SWIG_1(x);
    return ret;
  }

  public static byte FbxAbs(byte x) {
    byte ret = examplePINVOKE.FbxAbs__SWIG_0(x);
    return ret;
  }

  public static ushort FbxAbs(ushort x) {
    ushort ret = examplePINVOKE.FbxAbs__SWIG_1(x);
    return ret;
  }

  public static uint FbxAbs(uint x) {
    uint ret = examplePINVOKE.FbxAbs__SWIG_2(x);
    return ret;
  }

  public static ulong FbxAbs(ulong x) {
    ulong ret = examplePINVOKE.FbxAbs__SWIG_3(x);
    return ret;
  }

  public static float FbxAbs(float x) {
    float ret = examplePINVOKE.FbxAbs__SWIG_4(x);
    return ret;
  }

  public static double FbxAbs(double x) {
    double ret = examplePINVOKE.FbxAbs__SWIG_5(x);
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate2T_double_t x, SWIGTYPE_p_FbxVectorTemplate2T_double_t y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_2(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate2T_double_t x, SWIGTYPE_p_FbxVectorTemplate2T_double_t y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_3(SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate2T_double_t.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate3T_double_t x, SWIGTYPE_p_FbxVectorTemplate3T_double_t y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_4(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate3T_double_t x, SWIGTYPE_p_FbxVectorTemplate3T_double_t y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_5(SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate4T_double_t x, SWIGTYPE_p_FbxVectorTemplate4T_double_t y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_6(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate4T_double_t x, SWIGTYPE_p_FbxVectorTemplate4T_double_t y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_7(SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate4T_double_t.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t x, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_8(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t x, SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_9(SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(x), SWIGTYPE_p_FbxVectorTemplate4T_FbxVectorTemplate4T_double_t_t.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector2 x, FbxVector2 y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_10(FbxVector2.getCPtr(x), FbxVector2.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector2 x, FbxVector2 y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_11(FbxVector2.getCPtr(x), FbxVector2.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector4 x, FbxVector4 y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_12(FbxVector4.getCPtr(x), FbxVector4.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxVector4 x, FbxVector4 y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_13(FbxVector4.getCPtr(x), FbxVector4.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxMatrix x, FbxMatrix y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_14(FbxMatrix.getCPtr(x), FbxMatrix.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxMatrix x, FbxMatrix y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_15(FbxMatrix.getCPtr(x), FbxMatrix.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxAMatrix x, FbxAMatrix y, double e) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_16(FbxAMatrix.getCPtr(x), FbxAMatrix.getCPtr(y), e);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxEqual(FbxAMatrix x, FbxAMatrix y) {
    bool ret = examplePINVOKE.FbxEqual__SWIG_17(FbxAMatrix.getCPtr(x), FbxAMatrix.getCPtr(y));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double FbxMod(float x, SWIGTYPE_p_float i) {
    double ret = examplePINVOKE.FbxMod__SWIG_0(x, SWIGTYPE_p_float.getCPtr(i));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double FbxMod(double x, SWIGTYPE_p_double i) {
    double ret = examplePINVOKE.FbxMod__SWIG_1(x, SWIGTYPE_p_double.getCPtr(i));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double FbxMod(float x) {
    double ret = examplePINVOKE.FbxMod__SWIG_2(x);
    return ret;
  }

  public static double FbxMod(double x) {
    double ret = examplePINVOKE.FbxMod__SWIG_3(x);
    return ret;
  }

  public static double FbxSqrt(double x) {
    double ret = examplePINVOKE.FbxSqrt__SWIG_0(x);
    return ret;
  }

  public static float FbxSqrt(float x) {
    float ret = examplePINVOKE.FbxSqrt__SWIG_1(x);
    return ret;
  }

  public static float FbxExp(float x) {
    float ret = examplePINVOKE.FbxExp__SWIG_0(x);
    return ret;
  }

  public static double FbxExp(double x) {
    double ret = examplePINVOKE.FbxExp__SWIG_1(x);
    return ret;
  }

  public static float FbxLog(float x) {
    float ret = examplePINVOKE.FbxLog__SWIG_0(x);
    return ret;
  }

  public static double FbxLog(double x) {
    double ret = examplePINVOKE.FbxLog__SWIG_1(x);
    return ret;
  }

  public static float FbxSin(float x) {
    float ret = examplePINVOKE.FbxSin__SWIG_0(x);
    return ret;
  }

  public static double FbxSin(double x) {
    double ret = examplePINVOKE.FbxSin__SWIG_1(x);
    return ret;
  }

  public static float FbxCos(float x) {
    float ret = examplePINVOKE.FbxCos__SWIG_0(x);
    return ret;
  }

  public static double FbxCos(double x) {
    double ret = examplePINVOKE.FbxCos__SWIG_1(x);
    return ret;
  }

  public static float FbxTan(float x) {
    float ret = examplePINVOKE.FbxTan__SWIG_0(x);
    return ret;
  }

  public static double FbxTan(double x) {
    double ret = examplePINVOKE.FbxTan__SWIG_1(x);
    return ret;
  }

  public static float FbxASin(float x) {
    float ret = examplePINVOKE.FbxASin__SWIG_0(x);
    return ret;
  }

  public static double FbxASin(double x) {
    double ret = examplePINVOKE.FbxASin__SWIG_1(x);
    return ret;
  }

  public static float FbxACos(float x) {
    float ret = examplePINVOKE.FbxACos__SWIG_0(x);
    return ret;
  }

  public static double FbxACos(double x) {
    double ret = examplePINVOKE.FbxACos__SWIG_1(x);
    return ret;
  }

  public static float FbxATan(float x) {
    float ret = examplePINVOKE.FbxATan__SWIG_0(x);
    return ret;
  }

  public static double FbxATan(double x) {
    double ret = examplePINVOKE.FbxATan__SWIG_1(x);
    return ret;
  }

  public static float FbxATan(float y, float x) {
    float ret = examplePINVOKE.FbxATan__SWIG_2(y, x);
    return ret;
  }

  public static double FbxATan(double y, double x) {
    double ret = examplePINVOKE.FbxATan__SWIG_3(y, x);
    return ret;
  }

  public static FbxVector4 FbxRejection(FbxVector4 a, FbxVector4 b) {
    FbxVector4 ret = new FbxVector4(examplePINVOKE.FbxRejection(FbxVector4.getCPtr(a), FbxVector4.getCPtr(b)), true);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool FbxGetContinuousRotation(FbxVector4 pRes, FbxVector4 pRot, FbxVector4 pRef, SWIGTYPE_p_int pOrder) {
    bool ret = examplePINVOKE.FbxGetContinuousRotation__SWIG_0(FbxVector4.getCPtr(pRes), FbxVector4.getCPtr(pRot), FbxVector4.getCPtr(pRef), SWIGTYPE_p_int.getCPtr(pOrder));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FbxGetContinuousRotation(FbxVector4 pRes, FbxVector4 pRot, FbxVector4 pRef) {
    examplePINVOKE.FbxGetContinuousRotation__SWIG_1(FbxVector4.getCPtr(pRes), FbxVector4.getCPtr(pRot), FbxVector4.getCPtr(pRef));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FbxSleep(int pMilliseconds) {
    examplePINVOKE.FbxSleep(pMilliseconds);
  }

  public static long FbxGetHighResCounter() {
    long ret = examplePINVOKE.FbxGetHighResCounter();
    return ret;
  }

  public static long FbxGetHighResFrequency() {
    long ret = examplePINVOKE.FbxGetHighResFrequency();
    return ret;
  }

  public static FbxString URL(FbxString pID) {
    FbxString ret = new FbxString(examplePINVOKE.URL(FbxString.getCPtr(pID)), true);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FbxString DecodePercentEncoding(FbxString pEncodedString) {
    FbxString ret = new FbxString(examplePINVOKE.DecodePercentEncoding(FbxString.getCPtr(pEncodedString)), true);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int COLLADA_MORPH_WEIGHT_TO_FBX_RATIO {
    get {
      int ret = examplePINVOKE.COLLADA_MORPH_WEIGHT_TO_FBX_RATIO_get();
      return ret;
    } 
  }

  public static int MATRIX_STRIDE {
    get {
      int ret = examplePINVOKE.MATRIX_STRIDE_get();
      return ret;
    } 
  }

  public static int VECTOR_STRIDE {
    get {
      int ret = examplePINVOKE.VECTOR_STRIDE_get();
      return ret;
    } 
  }

  public static void DAE_AddNotificationError(FbxManager pSdkManger, FbxString pErrorMessage) {
    examplePINVOKE.DAE_AddNotificationError(FbxManager.getCPtr(pSdkManger), FbxString.getCPtr(pErrorMessage));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_AddNotificationWarning(FbxManager pSdkManger, FbxString pWarningMessage) {
    examplePINVOKE.DAE_AddNotificationWarning(FbxManager.getCPtr(pSdkManger), FbxString.getCPtr(pWarningMessage));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_ExportArray(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxVector4_t arr) {
    examplePINVOKE.DAE_ExportArray__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxVector4_t.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_ExportArray(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxVector2_t arr) {
    examplePINVOKE.DAE_ExportArray__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxVector2_t.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_ExportArray(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxColor_t arr) {
    examplePINVOKE.DAE_ExportArray__SWIG_2(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxColor_t.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_ExportArray(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_double_t arr) {
    examplePINVOKE.DAE_ExportArray__SWIG_3(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_double_t.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_ExportArray(SWIGTYPE_p_xmlNode parentXmlNode, string id, FbxStringList arr) {
    examplePINVOKE.DAE_ExportArray__SWIG_4(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, FbxStringList.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, FbxStringList accessorParams, SWIGTYPE_p_FbxArrayT_double_t arr, bool isCommonProfile) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, FbxStringList.getCPtr(accessorParams), SWIGTYPE_p_FbxArrayT_double_t.getCPtr(arr), isCommonProfile);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, FbxStringList accessorParams, SWIGTYPE_p_FbxArrayT_double_t arr) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, FbxStringList.getCPtr(accessorParams), SWIGTYPE_p_FbxArrayT_double_t.getCPtr(arr));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxVector4_t arr) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_2(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxVector4_t.getCPtr(arr));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxVector2_t arr) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_3(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxVector2_t.getCPtr(arr));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxColor_t arr) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_4(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxColor_t.getCPtr(arr));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxAMatrix_t arr) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_5(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxAMatrix_t.getCPtr(arr));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, SWIGTYPE_p_FbxArrayT_FbxMatrix_t arr) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_6(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, SWIGTYPE_p_FbxArrayT_FbxMatrix_t.getCPtr(arr));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, FbxStringList arr, string type, bool isCommonProfile) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_7(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, FbxStringList.getCPtr(arr), type, isCommonProfile);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportSource14(SWIGTYPE_p_xmlNode parentXmlNode, string id, FbxStringList arr, string type) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportSource14__SWIG_8(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, FbxStringList.getCPtr(arr), type);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void DAE_ExportSourceArray(SWIGTYPE_p_xmlNode sourceNode, string id, SWIGTYPE_p_FbxArrayT_FbxColor_t arr) {
    examplePINVOKE.DAE_ExportSourceArray(SWIGTYPE_p_xmlNode.getCPtr(sourceNode), id, SWIGTYPE_p_FbxArrayT_FbxColor_t.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DAE_ExportSourceArray14(SWIGTYPE_p_xmlNode sourceNode, string id, SWIGTYPE_p_FbxArrayT_FbxColor_t arr) {
    examplePINVOKE.DAE_ExportSourceArray14(SWIGTYPE_p_xmlNode.getCPtr(sourceNode), id, SWIGTYPE_p_FbxArrayT_FbxColor_t.getCPtr(arr));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportAccessor(SWIGTYPE_p_xmlNode parentXmlNode, string id, string arrayRef, int count, int stride, string name, string type) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportAccessor(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, arrayRef, count, stride, name, type);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_ExportAccessor14(SWIGTYPE_p_xmlNode parentXmlNode, string id, string arrayRef, int count, int stride, string name, string type) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_ExportAccessor14(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), id, arrayRef, count, stride, name, type);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static void DAE_AddXYZAccessor(SWIGTYPE_p_xmlNode parentXmlNode, string profile, string arrayName, string arrayRef, int count) {
    examplePINVOKE.DAE_AddXYZAccessor(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), profile, arrayName, arrayRef, count);
  }

  public static void DAE_AddSTAccessor(SWIGTYPE_p_xmlNode parentXmlNode, string profile, string arrayName, string arrayRef, int count) {
    examplePINVOKE.DAE_AddSTAccessor(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), profile, arrayName, arrayRef, count);
  }

  public static void DAE_AddFlow(SWIGTYPE_p_xmlNode node, DAE_Flow flow) {
    examplePINVOKE.DAE_AddFlow(SWIGTYPE_p_xmlNode.getCPtr(node), (int)flow);
  }

  public static void DAE_AddXYZAccessor14(SWIGTYPE_p_xmlNode parentXmlNode, string profile, string arrayName, string arrayRef, int count) {
    examplePINVOKE.DAE_AddXYZAccessor14(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), profile, arrayName, arrayRef, count);
  }

  public static void DAE_AddSTAccessor14(SWIGTYPE_p_xmlNode parentXmlNode, string profile, string arrayName, string arrayRef, int count) {
    examplePINVOKE.DAE_AddSTAccessor14(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), profile, arrayName, arrayRef, count);
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, FbxColor color, DAE_Flow flow) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, FbxColor.getCPtr(color), (int)flow);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, FbxVector4 vector, DAE_Flow flow) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, FbxVector4.getCPtr(vector), (int)flow);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, double value, DAE_Flow flow) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_2(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, value, (int)flow);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, bool value, DAE_Flow flow) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_3(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, value, (int)flow);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, string type, string value, DAE_Flow flow) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_4(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, type, value, (int)flow);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, SWIGTYPE_p_FbxVectorTemplate3T_double_t color) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_5(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(color));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, FbxColor color) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_6(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, FbxColor.getCPtr(color));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, FbxVector4 vector) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_7(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, FbxVector4.getCPtr(vector));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, double value) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_8(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, value);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, bool value) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_9(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, value);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddParameter(SWIGTYPE_p_xmlNode parentXmlNode, string name, string type, string value) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddParameter__SWIG_10(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), name, type, value);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddTechnique(SWIGTYPE_p_xmlNode parentXmlNode, string technique) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddTechnique(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), technique);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static void DAE_AddInput(SWIGTYPE_p_xmlNode parentXmlNode, string semantic, string source, int idx) {
    examplePINVOKE.DAE_AddInput__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), semantic, source, idx);
  }

  public static void DAE_AddInput(SWIGTYPE_p_xmlNode parentXmlNode, string semantic, string source) {
    examplePINVOKE.DAE_AddInput__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), semantic, source);
  }

  public static void DAE_AddInput14(SWIGTYPE_p_xmlNode parentXmlNode, string semantic, string source, int offset, int set) {
    examplePINVOKE.DAE_AddInput14__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), semantic, source, offset, set);
  }

  public static void DAE_AddInput14(SWIGTYPE_p_xmlNode parentXmlNode, string semantic, string source, int offset) {
    examplePINVOKE.DAE_AddInput14__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), semantic, source, offset);
  }

  public static void DAE_AddInput14(SWIGTYPE_p_xmlNode parentXmlNode, string semantic, string source) {
    examplePINVOKE.DAE_AddInput14__SWIG_2(SWIGTYPE_p_xmlNode.getCPtr(parentXmlNode), semantic, source);
  }

  public static FbxString matrixToString(FbxAMatrix mx) {
    FbxString ret = new FbxString(examplePINVOKE.matrixToString(FbxAMatrix.getCPtr(mx)), true);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void findChildrenByType(SWIGTYPE_p_xmlNode pParentElement, SWIGTYPE_p_FbxSetT_FbxString_FbxLessCompareT_FbxString_t_FbxBaseAllocator_t pTypes, SWIGTYPE_p_FbxArrayT_xmlNode_p_t pChildrenElements) {
    examplePINVOKE.findChildrenByType__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), SWIGTYPE_p_FbxSetT_FbxString_FbxLessCompareT_FbxString_t_FbxBaseAllocator_t.getCPtr(pTypes), SWIGTYPE_p_FbxArrayT_xmlNode_p_t.getCPtr(pChildrenElements));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void findChildrenByType(SWIGTYPE_p_xmlNode pParentElement, string pType, SWIGTYPE_p_FbxArrayT_xmlNode_p_t pChildrenElements) {
    examplePINVOKE.findChildrenByType__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), pType, SWIGTYPE_p_FbxArrayT_xmlNode_p_t.getCPtr(pChildrenElements));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_xmlNode getSourceAccessor(SWIGTYPE_p_xmlNode sourceNode) {
    global::System.IntPtr cPtr = examplePINVOKE.getSourceAccessor(SWIGTYPE_p_xmlNode.getCPtr(sourceNode));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode getTechniqueNode(SWIGTYPE_p_xmlNode parent, string profile) {
    global::System.IntPtr cPtr = examplePINVOKE.getTechniqueNode(SWIGTYPE_p_xmlNode.getCPtr(parent), profile);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static double inchesToCentimeters(double val) {
    double ret = examplePINVOKE.inchesToCentimeters(val);
    return ret;
  }

  public static double centimetersToInches(double val) {
    double ret = examplePINVOKE.centimetersToInches(val);
    return ret;
  }

  public static double degreesToRadians(double val) {
    double ret = examplePINVOKE.degreesToRadians(val);
    return ret;
  }

  public static double radiansToDegrees(double val) {
    double ret = examplePINVOKE.radiansToDegrees(val);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_FindChildElementByAttribute(SWIGTYPE_p_xmlNode pParentElement, string pAttributeName, string pAttributeValue, string pDefaultAttributeValue) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_FindChildElementByAttribute__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), pAttributeName, pAttributeValue, pDefaultAttributeValue);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_FindChildElementByAttribute(SWIGTYPE_p_xmlNode pParentElement, string pAttributeName, string pAttributeValue) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_FindChildElementByAttribute__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), pAttributeName, pAttributeValue);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_FindChildElementByTag(SWIGTYPE_p_xmlNode pParentElement, string pTag, SWIGTYPE_p_xmlNode pFindFrom) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_FindChildElementByTag__SWIG_0(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), pTag, SWIGTYPE_p_xmlNode.getCPtr(pFindFrom));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_FindChildElementByTag(SWIGTYPE_p_xmlNode pParentElement, string pTag) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_FindChildElementByTag__SWIG_1(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), pTag);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static bool DAE_CheckCompatibility(SWIGTYPE_p_xmlNode pNodeElement) {
    bool ret = examplePINVOKE.DAE_CheckCompatibility(SWIGTYPE_p_xmlNode.getCPtr(pNodeElement));
    return ret;
  }

  public static void DAE_GetElementTag(SWIGTYPE_p_xmlNode pElement, FbxString pTag) {
    examplePINVOKE.DAE_GetElementTag(SWIGTYPE_p_xmlNode.getCPtr(pElement), FbxString.getCPtr(pTag));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static FbxString DAE_GetElementAttributeValue(SWIGTYPE_p_xmlNode pElement, string pAttributeName) {
    FbxString ret = new FbxString(examplePINVOKE.DAE_GetElementAttributeValue(SWIGTYPE_p_xmlNode.getCPtr(pElement), pAttributeName), true);
    return ret;
  }

  public static bool DAE_CompareAttributeValue(SWIGTYPE_p_xmlNode pElement, string pAttributeName, string pValue) {
    bool ret = examplePINVOKE.DAE_CompareAttributeValue(SWIGTYPE_p_xmlNode.getCPtr(pElement), pAttributeName, pValue);
    return ret;
  }

  public static FbxString DAE_GetIDFromUrlAttribute(SWIGTYPE_p_xmlNode pElement) {
    FbxString ret = new FbxString(examplePINVOKE.DAE_GetIDFromUrlAttribute(SWIGTYPE_p_xmlNode.getCPtr(pElement)), true);
    return ret;
  }

  public static FbxString DAE_GetIDFromSourceAttribute(SWIGTYPE_p_xmlNode pElement) {
    FbxString ret = new FbxString(examplePINVOKE.DAE_GetIDFromSourceAttribute(SWIGTYPE_p_xmlNode.getCPtr(pElement)), true);
    return ret;
  }

  public static FbxString DAE_GetIDFromTargetAttribute(SWIGTYPE_p_xmlNode pElement) {
    FbxString ret = new FbxString(examplePINVOKE.DAE_GetIDFromTargetAttribute(SWIGTYPE_p_xmlNode.getCPtr(pElement)), true);
    return ret;
  }

  public static void DAE_SetName(FbxObject pObject, FbxString pName, FbxString pID) {
    examplePINVOKE.DAE_SetName(FbxObject.getCPtr(pObject), FbxString.getCPtr(pName), FbxString.getCPtr(pID));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_xmlNode DAE_GetSourceWithSemantic(SWIGTYPE_p_xmlNode pConsumerElement, string pSemantic, SWIGTYPE_p_FbxMapT_FbxString_xmlNode_p_FbxLessCompareT_FbxString_t_FbxBaseAllocator_t pSourceElements) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_GetSourceWithSemantic(SWIGTYPE_p_xmlNode.getCPtr(pConsumerElement), pSemantic, SWIGTYPE_p_FbxMapT_FbxString_xmlNode_p_FbxLessCompareT_FbxString_t_FbxBaseAllocator_t.getCPtr(pSourceElements));
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_AddChildElement(SWIGTYPE_p_xmlNode pParentElement, string pTag) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_AddChildElement(SWIGTYPE_p_xmlNode.getCPtr(pParentElement), pTag);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_xmlNode DAE_NewElement(string pTag) {
    global::System.IntPtr cPtr = examplePINVOKE.DAE_NewElement(pTag);
    SWIGTYPE_p_xmlNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_xmlNode(cPtr, false);
    return ret;
  }

  public static FbxSystemUnit DAE_ImportUnit(SWIGTYPE_p_xmlNode pUnitElement) {
    FbxSystemUnit ret = new FbxSystemUnit(examplePINVOKE.DAE_ImportUnit(SWIGTYPE_p_xmlNode.getCPtr(pUnitElement)), true);
    return ret;
  }

  public static void IncreaseLclTranslationAnimation(FbxNode pNode, SWIGTYPE_p_FbxVectorTemplate3T_double_t pOffset) {
    examplePINVOKE.IncreaseLclTranslationAnimation(FbxNode.getCPtr(pNode), SWIGTYPE_p_FbxVectorTemplate3T_double_t.getCPtr(pOffset));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RecursiveSearchElement(SWIGTYPE_p_xmlNode pBaseElement, string pTag, SWIGTYPE_p_FbxArrayT_xmlNode_p_t pResult) {
    examplePINVOKE.RecursiveSearchElement(SWIGTYPE_p_xmlNode.getCPtr(pBaseElement), pTag, SWIGTYPE_p_FbxArrayT_xmlNode_p_t.getCPtr(pResult));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int FbxFileVersionStrToInt(string pFileVersion) {
    int ret = examplePINVOKE.FbxFileVersionStrToInt(pFileVersion);
    return ret;
  }

  public static FbxReader CreateFBXReader(FbxManager pManager, FbxImporter pImporter, int pID, FbxStatus pStatus) {
    global::System.IntPtr cPtr = examplePINVOKE.CreateFBXReader(FbxManager.getCPtr(pManager), FbxImporter.getCPtr(pImporter), pID, FbxStatus.getCPtr(pStatus));
    FbxReader ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxReader(cPtr, false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GetInfoFBXReader(SWIGTYPE_p_int pCount, SWIGTYPE_p_p_char pExtensions, SWIGTYPE_p_p_char pDescriptions) {
    examplePINVOKE.GetInfoFBXReader(SWIGTYPE_p_int.getCPtr(pCount), SWIGTYPE_p_p_char.getCPtr(pExtensions), SWIGTYPE_p_p_char.getCPtr(pDescriptions));
  }

  public static bool IsNameUnique(FbxScene pScene, FbxObject pObject) {
    bool ret = examplePINVOKE.IsNameUnique(FbxScene.getCPtr(pScene), FbxObject.getCPtr(pObject));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ExportThread(SWIGTYPE_p_void arg0) {
    examplePINVOKE.ExportThread(SWIGTYPE_p_void.getCPtr(arg0));
  }

  public static EFbxType FbxTypeOf(FbxTime.EMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_29((int)arg0);
    return ret;
  }

  public static void ImportThread(SWIGTYPE_p_void arg0) {
    examplePINVOKE.ImportThread(SWIGTYPE_p_void.getCPtr(arg0));
  }

  public static void CollectAnimFromCurveNode(SWIGTYPE_p_p_void lSrc, SWIGTYPE_p_void fcn, uint nbCrvs, FbxAnimCurveNode cn, FbxMultiMap pNickToAnimCurveTimeWarpsSet, FbxMultiMap pNickToKFCurveNodeWarpSet) {
    examplePINVOKE.CollectAnimFromCurveNode(SWIGTYPE_p_p_void.getCPtr(lSrc), SWIGTYPE_p_void.getCPtr(fcn), nbCrvs, FbxAnimCurveNode.getCPtr(cn), FbxMultiMap.getCPtr(pNickToAnimCurveTimeWarpsSet), FbxMultiMap.getCPtr(pNickToKFCurveNodeWarpSet));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetAllAnimCurves(FbxAnimStack pAnimStack, SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t pCurves) {
    examplePINVOKE.GetAllAnimCurves__SWIG_0(FbxAnimStack.getCPtr(pAnimStack), SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t.getCPtr(pCurves));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetAllAnimCurves(FbxObject pObj, FbxAnimStack pAnimStack, SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t pCurves) {
    examplePINVOKE.GetAllAnimCurves__SWIG_1(FbxObject.getCPtr(pObj), FbxAnimStack.getCPtr(pAnimStack), SWIGTYPE_p_FbxArrayT_FbxAnimCurve_p_t.getCPtr(pCurves));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EOffAutoUser arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_30((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EAutoUser arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_31((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EPostureMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_32((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EFloorPivot arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_33((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.ERollExtractionMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_34((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EHipsTranslationMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_35((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EFootContactType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_36((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EHandContactType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_37((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EFingerContactMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_38((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCharacter.EContactBehaviour arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_39((int)arg0);
    return ret;
  }

  public static FbxString GetWeightPropertyName(FbxObject pObject) {
    FbxString ret = new FbxString(examplePINVOKE.GetWeightPropertyName(FbxObject.getCPtr(pObject)), true);
    return ret;
  }

  public static void CreateWeightPropertyForSourceObject(FbxObject pConstraint, FbxObject pSourceObject, double pWeightValue) {
    examplePINVOKE.CreateWeightPropertyForSourceObject(FbxObject.getCPtr(pConstraint), FbxObject.getCPtr(pSourceObject), pWeightValue);
  }

  public static EFbxType FbxTypeOf(FbxConstraintAim.EWorldUp arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_40((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxConstraintSingleChainIK.EPoleVectorMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_41((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxConstraintSingleChainIK.ESolverMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_42((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxConstraintSingleChainIK.EEvaluationMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_43((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxControlSet.EType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_44((int)arg0);
    return ret;
  }

  public static FbxCharacterPropertyInfo gHIK2FbxCharacterPropertyBridge {
    get {
      global::System.IntPtr cPtr = examplePINVOKE.gHIK2FbxCharacterPropertyBridge_get();
      FbxCharacterPropertyInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCharacterPropertyInfo(cPtr, false);
      return ret;
    } 
  }

  public static EFbxType FbxTypeOf(FbxVideo.EInterlaceMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_45((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVideo.EAccessMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_46((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCache.EFileFormat arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_47((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCachedEffect.ECategory arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_48((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EAntialiasingMethod arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_49((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EApertureFormat arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_50((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EApertureMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_51((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EAspectRatioMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_52((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFrontBackPlaneDisplayMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_53((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFrontBackPlaneDistanceMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_54((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EPlateDrawingMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_55((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFocusDistanceSource arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_56((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFormat arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_57((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EGateFit arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_58((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EProjectionType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_59((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.ERenderOptionsUsageTime arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_60((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.ESafeAreaStyle arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_61((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.ESamplingType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_62((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCamera.EFilmRollOrder arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_63((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxCameraStereo.EStereoType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_64((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(SWIGTYPE_p_unsigned_long_long arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_65(SWIGTYPE_p_unsigned_long_long.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLayerElementArray arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_66(FbxLayerElementArray.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxSurfaceMaterial arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_67(FbxSurfaceMaterial.getCPtr(arg0));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_68(FbxTexture.getCPtr(arg0));
    return ret;
  }

  public static int RemapIndexArrayTo(FbxLayerElement pLayerEl, FbxLayerElement.EMappingMode pNewMapping, SWIGTYPE_p_FbxLayerElementArrayTemplateT_int_t pIndexArray) {
    int ret = examplePINVOKE.RemapIndexArrayTo(FbxLayerElement.getCPtr(pLayerEl), (int)pNewMapping, SWIGTYPE_p_FbxLayerElementArrayTemplateT_int_t.getCPtr(pIndexArray));
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLight.EType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_69((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLight.EDecayType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_70((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLight.EAreaLightShape arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_71((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLODGroup.EDisplayLevel arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_72((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxMarker.ELook arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_73((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxEuler.EOrder arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_74((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTransform.EInheritType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_75((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(EFbxQuatInterpMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_76((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxNull.ELook arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_77((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxVertexCacheDeformer.ECacheChannelType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_78((int)arg0);
    return ret;
  }

  public static FbxImplementation GetImplementation(FbxObject pObject, string pImplementationTarget) {
    global::System.IntPtr cPtr = examplePINVOKE.GetImplementation(FbxObject.getCPtr(pObject), pImplementationTarget);
    FbxImplementation ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxImplementation(cPtr, false);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxLayeredTexture.EBlendMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_79((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.EUnifiedMappingType arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_80((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.ETextureUse6 arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_81((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.EWrapMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_82((int)arg0);
    return ret;
  }

  public static EFbxType FbxTypeOf(FbxTexture.EBlendMode arg0) {
    EFbxType ret = (EFbxType)examplePINVOKE.FbxTypeOf__SWIG_83((int)arg0);
    return ret;
  }

  public static readonly int FBXSDK_NAMESPACE_USING = examplePINVOKE.FBXSDK_NAMESPACE_USING_get();
  public static readonly int FBXSDK_VERSION_MAJOR = examplePINVOKE.FBXSDK_VERSION_MAJOR_get();
  public static readonly int FBXSDK_VERSION_MINOR = examplePINVOKE.FBXSDK_VERSION_MINOR_get();
  public static readonly int FBXSDK_VERSION_POINT = examplePINVOKE.FBXSDK_VERSION_POINT_get();
  public static readonly string FBXSDK_VERSION_NAME = examplePINVOKE.FBXSDK_VERSION_NAME_get();
  public static readonly int FBXSDK_VERSION_YEAR = examplePINVOKE.FBXSDK_VERSION_YEAR_get();
  public static readonly int FBXSDK_VERSION_MONTH = examplePINVOKE.FBXSDK_VERSION_MONTH_get();
  public static readonly int FBXSDK_VERSION_DAY = examplePINVOKE.FBXSDK_VERSION_DAY_get();
  public static readonly int FBXSDK_VERSION_REVISION = examplePINVOKE.FBXSDK_VERSION_REVISION_get();
  public static readonly string FBXSDK_VERSION_STRING = examplePINVOKE.FBXSDK_VERSION_STRING_get();
  public static readonly string FBXSDK_VERSION_STRING_FULL = examplePINVOKE.FBXSDK_VERSION_STRING_FULL_get();
  public static readonly string FBXSDK_VERSION_DATE = examplePINVOKE.FBXSDK_VERSION_DATE_get();
  public static readonly int FBXSDK_DEFINE_NAMESPACE = examplePINVOKE.FBXSDK_DEFINE_NAMESPACE_get();
  public static readonly int FBXSDK_ENV_MAC = examplePINVOKE.FBXSDK_ENV_MAC_get();
  public static readonly int FBXSDK_ARCH_AMD64 = examplePINVOKE.FBXSDK_ARCH_AMD64_get();
  public static readonly int FBXSDK_CPU_64 = examplePINVOKE.FBXSDK_CPU_64_get();
  public static readonly int NULL = examplePINVOKE.NULL_get();
  public static readonly int _MAX_PATH = examplePINVOKE._MAX_PATH_get();
  public static readonly string FBXSDK_ASSERT_ENVSTR = examplePINVOKE.FBXSDK_ASSERT_ENVSTR_get();
  public static readonly int FBXSDK_SYSTEM_IS_LP64 = examplePINVOKE.FBXSDK_SYSTEM_IS_LP64_get();
  public static readonly int FBXSDK_CHAR_MIN = examplePINVOKE.FBXSDK_CHAR_MIN_get();
  public static readonly int FBXSDK_CHAR_MAX = examplePINVOKE.FBXSDK_CHAR_MAX_get();
  public static readonly int FBXSDK_UCHAR_MIN = examplePINVOKE.FBXSDK_UCHAR_MIN_get();
  public static readonly int FBXSDK_UCHAR_MAX = examplePINVOKE.FBXSDK_UCHAR_MAX_get();
  public static readonly int FBXSDK_SHORT_MIN = examplePINVOKE.FBXSDK_SHORT_MIN_get();
  public static readonly int FBXSDK_SHORT_MAX = examplePINVOKE.FBXSDK_SHORT_MAX_get();
  public static readonly int FBXSDK_USHORT_MIN = examplePINVOKE.FBXSDK_USHORT_MIN_get();
  public static readonly int FBXSDK_USHORT_MAX = examplePINVOKE.FBXSDK_USHORT_MAX_get();
  public static readonly int FBXSDK_INT_MIN = examplePINVOKE.FBXSDK_INT_MIN_get();
  public static readonly int FBXSDK_INT_MAX = examplePINVOKE.FBXSDK_INT_MAX_get();
  public static readonly int FBXSDK_UINT_MIN = examplePINVOKE.FBXSDK_UINT_MIN_get();
  public static readonly int FBXSDK_UINT_MAX = examplePINVOKE.FBXSDK_UINT_MAX_get();
  public static readonly int FBXSDK_LONG_MIN = examplePINVOKE.FBXSDK_LONG_MIN_get();
  public static readonly int FBXSDK_LONG_MAX = examplePINVOKE.FBXSDK_LONG_MAX_get();
  public static readonly int FBXSDK_ULONG_MIN = examplePINVOKE.FBXSDK_ULONG_MIN_get();
  public static readonly int FBXSDK_ULONG_MAX = examplePINVOKE.FBXSDK_ULONG_MAX_get();
  public static readonly long FBXSDK_LONGLONG_MIN = examplePINVOKE.FBXSDK_LONGLONG_MIN_get();
  public static readonly long FBXSDK_LONGLONG_MAX = examplePINVOKE.FBXSDK_LONGLONG_MAX_get();
  public static readonly ulong FBXSDK_ULONGLONG_MIN = examplePINVOKE.FBXSDK_ULONGLONG_MIN_get();
  public static readonly ulong FBXSDK_ULONGLONG_MAX = examplePINVOKE.FBXSDK_ULONGLONG_MAX_get();
  public static readonly double FBXSDK_TOLERANCE = examplePINVOKE.FBXSDK_TOLERANCE_get();
  public static readonly ulong FBXSDK_REF_MIN = examplePINVOKE.FBXSDK_REF_MIN_get();
  public static readonly ulong FBXSDK_REF_MAX = examplePINVOKE.FBXSDK_REF_MAX_get();
  public static readonly long FBXSDK_ATOMIC_MIN = examplePINVOKE.FBXSDK_ATOMIC_MIN_get();
  public static readonly long FBXSDK_ATOMIC_MAX = examplePINVOKE.FBXSDK_ATOMIC_MAX_get();
  public static readonly double FBXSDK_TIME_ASSERT_EPSILON = examplePINVOKE.FBXSDK_TIME_ASSERT_EPSILON_get();
  public static readonly int FBXSDK_TIME_FORWARD = examplePINVOKE.FBXSDK_TIME_FORWARD_get();
  public static readonly int FBXSDK_TIME_BACKWARD = examplePINVOKE.FBXSDK_TIME_BACKWARD_get();
  public static readonly long FBXSDK_TC_ZERO = examplePINVOKE.FBXSDK_TC_ZERO_get();
  public static readonly long FBXSDK_TC_EPSILON = examplePINVOKE.FBXSDK_TC_EPSILON_get();
  public static readonly long FBXSDK_TC_MINFINITY = examplePINVOKE.FBXSDK_TC_MINFINITY_get();
  public static readonly long FBXSDK_TC_INFINITY = examplePINVOKE.FBXSDK_TC_INFINITY_get();
  public static readonly long FBXSDK_TC_FIX_DEN = examplePINVOKE.FBXSDK_TC_FIX_DEN_get();
  public static readonly long FBXSDK_TC_MILLISECOND = examplePINVOKE.FBXSDK_TC_MILLISECOND_get();
  public static readonly long FBXSDK_TC_MNTSC_DEN = examplePINVOKE.FBXSDK_TC_MNTSC_DEN_get();
  public static readonly long FBXSDK_TC_MFILM_DEN = examplePINVOKE.FBXSDK_TC_MFILM_DEN_get();
  public static readonly int FBXSDK_PROPERTY_ID_NULL = examplePINVOKE.FBXSDK_PROPERTY_ID_NULL_get();
  public static readonly int FBXSDK_PROPERTY_ID_ROOT = examplePINVOKE.FBXSDK_PROPERTY_ID_ROOT_get();
  public static readonly int FBXSDK_QUERY_UNIQUE_ID = examplePINVOKE.FBXSDK_QUERY_UNIQUE_ID_get();
  public static readonly int FBXSDK_SYSTEM_UNIT_PREDEF_COUNT = examplePINVOKE.FBXSDK_SYSTEM_UNIT_PREDEF_COUNT_get();
  public static readonly double FBXSDK_PI = examplePINVOKE.FBXSDK_PI_get();
  public static readonly double FBXSDK_PI_DIV_2 = examplePINVOKE.FBXSDK_PI_DIV_2_get();
  public static readonly double FBXSDK_PI_DIV_180 = examplePINVOKE.FBXSDK_PI_DIV_180_get();
  public static readonly double FBXSDK_180_DIV_PI = examplePINVOKE.FBXSDK_180_DIV_PI_get();
  public static readonly double FBXSDK_1_DIV_LN2 = examplePINVOKE.FBXSDK_1_DIV_LN2_get();
  public static readonly double FBXSDK_DEG_TO_RAD = examplePINVOKE.FBXSDK_DEG_TO_RAD_get();
  public static readonly double FBXSDK_RAD_TO_DEG = examplePINVOKE.FBXSDK_RAD_TO_DEG_get();
  public static readonly double FBXSDK_IN_TO_CM = examplePINVOKE.FBXSDK_IN_TO_CM_get();
  public static readonly double FBXSDK_MM_TO_CM = examplePINVOKE.FBXSDK_MM_TO_CM_get();
  public static readonly double FBXSDK_CM_TO_IN = examplePINVOKE.FBXSDK_CM_TO_IN_get();
  public static readonly double FBXSDK_IN_TO_MM = examplePINVOKE.FBXSDK_IN_TO_MM_get();
  public static readonly double FBXSDK_MM_TO_IN = examplePINVOKE.FBXSDK_MM_TO_IN_get();
  public static readonly double FBXSDK_FT_TO_M = examplePINVOKE.FBXSDK_FT_TO_M_get();
  public static readonly double FBXSDK_M_TO_FT = examplePINVOKE.FBXSDK_M_TO_FT_get();
  public static readonly int FBXSDK_YD_TO_FT = examplePINVOKE.FBXSDK_YD_TO_FT_get();
  public static readonly double FBXSDK_FT_TO_YD = examplePINVOKE.FBXSDK_FT_TO_YD_get();
  public static readonly double FBXSDK_KM_TO_MILE = examplePINVOKE.FBXSDK_KM_TO_MILE_get();
  public static readonly double FBXSDK_MILE_TO_KM = examplePINVOKE.FBXSDK_MILE_TO_KM_get();
  public static readonly double FBXSDK_YD_TO_M = examplePINVOKE.FBXSDK_YD_TO_M_get();
  public static readonly double FBXSDK_M_TO_YD = examplePINVOKE.FBXSDK_M_TO_YD_get();
  public static readonly string COLLADA_VERSION_PROPERTY = examplePINVOKE.COLLADA_VERSION_PROPERTY_get();
  public static readonly string COLLADA_VERSION = examplePINVOKE.COLLADA_VERSION_get();
  public static readonly string COLLADA_SCHEMA = examplePINVOKE.COLLADA_SCHEMA_get();
  public static readonly string COLLADA_LIBRARY_ANIMATION_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_ANIMATION_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_ANIMATION_CLIP_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_ANIMATION_CLIP_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_CAMERA_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_CAMERA_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_CONTROLLER_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_CONTROLLER_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_EFFECT_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_EFFECT_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_FFIELDS_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_FFIELDS_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_GEOMETRY_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_GEOMETRY_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_IMAGE_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_IMAGE_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_LIGHT_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_LIGHT_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_MATERIAL_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_MATERIAL_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_NODE_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_NODE_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_PMATERIAL_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_PMATERIAL_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_PMODEL_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_PMODEL_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_PSCENE_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_PSCENE_ELEMENT_get();
  public static readonly string COLLADA_LIBRARY_VSCENE_ELEMENT = examplePINVOKE.COLLADA_LIBRARY_VSCENE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_ANIMATION_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_ANIMATION_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_CAMERA_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_CAMERA_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_CONTROLLER_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_CONTROLLER_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_EFFECT_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_EFFECT_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_GEOMETRY_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_GEOMETRY_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_LIGHT_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_LIGHT_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_NODE_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_NODE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_VSCENE_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_VSCENE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_PSCENE_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_PSCENE_ELEMENT_get();
  public static readonly string COLLADA_INSTANCE_MATERIAL_ELEMENT = examplePINVOKE.COLLADA_INSTANCE_MATERIAL_ELEMENT_get();
  public static readonly string COLLADA_ANIMCLIP_ELEMENT = examplePINVOKE.COLLADA_ANIMCLIP_ELEMENT_get();
  public static readonly string COLLADA_BINDMATERIAL_ELEMENT = examplePINVOKE.COLLADA_BINDMATERIAL_ELEMENT_get();
  public static readonly string COLLADA_EFFECT_ELEMENT = examplePINVOKE.COLLADA_EFFECT_ELEMENT_get();
  public static readonly string COLLADA_INITFROM_ELEMENT = examplePINVOKE.COLLADA_INITFROM_ELEMENT_get();
  public static readonly string COLLADA_SAMPLER_ELEMENT = examplePINVOKE.COLLADA_SAMPLER_ELEMENT_get();
  public static readonly string COLLADA_SKELETON_ELEMENT = examplePINVOKE.COLLADA_SKELETON_ELEMENT_get();
  public static readonly string COLLADA_TARGETS_ELEMENT = examplePINVOKE.COLLADA_TARGETS_ELEMENT_get();
  public static readonly string COLLADA_TECHNIQUE_COMMON_ELEMENT = examplePINVOKE.COLLADA_TECHNIQUE_COMMON_ELEMENT_get();
  public static readonly string COLLADA_VSCENE_ELEMENT = examplePINVOKE.COLLADA_VSCENE_ELEMENT_get();
  public static readonly string COLLADA_WEIGHTS_ELEMENT = examplePINVOKE.COLLADA_WEIGHTS_ELEMENT_get();
  public static readonly string COLLADA_VERTEXCOUNT_ELEMENT = examplePINVOKE.COLLADA_VERTEXCOUNT_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_COMMON_ELEMENT = examplePINVOKE.COLLADA_FX_PROFILE_COMMON_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_CG_ELEMENT = examplePINVOKE.COLLADA_FX_PROFILE_CG_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_HLSL_ELEMENT = examplePINVOKE.COLLADA_FX_PROFILE_HLSL_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_GLSL_ELEMENT = examplePINVOKE.COLLADA_FX_PROFILE_GLSL_ELEMENT_get();
  public static readonly string COLLADA_FX_PROFILE_GLES_ELEMENT = examplePINVOKE.COLLADA_FX_PROFILE_GLES_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_FLOAT_ELEMENT = examplePINVOKE.COLLADA_FXCMN_FLOAT_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_FLOAT4_ELEMENT = examplePINVOKE.COLLADA_FXCMN_FLOAT4_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_FLOAT4X4_ELEMENT = examplePINVOKE.COLLADA_FXCMN_FLOAT4X4_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_INCLUDE_ELEMENT = examplePINVOKE.COLLADA_FXCMN_INCLUDE_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SURFACE_ELEMENT = examplePINVOKE.COLLADA_FXCMN_SURFACE_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLER1D_ELEMENT = examplePINVOKE.COLLADA_FXCMN_SAMPLER1D_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLER2D_ELEMENT = examplePINVOKE.COLLADA_FXCMN_SAMPLER2D_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLER3D_ELEMENT = examplePINVOKE.COLLADA_FXCMN_SAMPLER3D_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SAMPLERCUBE_ELEMENT = examplePINVOKE.COLLADA_FXCMN_SAMPLERCUBE_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_NEWPARAM_ELEMENT = examplePINVOKE.COLLADA_FXCMN_NEWPARAM_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_SETPARAM_ELEMENT = examplePINVOKE.COLLADA_FXCMN_SETPARAM_ELEMENT_get();
  public static readonly string COLLADA_FXCMN_STRING_ELEMENT = examplePINVOKE.COLLADA_FXCMN_STRING_ELEMENT_get();
  public static readonly string COLLADA_TECHNIQUE_STANDARD_PARAMETER = examplePINVOKE.COLLADA_TECHNIQUE_STANDARD_PARAMETER_get();
  public static readonly string COLLADA_FXSTD_CONSTANT_ELEMENT = examplePINVOKE.COLLADA_FXSTD_CONSTANT_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_LAMBERT_ELEMENT = examplePINVOKE.COLLADA_FXSTD_LAMBERT_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_PHONG_ELEMENT = examplePINVOKE.COLLADA_FXSTD_PHONG_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_BLINN_ELEMENT = examplePINVOKE.COLLADA_FXSTD_BLINN_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_COLOR_ELEMENT = examplePINVOKE.COLLADA_FXSTD_COLOR_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_FLOAT_ELEMENT = examplePINVOKE.COLLADA_FXSTD_FLOAT_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_SAMPLER_ELEMENT = examplePINVOKE.COLLADA_FXSTD_SAMPLER_ELEMENT_get();
  public static readonly string COLLADA_FXSTD_TEXTURE_ATTRIBUTE = examplePINVOKE.COLLADA_FXSTD_TEXTURE_ATTRIBUTE_get();
  public static readonly string COLLADA_FXSTD_TEXTURESET_ATTRIBUTE = examplePINVOKE.COLLADA_FXSTD_TEXTURESET_ATTRIBUTE_get();
  public static readonly string COLLADA_CONTROLLER_SKIN_ELEMENT = examplePINVOKE.COLLADA_CONTROLLER_SKIN_ELEMENT_get();
  public static readonly string COLLADA_CONTROLLER_MORPH_ELEMENT = examplePINVOKE.COLLADA_CONTROLLER_MORPH_ELEMENT_get();
  public static readonly string COLLADA_CAMERA_PERSP_ELEMENT = examplePINVOKE.COLLADA_CAMERA_PERSP_ELEMENT_get();
  public static readonly string COLLADA_CAMERA_ORTHO_ELEMENT = examplePINVOKE.COLLADA_CAMERA_ORTHO_ELEMENT_get();
  public static readonly string COLLADA_ASPECT_CAMERA_PARAMETER = examplePINVOKE.COLLADA_ASPECT_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_XFOV_CAMERA_PARAMETER = examplePINVOKE.COLLADA_XFOV_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_YFOV_CAMERA_PARAMETER = examplePINVOKE.COLLADA_YFOV_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_ZNEAR_CAMERA_PARAMETER = examplePINVOKE.COLLADA_ZNEAR_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_ZFAR_CAMERA_PARAMETER = examplePINVOKE.COLLADA_ZFAR_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_XMAG_CAMERA_PARAMETER = examplePINVOKE.COLLADA_XMAG_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_YMAG_CAMERA_PARAMETER = examplePINVOKE.COLLADA_YMAG_CAMERA_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_VERTICAL_APERTURE_PARAMETER = examplePINVOKE.COLLADA_CAMERA_VERTICAL_APERTURE_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_HORIZONTAL_APERTURE_PARAMETER = examplePINVOKE.COLLADA_CAMERA_HORIZONTAL_APERTURE_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_LENS_SQUEEZE_PARAMETER = examplePINVOKE.COLLADA_CAMERA_LENS_SQUEEZE_PARAMETER_get();
  public static readonly string COLLADA_AMBIENT_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_AMBIENT_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_BUMP_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_BUMP_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_DIFFUSE_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_DIFFUSE_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_EMISSION_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_EMISSION_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_TRANSPARENCY_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_TRANSPARENCY_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_TRANSPARENT_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_TRANSPARENT_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_REFLECTIVE_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_REFLECTIVE_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_REFLECTIVITY_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_REFLECTIVITY_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_SHININESS_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_SHININESS_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_SPECULAR_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_SPECULAR_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_INDEXOFREFRACTION_MATERIAL_PARAMETER = examplePINVOKE.COLLADA_INDEXOFREFRACTION_MATERIAL_PARAMETER_get();
  public static readonly string COLLADA_OPAQUE_MODE_ATTRIBUTE = examplePINVOKE.COLLADA_OPAQUE_MODE_ATTRIBUTE_get();
  public static readonly string COLLADA_OPAQUE_MODE_A_ONE = examplePINVOKE.COLLADA_OPAQUE_MODE_A_ONE_get();
  public static readonly string COLLADA_OPAQUE_MODE_RGB_ONE = examplePINVOKE.COLLADA_OPAQUE_MODE_RGB_ONE_get();
  public static readonly string COLLADA_OPAQUE_MODE_A_ZERO = examplePINVOKE.COLLADA_OPAQUE_MODE_A_ZERO_get();
  public static readonly string COLLADA_OPAQUE_MODE_RGB_ZERO = examplePINVOKE.COLLADA_OPAQUE_MODE_RGB_ZERO_get();
  public static readonly string COLLADA_LIGHT_AMBIENT_ELEMENT = examplePINVOKE.COLLADA_LIGHT_AMBIENT_ELEMENT_get();
  public static readonly string COLLADA_LIGHT_POINT_ELEMENT = examplePINVOKE.COLLADA_LIGHT_POINT_ELEMENT_get();
  public static readonly string COLLADA_LIGHT_DIRECTIONAL_ELEMENT = examplePINVOKE.COLLADA_LIGHT_DIRECTIONAL_ELEMENT_get();
  public static readonly string COLLADA_LIGHT_SPOT_ELEMENT = examplePINVOKE.COLLADA_LIGHT_SPOT_ELEMENT_get();
  public static readonly string COLLADA_COLOR_LIGHT_PARAMETER = examplePINVOKE.COLLADA_COLOR_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_CONST_ATTENUATION_LIGHT_PARAMETER = examplePINVOKE.COLLADA_CONST_ATTENUATION_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_LIN_ATTENUATION_LIGHT_PARAMETER = examplePINVOKE.COLLADA_LIN_ATTENUATION_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_QUAD_ATTENUATION_LIGHT_PARAMETER = examplePINVOKE.COLLADA_QUAD_ATTENUATION_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_FALLOFFEXPONENT_LIGHT_PARAMETER = examplePINVOKE.COLLADA_FALLOFFEXPONENT_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_FALLOFFANGLE_LIGHT_PARAMETER = examplePINVOKE.COLLADA_FALLOFFANGLE_LIGHT_PARAMETER_get();
  public static readonly string COLLADA_BINDSHAPEMX_SKIN_PARAMETER = examplePINVOKE.COLLADA_BINDSHAPEMX_SKIN_PARAMETER_get();
  public static readonly string COLLADA_CONTRIBUTOR_ASSET_ELEMENT = examplePINVOKE.COLLADA_CONTRIBUTOR_ASSET_ELEMENT_get();
  public static readonly string COLLADA_AUTHOR_ASSET_PARAMETER = examplePINVOKE.COLLADA_AUTHOR_ASSET_PARAMETER_get();
  public static readonly string COLLADA_AUTHORINGTOOL_ASSET_PARAMETER = examplePINVOKE.COLLADA_AUTHORINGTOOL_ASSET_PARAMETER_get();
  public static readonly string COLLADA_CREATED_ASSET_PARAMETER = examplePINVOKE.COLLADA_CREATED_ASSET_PARAMETER_get();
  public static readonly string COLLADA_MODIFIED_ASSET_PARAMETER = examplePINVOKE.COLLADA_MODIFIED_ASSET_PARAMETER_get();
  public static readonly string COLLADA_REVISION_ASSET_PARAMETER = examplePINVOKE.COLLADA_REVISION_ASSET_PARAMETER_get();
  public static readonly string COLLADA_SOURCEDATA_ASSET_PARAMETER = examplePINVOKE.COLLADA_SOURCEDATA_ASSET_PARAMETER_get();
  public static readonly string COLLADA_UNITS_ASSET_PARAMETER = examplePINVOKE.COLLADA_UNITS_ASSET_PARAMETER_get();
  public static readonly string COLLADA_UPAXIS_ASSET_PARAMETER = examplePINVOKE.COLLADA_UPAXIS_ASSET_PARAMETER_get();
  public static readonly string COLLADA_SYMBOL_PROPERTY = examplePINVOKE.COLLADA_SYMBOL_PROPERTY_get();
  public static readonly string COLLADA_DOCUMENT_STRUCTURE = examplePINVOKE.COLLADA_DOCUMENT_STRUCTURE_get();
  public static readonly string COLLADA_ASSET_STRUCTURE = examplePINVOKE.COLLADA_ASSET_STRUCTURE_get();
  public static readonly string COLLADA_REVISION_STRUCTURE = examplePINVOKE.COLLADA_REVISION_STRUCTURE_get();
  public static readonly string COLLADA_AUTHORING_TOOL_STRUCTURE = examplePINVOKE.COLLADA_AUTHORING_TOOL_STRUCTURE_get();
  public static readonly string COLLADA_CREATED_STRUCTURE = examplePINVOKE.COLLADA_CREATED_STRUCTURE_get();
  public static readonly string COLLADA_MODIFIED_STRUCTURE = examplePINVOKE.COLLADA_MODIFIED_STRUCTURE_get();
  public static readonly string COLLADA_AUTHOR_STRUCTURE = examplePINVOKE.COLLADA_AUTHOR_STRUCTURE_get();
  public static readonly string COLLADA_TITLE_STRUCTURE = examplePINVOKE.COLLADA_TITLE_STRUCTURE_get();
  public static readonly string COLLADA_SUBJECT_STRUCTURE = examplePINVOKE.COLLADA_SUBJECT_STRUCTURE_get();
  public static readonly string COLLADA_KEYWORDS_STRUCTURE = examplePINVOKE.COLLADA_KEYWORDS_STRUCTURE_get();
  public static readonly string COLLADA_COMMENTS_STRUCTURE = examplePINVOKE.COLLADA_COMMENTS_STRUCTURE_get();
  public static readonly string COLLADA_UNIT_STRUCTURE = examplePINVOKE.COLLADA_UNIT_STRUCTURE_get();
  public static readonly string COLLADA_SOURCE_DATA_STRUCTURE = examplePINVOKE.COLLADA_SOURCE_DATA_STRUCTURE_get();
  public static readonly string COLLADA_UP_AXIS_STRUCTURE = examplePINVOKE.COLLADA_UP_AXIS_STRUCTURE_get();
  public static readonly string COLLADA_LIBRARY_STRUCTURE = examplePINVOKE.COLLADA_LIBRARY_STRUCTURE_get();
  public static readonly string COLLADA_SCENE_STRUCTURE = examplePINVOKE.COLLADA_SCENE_STRUCTURE_get();
  public static readonly string COLLADA_NODE_STRUCTURE = examplePINVOKE.COLLADA_NODE_STRUCTURE_get();
  public static readonly string COLLADA_MATRIX_STRUCTURE = examplePINVOKE.COLLADA_MATRIX_STRUCTURE_get();
  public static readonly string COLLADA_TRANSFORM_STRUCTURE = examplePINVOKE.COLLADA_TRANSFORM_STRUCTURE_get();
  public static readonly string COLLADA_TRANSLATE_STRUCTURE = examplePINVOKE.COLLADA_TRANSLATE_STRUCTURE_get();
  public static readonly string COLLADA_TRANSLATION_STRUCTURE = examplePINVOKE.COLLADA_TRANSLATION_STRUCTURE_get();
  public static readonly string COLLADA_TRANSLATE_ORIGIN = examplePINVOKE.COLLADA_TRANSLATE_ORIGIN_get();
  public static readonly string COLLADA_TRANSLATE_LOCATION = examplePINVOKE.COLLADA_TRANSLATE_LOCATION_get();
  public static readonly string COLLADA_ROTATE_STRUCTURE = examplePINVOKE.COLLADA_ROTATE_STRUCTURE_get();
  public static readonly string COLLADA_SCALE_STRUCTURE = examplePINVOKE.COLLADA_SCALE_STRUCTURE_get();
  public static readonly string COLLADA_SKEW_STRUCTURE = examplePINVOKE.COLLADA_SKEW_STRUCTURE_get();
  public static readonly string COLLADA_ROTATE_X = examplePINVOKE.COLLADA_ROTATE_X_get();
  public static readonly string COLLADA_ROTATE_Y = examplePINVOKE.COLLADA_ROTATE_Y_get();
  public static readonly string COLLADA_ROTATE_Z = examplePINVOKE.COLLADA_ROTATE_Z_get();
  public static readonly string COLLADA_ROT_X = examplePINVOKE.COLLADA_ROT_X_get();
  public static readonly string COLLADA_ROT_Y = examplePINVOKE.COLLADA_ROT_Y_get();
  public static readonly string COLLADA_ROT_Z = examplePINVOKE.COLLADA_ROT_Z_get();
  public static readonly string COLLADA_ROTATION_X = examplePINVOKE.COLLADA_ROTATION_X_get();
  public static readonly string COLLADA_ROTATION_Y = examplePINVOKE.COLLADA_ROTATION_Y_get();
  public static readonly string COLLADA_ROTATION_Z = examplePINVOKE.COLLADA_ROTATION_Z_get();
  public static readonly string COLLADA_ROTATIONX = examplePINVOKE.COLLADA_ROTATIONX_get();
  public static readonly string COLLADA_ROTATIONY = examplePINVOKE.COLLADA_ROTATIONY_get();
  public static readonly string COLLADA_ROTATIONZ = examplePINVOKE.COLLADA_ROTATIONZ_get();
  public static readonly string COLLADA_ROTATE_PIVOT = examplePINVOKE.COLLADA_ROTATE_PIVOT_get();
  public static readonly string COLLADA_SCALE_PIVOT = examplePINVOKE.COLLADA_SCALE_PIVOT_get();
  public static readonly string COLLADA_ROTATE_PIVOT_INVERSE = examplePINVOKE.COLLADA_ROTATE_PIVOT_INVERSE_get();
  public static readonly string COLLADA_SCALE_PIVOT_INVERSE = examplePINVOKE.COLLADA_SCALE_PIVOT_INVERSE_get();
  public static readonly string COLLADA_ROTATE_PIVOT_OFFSET = examplePINVOKE.COLLADA_ROTATE_PIVOT_OFFSET_get();
  public static readonly string COLLADA_SCALE_PIVOT_OFFSET = examplePINVOKE.COLLADA_SCALE_PIVOT_OFFSET_get();
  public static readonly string COLLADA_PRE_ROTATION_X = examplePINVOKE.COLLADA_PRE_ROTATION_X_get();
  public static readonly string COLLADA_PRE_ROTATION_Y = examplePINVOKE.COLLADA_PRE_ROTATION_Y_get();
  public static readonly string COLLADA_PRE_ROTATION_Z = examplePINVOKE.COLLADA_PRE_ROTATION_Z_get();
  public static readonly string COLLADA_POST_ROTATION_X = examplePINVOKE.COLLADA_POST_ROTATION_X_get();
  public static readonly string COLLADA_POST_ROTATION_Y = examplePINVOKE.COLLADA_POST_ROTATION_Y_get();
  public static readonly string COLLADA_POST_ROTATION_Z = examplePINVOKE.COLLADA_POST_ROTATION_Z_get();
  public static readonly string COLLADA_ROTATE_AXIS_X = examplePINVOKE.COLLADA_ROTATE_AXIS_X_get();
  public static readonly string COLLADA_ROTATE_AXIS_Y = examplePINVOKE.COLLADA_ROTATE_AXIS_Y_get();
  public static readonly string COLLADA_ROTATE_AXIS_Z = examplePINVOKE.COLLADA_ROTATE_AXIS_Z_get();
  public static readonly string COLLADA_LOOKAT_STRUCTURE = examplePINVOKE.COLLADA_LOOKAT_STRUCTURE_get();
  public static readonly string COLLADA_PERSPECTIVE_STRUCTURE = examplePINVOKE.COLLADA_PERSPECTIVE_STRUCTURE_get();
  public static readonly string COLLADA_GEOMETRY_STRUCTURE = examplePINVOKE.COLLADA_GEOMETRY_STRUCTURE_get();
  public static readonly string COLLADA_MESH_STRUCTURE = examplePINVOKE.COLLADA_MESH_STRUCTURE_get();
  public static readonly string COLLADA_VERTICES_STRUCTURE = examplePINVOKE.COLLADA_VERTICES_STRUCTURE_get();
  public static readonly string COLLADA_POLYGONS_STRUCTURE = examplePINVOKE.COLLADA_POLYGONS_STRUCTURE_get();
  public static readonly string COLLADA_POLYLIST_STRUCTURE = examplePINVOKE.COLLADA_POLYLIST_STRUCTURE_get();
  public static readonly string COLLADA_TRIANGLES_STRUCTURE = examplePINVOKE.COLLADA_TRIANGLES_STRUCTURE_get();
  public static readonly string COLLADA_P_STRUCTURE = examplePINVOKE.COLLADA_P_STRUCTURE_get();
  public static readonly string COLLADA_ANIMATION_STRUCTURE = examplePINVOKE.COLLADA_ANIMATION_STRUCTURE_get();
  public static readonly string COLLADA_CONTROLLER_STRUCTURE = examplePINVOKE.COLLADA_CONTROLLER_STRUCTURE_get();
  public static readonly string COLLADA_SKIN_STRUCTURE = examplePINVOKE.COLLADA_SKIN_STRUCTURE_get();
  public static readonly string COLLADA_COMBINER_STRUCTURE = examplePINVOKE.COLLADA_COMBINER_STRUCTURE_get();
  public static readonly string COLLADA_JOINTS_STRUCTURE = examplePINVOKE.COLLADA_JOINTS_STRUCTURE_get();
  public static readonly string COLLADA_VALUE_STRUCTURE = examplePINVOKE.COLLADA_VALUE_STRUCTURE_get();
  public static readonly string COLLADA_MATERIAL_STRUCTURE = examplePINVOKE.COLLADA_MATERIAL_STRUCTURE_get();
  public static readonly string COLLADA_SHADER_STRUCTURE = examplePINVOKE.COLLADA_SHADER_STRUCTURE_get();
  public static readonly string COLLADA_PASS_STRUCTURE = examplePINVOKE.COLLADA_PASS_STRUCTURE_get();
  public static readonly string COLLADA_PROGRAM_STRUCTURE = examplePINVOKE.COLLADA_PROGRAM_STRUCTURE_get();
  public static readonly string COLLADA_TEXTURE_STRUCTURE = examplePINVOKE.COLLADA_TEXTURE_STRUCTURE_get();
  public static readonly string COLLADA_IMAGE_STRUCTURE = examplePINVOKE.COLLADA_IMAGE_STRUCTURE_get();
  public static readonly string COLLADA_INPUT_STRUCTURE = examplePINVOKE.COLLADA_INPUT_STRUCTURE_get();
  public static readonly string COLLADA_TECHNIQUE_STRUCTURE = examplePINVOKE.COLLADA_TECHNIQUE_STRUCTURE_get();
  public static readonly string COLLADA_SOURCE_STRUCTURE = examplePINVOKE.COLLADA_SOURCE_STRUCTURE_get();
  public static readonly string COLLADA_ACCESSOR_STRUCTURE = examplePINVOKE.COLLADA_ACCESSOR_STRUCTURE_get();
  public static readonly string COLLADA_EXTRA_STRUCTURE = examplePINVOKE.COLLADA_EXTRA_STRUCTURE_get();
  public static readonly string COLLADA_BOUNDINGBOX_STRUCTURE = examplePINVOKE.COLLADA_BOUNDINGBOX_STRUCTURE_get();
  public static readonly string COLLADA_MIN_STRUCTURE = examplePINVOKE.COLLADA_MIN_STRUCTURE_get();
  public static readonly string COLLADA_MAX_STRUCTURE = examplePINVOKE.COLLADA_MAX_STRUCTURE_get();
  public static readonly string COLLADA_ARRAY_STRUCTURE = examplePINVOKE.COLLADA_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_FLOAT_ARRAY_STRUCTURE = examplePINVOKE.COLLADA_FLOAT_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_INT_ARRAY_STRUCTURE = examplePINVOKE.COLLADA_INT_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_NAME_ARRAY_STRUCTURE = examplePINVOKE.COLLADA_NAME_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_IDREF_ARRAY_STRUCTURE = examplePINVOKE.COLLADA_IDREF_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_BOOL_ARRAY_STRUCTURE = examplePINVOKE.COLLADA_BOOL_ARRAY_STRUCTURE_get();
  public static readonly string COLLADA_SAMPLER_STRUCTURE = examplePINVOKE.COLLADA_SAMPLER_STRUCTURE_get();
  public static readonly string COLLADA_CHANNEL_STRUCTURE = examplePINVOKE.COLLADA_CHANNEL_STRUCTURE_get();
  public static readonly string COLLADA_CAMERA_STRUCTURE = examplePINVOKE.COLLADA_CAMERA_STRUCTURE_get();
  public static readonly string COLLADA_LIGHT_STRUCTURE = examplePINVOKE.COLLADA_LIGHT_STRUCTURE_get();
  public static readonly string COLLADA_OPTICS_STRUCTURE = examplePINVOKE.COLLADA_OPTICS_STRUCTURE_get();
  public static readonly string COLLADA_PARAMETER_STRUCTURE = examplePINVOKE.COLLADA_PARAMETER_STRUCTURE_get();
  public static readonly string COLLADA_TYPE_PROPERTY = examplePINVOKE.COLLADA_TYPE_PROPERTY_get();
  public static readonly string COLLADA_ID_PROPERTY = examplePINVOKE.COLLADA_ID_PROPERTY_get();
  public static readonly string COLLADA_SUBID_PROPERTY = examplePINVOKE.COLLADA_SUBID_PROPERTY_get();
  public static readonly string COLLADA_NAME_PROPERTY = examplePINVOKE.COLLADA_NAME_PROPERTY_get();
  public static readonly string COLLADA_LAYER_PROPERTY = examplePINVOKE.COLLADA_LAYER_PROPERTY_get();
  public static readonly string COLLADA_COUNT_PROPERTY = examplePINVOKE.COLLADA_COUNT_PROPERTY_get();
  public static readonly string COLLADA_STRIDE_PROPERTY = examplePINVOKE.COLLADA_STRIDE_PROPERTY_get();
  public static readonly string COLLADA_URL_PROPERTY = examplePINVOKE.COLLADA_URL_PROPERTY_get();
  public static readonly string COLLADA_SEMANTIC_PROPERTY = examplePINVOKE.COLLADA_SEMANTIC_PROPERTY_get();
  public static readonly string COLLADA_SOURCE_PROPERTY = examplePINVOKE.COLLADA_SOURCE_PROPERTY_get();
  public static readonly string COLLADA_TARGET_PROPERTY = examplePINVOKE.COLLADA_TARGET_PROPERTY_get();
  public static readonly string COLLADA_PROFILE_PROPERTY = examplePINVOKE.COLLADA_PROFILE_PROPERTY_get();
  public static readonly string COLLADA_MATERIAL_PROPERTY = examplePINVOKE.COLLADA_MATERIAL_PROPERTY_get();
  public static readonly string COLLADA_METER_PROPERTY = examplePINVOKE.COLLADA_METER_PROPERTY_get();
  public static readonly string COLLADA_IDX_PROPERTY = examplePINVOKE.COLLADA_IDX_PROPERTY_get();
  public static readonly string COLLADA_SET_PROPERTY = examplePINVOKE.COLLADA_SET_PROPERTY_get();
  public static readonly string COLLADA_OFFSET_PROPERTY = examplePINVOKE.COLLADA_OFFSET_PROPERTY_get();
  public static readonly string COLLADA_FLOW_PROPERTY = examplePINVOKE.COLLADA_FLOW_PROPERTY_get();
  public static readonly string COLLADA_FORMAT_PROPERTY = examplePINVOKE.COLLADA_FORMAT_PROPERTY_get();
  public static readonly string COLLADA_HEIGHT_PROPERTY = examplePINVOKE.COLLADA_HEIGHT_PROPERTY_get();
  public static readonly string COLLADA_WIDTH_PROPERTY = examplePINVOKE.COLLADA_WIDTH_PROPERTY_get();
  public static readonly string COLLADA_DEPTH_PROPERTY = examplePINVOKE.COLLADA_DEPTH_PROPERTY_get();
  public static readonly string COLLADA_REF_PROPERTY = examplePINVOKE.COLLADA_REF_PROPERTY_get();
  public static readonly string COLLADA_GEOMETRY_LIBRARY_TYPE = examplePINVOKE.COLLADA_GEOMETRY_LIBRARY_TYPE_get();
  public static readonly string COLLADA_CONTROLLER_LIBRARY_TYPE = examplePINVOKE.COLLADA_CONTROLLER_LIBRARY_TYPE_get();
  public static readonly string COLLADA_ANIMATION_LIBRARY_TYPE = examplePINVOKE.COLLADA_ANIMATION_LIBRARY_TYPE_get();
  public static readonly string COLLADA_MATERIAL_LIBRARY_TYPE = examplePINVOKE.COLLADA_MATERIAL_LIBRARY_TYPE_get();
  public static readonly string COLLADA_TEXTURE_LIBRARY_TYPE = examplePINVOKE.COLLADA_TEXTURE_LIBRARY_TYPE_get();
  public static readonly string COLLADA_IMAGE_LIBRARY_TYPE = examplePINVOKE.COLLADA_IMAGE_LIBRARY_TYPE_get();
  public static readonly string COLLADA_LIGHT_LIBRARY_TYPE = examplePINVOKE.COLLADA_LIGHT_LIBRARY_TYPE_get();
  public static readonly string COLLADA_CAMERA_LIBRARY_TYPE = examplePINVOKE.COLLADA_CAMERA_LIBRARY_TYPE_get();
  public static readonly string COLLADA_LAMBERT_SHADER_TYPE = examplePINVOKE.COLLADA_LAMBERT_SHADER_TYPE_get();
  public static readonly string COLLADA_PHONG_SHADER_TYPE = examplePINVOKE.COLLADA_PHONG_SHADER_TYPE_get();
  public static readonly string COLLADA_CONSTANT_SHADER_TYPE = examplePINVOKE.COLLADA_CONSTANT_SHADER_TYPE_get();
  public static readonly string COLLADA_NAME_TYPE = examplePINVOKE.COLLADA_NAME_TYPE_get();
  public static readonly string COLLADA_IDREF_TYPE = examplePINVOKE.COLLADA_IDREF_TYPE_get();
  public static readonly string COLLADA_FLOAT_TYPE = examplePINVOKE.COLLADA_FLOAT_TYPE_get();
  public static readonly string COLLADA_BOOL_TYPE = examplePINVOKE.COLLADA_BOOL_TYPE_get();
  public static readonly string COLLADA_INT_TYPE = examplePINVOKE.COLLADA_INT_TYPE_get();
  public static readonly string COLLADA_FLOAT3_TYPE = examplePINVOKE.COLLADA_FLOAT3_TYPE_get();
  public static readonly string COLLADA_FLOAT4_TYPE = examplePINVOKE.COLLADA_FLOAT4_TYPE_get();
  public static readonly string COLLADA_FUNCTION_TYPE = examplePINVOKE.COLLADA_FUNCTION_TYPE_get();
  public static readonly string COLLADA_MATRIX_TYPE = examplePINVOKE.COLLADA_MATRIX_TYPE_get();
  public static readonly string COLLADA_STRING_TYPE = examplePINVOKE.COLLADA_STRING_TYPE_get();
  public static readonly string COLLADA_JOINT_NODE_TYPE = examplePINVOKE.COLLADA_JOINT_NODE_TYPE_get();
  public static readonly string COLLADA_NODE_NODE_TYPE = examplePINVOKE.COLLADA_NODE_NODE_TYPE_get();
  public static readonly string COLLADA_TEXTURE_SEMANTIC = examplePINVOKE.COLLADA_TEXTURE_SEMANTIC_get();
  public static readonly string COLLADA_IMAGE_SEMANTIC = examplePINVOKE.COLLADA_IMAGE_SEMANTIC_get();
  public static readonly string COLLADA_INPUT_SEMANTIC = examplePINVOKE.COLLADA_INPUT_SEMANTIC_get();
  public static readonly string COLLADA_OUTPUT_SEMANTIC = examplePINVOKE.COLLADA_OUTPUT_SEMANTIC_get();
  public static readonly string COLLADA_IN_TANGENT_SEMANTIC = examplePINVOKE.COLLADA_IN_TANGENT_SEMANTIC_get();
  public static readonly string COLLADA_OUT_TANGENT_SEMANTIC = examplePINVOKE.COLLADA_OUT_TANGENT_SEMANTIC_get();
  public static readonly string COLLADA_INTERPOLATION_SEMANTIC = examplePINVOKE.COLLADA_INTERPOLATION_SEMANTIC_get();
  public static readonly string COLLADA_JOINT_SEMANTIC = examplePINVOKE.COLLADA_JOINT_SEMANTIC_get();
  public static readonly string COLLADA_BIND_POSITION_SEMANTIC = examplePINVOKE.COLLADA_BIND_POSITION_SEMANTIC_get();
  public static readonly string COLLADA_BIND_NORMAL_SEMANTIC = examplePINVOKE.COLLADA_BIND_NORMAL_SEMANTIC_get();
  public static readonly string COLLADA_JOINT_AND_WEIGHT_SEMANTIC = examplePINVOKE.COLLADA_JOINT_AND_WEIGHT_SEMANTIC_get();
  public static readonly string COLLADA_BIND_MATRIX_SEMANTIC = examplePINVOKE.COLLADA_BIND_MATRIX_SEMANTIC_get();
  public static readonly string COLLADA_JOINT_PARAMETER = examplePINVOKE.COLLADA_JOINT_PARAMETER_get();
  public static readonly string COLLADA_WEIGHT_PARAMETER = examplePINVOKE.COLLADA_WEIGHT_PARAMETER_get();
  public static readonly string COLLADA_MORPH_TARGET_SEMANTIC = examplePINVOKE.COLLADA_MORPH_TARGET_SEMANTIC_get();
  public static readonly string COLLADA_MORPH_WEIGHT_SEMANTIC = examplePINVOKE.COLLADA_MORPH_WEIGHT_SEMANTIC_get();
  public static readonly string COLLADA_GENERIC_TECHNIQUE = examplePINVOKE.COLLADA_GENERIC_TECHNIQUE_get();
  public static readonly string COLLADA_TIME_TARGET = examplePINVOKE.COLLADA_TIME_TARGET_get();
  public static readonly string COLLADA_VERTEX_INPUT = examplePINVOKE.COLLADA_VERTEX_INPUT_get();
  public static readonly string COLLADA_POSITION_INPUT = examplePINVOKE.COLLADA_POSITION_INPUT_get();
  public static readonly string COLLADA_NORMAL_INPUT = examplePINVOKE.COLLADA_NORMAL_INPUT_get();
  public static readonly string COLLADA_COLOR_INPUT = examplePINVOKE.COLLADA_COLOR_INPUT_get();
  public static readonly string COLLADA_MAPPING_INPUT = examplePINVOKE.COLLADA_MAPPING_INPUT_get();
  public static readonly string COLLADA_TEXCOORD_INPUT = examplePINVOKE.COLLADA_TEXCOORD_INPUT_get();
  public static readonly string COLLADA_TEXTANGENT_INPUT = examplePINVOKE.COLLADA_TEXTANGENT_INPUT_get();
  public static readonly string COLLADA_TEXBINORMAL_INPUT = examplePINVOKE.COLLADA_TEXBINORMAL_INPUT_get();
  public static readonly string COLLADA_LIGHT_INTENSITY_PARAMETER_14 = examplePINVOKE.COLLADA_LIGHT_INTENSITY_PARAMETER_14_get();
  public static readonly string COLLADA_LIGHT_PENUMBRA_ANGLE_PARAMETER_14 = examplePINVOKE.COLLADA_LIGHT_PENUMBRA_ANGLE_PARAMETER_14_get();
  public static readonly string COLLADA_LIGHT_DROPOFF_PARAMETER = examplePINVOKE.COLLADA_LIGHT_DROPOFF_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_YFOV_PARAMETER = examplePINVOKE.COLLADA_CAMERA_YFOV_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ZNEAR_PARAMETER = examplePINVOKE.COLLADA_CAMERA_ZNEAR_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ZFAR_PARAMETER = examplePINVOKE.COLLADA_CAMERA_ZFAR_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_BOTTOM_PARAMETER = examplePINVOKE.COLLADA_CAMERA_ORTHO_BOTTOM_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_TOP_PARAMETER = examplePINVOKE.COLLADA_CAMERA_ORTHO_TOP_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_LEFT_PARAMETER = examplePINVOKE.COLLADA_CAMERA_ORTHO_LEFT_PARAMETER_get();
  public static readonly string COLLADA_CAMERA_ORTHO_RIGHT_PARAMETER = examplePINVOKE.COLLADA_CAMERA_ORTHO_RIGHT_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_WRAPU_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_WRAPU_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_WRAPV_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_WRAPV_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_MIRRORU_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_MIRRORU_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_MIRRORV_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_MIRRORV_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_BLEND_MODE_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_BLEND_MODE_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_BLEND_MODE_PARAMETER_14 = examplePINVOKE.COLLADA_TEXTURE_BLEND_MODE_PARAMETER_14_get();
  public static readonly string COLLADA_TEXTURE_REPEATU_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_REPEATU_PARAMETER_get();
  public static readonly string COLLADA_TEXTURE_REPEATV_PARAMETER = examplePINVOKE.COLLADA_TEXTURE_REPEATV_PARAMETER_get();
  public static readonly string COLLADA_CONSTANT_FUNCTION = examplePINVOKE.COLLADA_CONSTANT_FUNCTION_get();
  public static readonly string COLLADA_LINEAR_FUNCTION = examplePINVOKE.COLLADA_LINEAR_FUNCTION_get();
  public static readonly string COLLADA_QUADRATIC_FUNCTION = examplePINVOKE.COLLADA_QUADRATIC_FUNCTION_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_LINEAR = examplePINVOKE.COLLADA_INTERPOLATION_TYPE_LINEAR_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_BEZIER = examplePINVOKE.COLLADA_INTERPOLATION_TYPE_BEZIER_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_CARDINAL = examplePINVOKE.COLLADA_INTERPOLATION_TYPE_CARDINAL_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_HERMITE = examplePINVOKE.COLLADA_INTERPOLATION_TYPE_HERMITE_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_BSPLINE = examplePINVOKE.COLLADA_INTERPOLATION_TYPE_BSPLINE_get();
  public static readonly string COLLADA_INTERPOLATION_TYPE_STEP = examplePINVOKE.COLLADA_INTERPOLATION_TYPE_STEP_get();
  public static readonly string COLLADA_X_UP = examplePINVOKE.COLLADA_X_UP_get();
  public static readonly string COLLADA_Y_UP = examplePINVOKE.COLLADA_Y_UP_get();
  public static readonly string COLLADA_Z_UP = examplePINVOKE.COLLADA_Z_UP_get();
  public static readonly string COLLADA_IN_FLOW = examplePINVOKE.COLLADA_IN_FLOW_get();
  public static readonly string COLLADA_OUT_FLOW = examplePINVOKE.COLLADA_OUT_FLOW_get();
  public static readonly string COLLADA_INOUT_FLOW = examplePINVOKE.COLLADA_INOUT_FLOW_get();
  public static readonly string COLLADA_RGB_TYPE = examplePINVOKE.COLLADA_RGB_TYPE_get();
  public static readonly string COLLADA_RGBA_TYPE = examplePINVOKE.COLLADA_RGBA_TYPE_get();
  public static readonly string COLLADA_RGB_INPUT = examplePINVOKE.COLLADA_RGB_INPUT_get();
  public static readonly string COLLADA_RGBA_INPUT = examplePINVOKE.COLLADA_RGBA_INPUT_get();
  public static readonly string COLLADA_PHYSICS_LIBRARY_TYPE = examplePINVOKE.COLLADA_PHYSICS_LIBRARY_TYPE_get();
  public static readonly string COLLADA_SHAPE_STRUCTURE = examplePINVOKE.COLLADA_SHAPE_STRUCTURE_get();
  public static readonly string COLLADA_RIGID_BODY_STRUCTURE = examplePINVOKE.COLLADA_RIGID_BODY_STRUCTURE_get();
  public static readonly string COLLADA_DYNAMIC_STRUCTURE = examplePINVOKE.COLLADA_DYNAMIC_STRUCTURE_get();
  public static readonly string COLLADA_MASS_STRUCTURE = examplePINVOKE.COLLADA_MASS_STRUCTURE_get();
  public static readonly string COLLADA_PHYSICS_MATERIAL_STRUCTURE = examplePINVOKE.COLLADA_PHYSICS_MATERIAL_STRUCTURE_get();
  public static readonly string COLLADA_STATIC_FRICTION_ATTRIBUTE = examplePINVOKE.COLLADA_STATIC_FRICTION_ATTRIBUTE_get();
  public static readonly string COLLADA_DYNAMIC_FRICTION_ATTRIBUTE = examplePINVOKE.COLLADA_DYNAMIC_FRICTION_ATTRIBUTE_get();
  public static readonly string COLLADA_ELASTICITY_ATTRIBUTE = examplePINVOKE.COLLADA_ELASTICITY_ATTRIBUTE_get();
  public static readonly string COLLADA_BOX_STRUCTURE = examplePINVOKE.COLLADA_BOX_STRUCTURE_get();
  public static readonly string COLLADA_SPHERE_STRUCTURE = examplePINVOKE.COLLADA_SPHERE_STRUCTURE_get();
  public static readonly string COLLADA_CAPSULE_STRUCTURE = examplePINVOKE.COLLADA_CAPSULE_STRUCTURE_get();
  public static readonly string COLLADA_CYLINDER_STRUCTURE = examplePINVOKE.COLLADA_CYLINDER_STRUCTURE_get();
  public static readonly string COLLADA_ELLIPSOID_STRUCTURE = examplePINVOKE.COLLADA_ELLIPSOID_STRUCTURE_get();
  public static readonly string COLLADA_SIZE_STRUCTURE = examplePINVOKE.COLLADA_SIZE_STRUCTURE_get();
  public static readonly string COLLADA_RADIUS_STRUCTURE = examplePINVOKE.COLLADA_RADIUS_STRUCTURE_get();
  public static readonly string COLLADA_PHYSICS_ENVIRONMENT_STRUCTURE = examplePINVOKE.COLLADA_PHYSICS_ENVIRONMENT_STRUCTURE_get();
  public static readonly string COLLADA_ENVIRONMENT_ID = examplePINVOKE.COLLADA_ENVIRONMENT_ID_get();
  public static readonly string COLLADA_TIMESTEP_ATTRIBUTE = examplePINVOKE.COLLADA_TIMESTEP_ATTRIBUTE_get();
  public static readonly string COLLADA_GRAVITY_ATTRIBUTE = examplePINVOKE.COLLADA_GRAVITY_ATTRIBUTE_get();
  public static readonly string COLLADA_INITIAL_VELOCITY_STRUCTURE = examplePINVOKE.COLLADA_INITIAL_VELOCITY_STRUCTURE_get();
  public static readonly string COLLADA_INITIAL_ANGULAR_VELOCITY_STRUCTURE = examplePINVOKE.COLLADA_INITIAL_ANGULAR_VELOCITY_STRUCTURE_get();
  public static readonly string COLLADA_CONVEX_MESH_STRUCTURE = examplePINVOKE.COLLADA_CONVEX_MESH_STRUCTURE_get();
  public static readonly string COLLADA_INERTIA_STRUCTURE = examplePINVOKE.COLLADA_INERTIA_STRUCTURE_get();
  public static readonly string COLLADA_DENSITY_STRUCTURE = examplePINVOKE.COLLADA_DENSITY_STRUCTURE_get();
  public static readonly string COLLADA_CENTER_OF_MASS_STRUCTURE = examplePINVOKE.COLLADA_CENTER_OF_MASS_STRUCTURE_get();
  public static readonly string COLLADA_DYNAMICS_STRUCTURE = examplePINVOKE.COLLADA_DYNAMICS_STRUCTURE_get();
  public static readonly string COLLADA_RIGID_CONSTRAINT_STRUCTURE = examplePINVOKE.COLLADA_RIGID_CONSTRAINT_STRUCTURE_get();
  public static readonly string COLLADA_BODY_PROPERTY = examplePINVOKE.COLLADA_BODY_PROPERTY_get();
  public static readonly string COLLADA_ATTACHMENT_STRUCTURE = examplePINVOKE.COLLADA_ATTACHMENT_STRUCTURE_get();
  public static readonly string COLLADA_ROT_LIMIT_MIN_STRUCTURE = examplePINVOKE.COLLADA_ROT_LIMIT_MIN_STRUCTURE_get();
  public static readonly string COLLADA_ROT_LIMIT_MAX_STRUCTURE = examplePINVOKE.COLLADA_ROT_LIMIT_MAX_STRUCTURE_get();
  public static readonly string COLLADA_TRANS_LIMIT_MIN_STRUCTURE = examplePINVOKE.COLLADA_TRANS_LIMIT_MIN_STRUCTURE_get();
  public static readonly string COLLADA_TRANS_LIMIT_MAX_STRUCTURE = examplePINVOKE.COLLADA_TRANS_LIMIT_MAX_STRUCTURE_get();
  public static readonly string COLLADA_ENABLED_STRUCTURE = examplePINVOKE.COLLADA_ENABLED_STRUCTURE_get();
  public static readonly string COLLADA_INTERPENETRATE_STRUCTURE = examplePINVOKE.COLLADA_INTERPENETRATE_STRUCTURE_get();
  public static readonly string COLLADA_SPRING_STRUCTURE = examplePINVOKE.COLLADA_SPRING_STRUCTURE_get();
  public static readonly string COLLADA_STIFFNESS_STRUCTURE = examplePINVOKE.COLLADA_STIFFNESS_STRUCTURE_get();
  public static readonly string COLLADA_DAMPING_STRUCTURE = examplePINVOKE.COLLADA_DAMPING_STRUCTURE_get();
  public static readonly string COLLADA_REST_LENGTH_STRUCTURE = examplePINVOKE.COLLADA_REST_LENGTH_STRUCTURE_get();
  public static readonly string COLLADA_P0_STRUCTURE = examplePINVOKE.COLLADA_P0_STRUCTURE_get();
  public static readonly string COLLADA_P1_STRUCTURE = examplePINVOKE.COLLADA_P1_STRUCTURE_get();
  public static readonly string COLLADA_TRUE_KEYWORD = examplePINVOKE.COLLADA_TRUE_KEYWORD_get();
  public static readonly string COLLADA_FALSE_KEYWORD = examplePINVOKE.COLLADA_FALSE_KEYWORD_get();
  public static readonly string COLLADA_LINES_STRUCTURE = examplePINVOKE.COLLADA_LINES_STRUCTURE_get();
  public static readonly string COLLADA_LINESTRIP_STRUCTURE = examplePINVOKE.COLLADA_LINESTRIP_STRUCTURE_get();
  public static readonly string COLLADA_TRIFANS_STRUCTURE = examplePINVOKE.COLLADA_TRIFANS_STRUCTURE_get();
  public static readonly string COLLADA_TRISTRIPS_STRUCTURE = examplePINVOKE.COLLADA_TRISTRIPS_STRUCTURE_get();
  public static readonly string COLLADA_MAYA_PROFILE = examplePINVOKE.COLLADA_MAYA_PROFILE_get();
  public static readonly string COLLADA_MAYA_LAYER_ELEMENT = examplePINVOKE.COLLADA_MAYA_LAYER_ELEMENT_get();
  public static readonly string COLLADA_MAX3D_PROFILE = examplePINVOKE.COLLADA_MAX3D_PROFILE_get();
  public static readonly string COLLADA_MAX3D_FRAMERATE_ELEMENT = examplePINVOKE.COLLADA_MAX3D_FRAMERATE_ELEMENT_get();
  public static readonly string COLLADA_FCOLLADA_PROFILE = examplePINVOKE.COLLADA_FCOLLADA_PROFILE_get();
  public static readonly string COLLADA_FCOLLADA_STARTTIME_ELEMENT = examplePINVOKE.COLLADA_FCOLLADA_STARTTIME_ELEMENT_get();
  public static readonly string COLLADA_FCOLLADA_ENDTIME_ELEMENT = examplePINVOKE.COLLADA_FCOLLADA_ENDTIME_ELEMENT_get();
  public static readonly string COLLADA_FCOLLADA_VISIBILITY_ELEMENT = examplePINVOKE.COLLADA_FCOLLADA_VISIBILITY_ELEMENT_get();
  public static readonly string COLLADA_XSI_PROFILE = examplePINVOKE.COLLADA_XSI_PROFILE_get();
  public static readonly string COLLADA_XSI_VISIBILITY_ELEMENT = examplePINVOKE.COLLADA_XSI_VISIBILITY_ELEMENT_get();
  public static readonly string COLLADA_FBX_PROFILE = examplePINVOKE.COLLADA_FBX_PROFILE_get();
  public static readonly string COLLADA_FBX_TARGET_ELEMENT = examplePINVOKE.COLLADA_FBX_TARGET_ELEMENT_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_PROFILE = examplePINVOKE.COLLADA_NVIDIA_FXCOMPOSER_PROFILE_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_IMPORT_ELEMENT = examplePINVOKE.COLLADA_NVIDIA_FXCOMPOSER_IMPORT_ELEMENT_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_URL_ATTRIBUTE = examplePINVOKE.COLLADA_NVIDIA_FXCOMPOSER_URL_ATTRIBUTE_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_COMPILER_OPTIONS_ATTRIBUTE = examplePINVOKE.COLLADA_NVIDIA_FXCOMPOSER_COMPILER_OPTIONS_ATTRIBUTE_get();
  public static readonly string COLLADA_NVIDIA_FXCOMPOSER_PROFILE_ATTRIBUTE = examplePINVOKE.COLLADA_NVIDIA_FXCOMPOSER_PROFILE_ATTRIBUTE_get();
  public static readonly int INT_MAX = examplePINVOKE.INT_MAX_get();
  public static readonly double CENTIMETERS_TO_INCHES = examplePINVOKE.CENTIMETERS_TO_INCHES_get();
  public static readonly double RADIANS_TO_DEGREES = examplePINVOKE.RADIANS_TO_DEGREES_get();
  public static readonly string COLLADA_ID_PROPERTY_NAME = examplePINVOKE.COLLADA_ID_PROPERTY_NAME_get();
  public static readonly int FBX_FILE_VERSION_2000 = examplePINVOKE.FBX_FILE_VERSION_2000_get();
  public static readonly int FBX_FILE_VERSION_2001 = examplePINVOKE.FBX_FILE_VERSION_2001_get();
  public static readonly int FBX_FILE_VERSION_3000 = examplePINVOKE.FBX_FILE_VERSION_3000_get();
  public static readonly int FBX_FILE_VERSION_3001 = examplePINVOKE.FBX_FILE_VERSION_3001_get();
  public static readonly int FBX_FILE_VERSION_4000 = examplePINVOKE.FBX_FILE_VERSION_4000_get();
  public static readonly int FBX_FILE_VERSION_4001 = examplePINVOKE.FBX_FILE_VERSION_4001_get();
  public static readonly int FBX_FILE_VERSION_4050 = examplePINVOKE.FBX_FILE_VERSION_4050_get();
  public static readonly int FBX_FILE_VERSION_5000 = examplePINVOKE.FBX_FILE_VERSION_5000_get();
  public static readonly int FBX_FILE_VERSION_5800 = examplePINVOKE.FBX_FILE_VERSION_5800_get();
  public static readonly int FBX_FILE_VERSION_6000 = examplePINVOKE.FBX_FILE_VERSION_6000_get();
  public static readonly int FBX_FILE_VERSION_6100 = examplePINVOKE.FBX_FILE_VERSION_6100_get();
  public static readonly int FBX_FILE_VERSION_7000 = examplePINVOKE.FBX_FILE_VERSION_7000_get();
  public static readonly int FBX_FILE_VERSION_7099 = examplePINVOKE.FBX_FILE_VERSION_7099_get();
  public static readonly int FBX_FILE_VERSION_7100 = examplePINVOKE.FBX_FILE_VERSION_7100_get();
  public static readonly int FBX_FILE_VERSION_7200 = examplePINVOKE.FBX_FILE_VERSION_7200_get();
  public static readonly int FBX_FILE_VERSION_7300 = examplePINVOKE.FBX_FILE_VERSION_7300_get();
  public static readonly int FBX_FILE_VERSION_7400 = examplePINVOKE.FBX_FILE_VERSION_7400_get();
  public static readonly int FBX_FILE_VERSION_7500 = examplePINVOKE.FBX_FILE_VERSION_7500_get();
  public static readonly string FBX_53_MB55_COMPATIBLE = examplePINVOKE.FBX_53_MB55_COMPATIBLE_get();
  public static readonly string FBX_60_COMPATIBLE = examplePINVOKE.FBX_60_COMPATIBLE_get();
  public static readonly string FBX_2005_08_COMPATIBLE = examplePINVOKE.FBX_2005_08_COMPATIBLE_get();
  public static readonly string FBX_2006_02_COMPATIBLE = examplePINVOKE.FBX_2006_02_COMPATIBLE_get();
  public static readonly string FBX_2006_08_COMPATIBLE = examplePINVOKE.FBX_2006_08_COMPATIBLE_get();
  public static readonly string FBX_2006_11_COMPATIBLE = examplePINVOKE.FBX_2006_11_COMPATIBLE_get();
  public static readonly string FBX_2009_00_COMPATIBLE = examplePINVOKE.FBX_2009_00_COMPATIBLE_get();
  public static readonly string FBX_2009_00_V7_COMPATIBLE = examplePINVOKE.FBX_2009_00_V7_COMPATIBLE_get();
  public static readonly string FBX_2010_00_COMPATIBLE = examplePINVOKE.FBX_2010_00_COMPATIBLE_get();
  public static readonly string FBX_2011_00_COMPATIBLE = examplePINVOKE.FBX_2011_00_COMPATIBLE_get();
  public static readonly string FBX_2012_00_COMPATIBLE = examplePINVOKE.FBX_2012_00_COMPATIBLE_get();
  public static readonly string FBX_2013_00_COMPATIBLE = examplePINVOKE.FBX_2013_00_COMPATIBLE_get();
  public static readonly string FBX_2014_00_COMPATIBLE = examplePINVOKE.FBX_2014_00_COMPATIBLE_get();
  public static readonly string FBX_2016_00_COMPATIBLE = examplePINVOKE.FBX_2016_00_COMPATIBLE_get();
  public static readonly int FBX_DEFAULT_FILE_VERSION = examplePINVOKE.FBX_DEFAULT_FILE_VERSION_get();
  public static readonly string FBX_DEFAULT_FILE_COMPATIBILITY = examplePINVOKE.FBX_DEFAULT_FILE_COMPATIBILITY_get();
  public static readonly int FBX_NO_SECTION = examplePINVOKE.FBX_NO_SECTION_get();
  public static readonly int FBX_MAIN_SECTION = examplePINVOKE.FBX_MAIN_SECTION_get();
  public static readonly int FBX_EXTENSION_SECTION_0 = examplePINVOKE.FBX_EXTENSION_SECTION_0_get();

  public static readonly string FIELD_SUMMARY = examplePINVOKE.FIELD_SUMMARY_get();
  public static readonly string FIELD_SUMMARY_VERSION = examplePINVOKE.FIELD_SUMMARY_VERSION_get();
  public static readonly string FIELD_SUMMARY_TEMPLATE = examplePINVOKE.FIELD_SUMMARY_TEMPLATE_get();
  public static readonly string FIELD_SUMMARY_PASSWORD_PROTECTION = examplePINVOKE.FIELD_SUMMARY_PASSWORD_PROTECTION_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_MODEL = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_MODEL_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_DEVICE = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_DEVICE_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_CHARACTER = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_CHARACTER_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_ACTOR = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_ACTOR_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_CONSTRAINT = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_CONSTRAINT_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_MEDIA = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_MEDIA_get();
  public static readonly string FIELD_SUMMARY_CONTENT_COUNT_COMPONENT = examplePINVOKE.FIELD_SUMMARY_CONTENT_COUNT_COMPONENT_get();
  public static readonly string FIELD_SUMMARY_TAKES = examplePINVOKE.FIELD_SUMMARY_TAKES_get();
  public static readonly string FIELD_SUMMARY_TAKES_VERSION = examplePINVOKE.FIELD_SUMMARY_TAKES_VERSION_get();
  public static readonly string FIELD_SUMMARY_TAKES_CURRENT = examplePINVOKE.FIELD_SUMMARY_TAKES_CURRENT_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE = examplePINVOKE.FIELD_SUMMARY_TAKES_TAKE_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE_COMMENT = examplePINVOKE.FIELD_SUMMARY_TAKES_TAKE_COMMENT_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE_LOCAL_TIME = examplePINVOKE.FIELD_SUMMARY_TAKES_TAKE_LOCAL_TIME_get();
  public static readonly string FIELD_SUMMARY_TAKES_TAKE_REFERENCE_TIME = examplePINVOKE.FIELD_SUMMARY_TAKES_TAKE_REFERENCE_TIME_get();
  public static readonly string FIELD_KFBXOBJECT_REFERENCE_TO = examplePINVOKE.FIELD_KFBXOBJECT_REFERENCE_TO_get();
  public static readonly string FIELD_KFBXOBJECT_DOCUMENT = examplePINVOKE.FIELD_KFBXOBJECT_DOCUMENT_get();
  public static readonly string FIELD_KFBXOBECT_REFERENCE_TO = examplePINVOKE.FIELD_KFBXOBECT_REFERENCE_TO_get();
  public static readonly string FIELD_KFBXCONTAINER_VERSION = examplePINVOKE.FIELD_KFBXCONTAINER_VERSION_get();
  public static readonly string FIELD_KFBXCONTAINER_CONTAINER = examplePINVOKE.FIELD_KFBXCONTAINER_CONTAINER_get();
  public static readonly string FIELD_THUMBNAIL = examplePINVOKE.FIELD_THUMBNAIL_get();
  public static readonly string FIELD_THUMBNAIL_VERSION = examplePINVOKE.FIELD_THUMBNAIL_VERSION_get();
  public static readonly string FIELD_THUMBNAIL_SIZE = examplePINVOKE.FIELD_THUMBNAIL_SIZE_get();
  public static readonly string FIELD_THUMBNAIL_FORMAT = examplePINVOKE.FIELD_THUMBNAIL_FORMAT_get();
  public static readonly string FIELD_THUMBNAIL_ENCODING = examplePINVOKE.FIELD_THUMBNAIL_ENCODING_get();
  public static readonly string FIELD_THUMBNAIL_IMAGE = examplePINVOKE.FIELD_THUMBNAIL_IMAGE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_VERSION = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_VERSION_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWPLANES = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWPLANES_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_COUNT = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_COUNT_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_PLANE = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_PLANE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_USESHADOW = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_USESHADOW_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWINTENSITY = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_SHADOWINTENSITY_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTRENDER = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTRENDER_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTLIGHTCOLOR = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_AMBIENTLIGHTCOLOR_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGOPTIONS = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGOPTIONS_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGENABLE = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGENABLE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGMODE = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGMODE_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGDENSITY = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGDENSITY_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGSTART = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGSTART_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGEND = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGEND_get();
  public static readonly string FIELD_KFBXGLOBALLIGHTSETTINGS_FOGCOLOR = examplePINVOKE.FIELD_KFBXGLOBALLIGHTSETTINGS_FOGCOLOR_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_RENDERER_SETTINGS = examplePINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_RENDERER_SETTINGS_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_CAMERA = examplePINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_CAMERA_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_VIEWING_MODE = examplePINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_DEFAULT_VIEWING_MODE_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_SETTINGS = examplePINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_SETTINGS_get();
  public static readonly string FIELD_KFBXGLOBALCAMERASETTINGS_CAMERA = examplePINVOKE.FIELD_KFBXGLOBALCAMERASETTINGS_CAMERA_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIME_MODE = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIME_MODE_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_FRAMERATE = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_FRAMERATE_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIME_PROTOCOL = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIME_PROTOCOL_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_SNAP_ON_FRAMES = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_SNAP_ON_FRAMES_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_INDEX = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_INDEX_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_MARKER = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_MARKER_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_TIME_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_LOOP = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_REFERENCE_LOOP_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_START_TIME = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_START_TIME_get();
  public static readonly string FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_STOP_TIME = examplePINVOKE.FIELD_KFBXGLOBALTIMESETTINGS_TIMELINE_STOP_TIME_get();
  public static readonly string FIELD_MEDIA_MEDIA = examplePINVOKE.FIELD_MEDIA_MEDIA_get();
  public static readonly string FIELD_MEDIA_VIDEO = examplePINVOKE.FIELD_MEDIA_VIDEO_get();
  public static readonly string FIELD_MEDIA_TYPE = examplePINVOKE.FIELD_MEDIA_TYPE_get();
  public static readonly string TOKEN_MEDIA_CLIP = examplePINVOKE.TOKEN_MEDIA_CLIP_get();
  public static readonly string FIELD_MEDIA_VERSION = examplePINVOKE.FIELD_MEDIA_VERSION_get();
  public static readonly string FIELD_MEDIA_ORIGINAL_FORMAT = examplePINVOKE.FIELD_MEDIA_ORIGINAL_FORMAT_get();
  public static readonly string FIELD_MEDIA_ORIGINAL_FILENAME = examplePINVOKE.FIELD_MEDIA_ORIGINAL_FILENAME_get();
  public static readonly string FIELD_MEDIA_FILENAME = examplePINVOKE.FIELD_MEDIA_FILENAME_get();
  public static readonly string FIELD_MEDIA_RELATIVE_FILENAME = examplePINVOKE.FIELD_MEDIA_RELATIVE_FILENAME_get();
  public static readonly string FIELD_MEDIA_CONTENT = examplePINVOKE.FIELD_MEDIA_CONTENT_get();
  public static readonly string FIELD_PROPERTIES = examplePINVOKE.FIELD_PROPERTIES_get();
  public static readonly string FIELD_PROPERTIES_VERSION = examplePINVOKE.FIELD_PROPERTIES_VERSION_get();
  public static readonly string FIELD_USERPROPERTIES = examplePINVOKE.FIELD_USERPROPERTIES_get();
  public static readonly string FIELD_USERPROPERTIES_NAME = examplePINVOKE.FIELD_USERPROPERTIES_NAME_get();
  public static readonly string FIELD_USERPROPERTIES_TYPE = examplePINVOKE.FIELD_USERPROPERTIES_TYPE_get();
  public static readonly string FIELD_USERPROPERTIES_LABEL = examplePINVOKE.FIELD_USERPROPERTIES_LABEL_get();
  public static readonly string FIELD_USERPROPERTIES_MIN = examplePINVOKE.FIELD_USERPROPERTIES_MIN_get();
  public static readonly string FIELD_USERPROPERTIES_MAX = examplePINVOKE.FIELD_USERPROPERTIES_MAX_get();
  public static readonly string FIELD_USERPROPERTIES_VALUE = examplePINVOKE.FIELD_USERPROPERTIES_VALUE_get();
  public static readonly string FIELD_KFBXNODE_VERSION = examplePINVOKE.FIELD_KFBXNODE_VERSION_get();
  public static readonly string FIELD_KFBXNODE_ANIMATION_MODE = examplePINVOKE.FIELD_KFBXNODE_ANIMATION_MODE_get();
  public static readonly string FIELD_KFBXNODE_TYPE = examplePINVOKE.FIELD_KFBXNODE_TYPE_get();
  public static readonly string FIELD_KFBXNODE_TYPE_FLAGS = examplePINVOKE.FIELD_KFBXNODE_TYPE_FLAGS_get();
  public static readonly string FIELD_KFBXNODE_MODEL = examplePINVOKE.FIELD_KFBXNODE_MODEL_get();
  public static readonly string FIELD_KFBXNODE_HIDDEN = examplePINVOKE.FIELD_KFBXNODE_HIDDEN_get();
  public static readonly string FIELD_KFBXNODE_SHADING = examplePINVOKE.FIELD_KFBXNODE_SHADING_get();
  public static readonly string FIELD_KFBXNODE_TRANSFORM = examplePINVOKE.FIELD_KFBXNODE_TRANSFORM_get();
  public static readonly string FIELD_KFBXNODE_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_TRANSLATION = examplePINVOKE.FIELD_KFBXNODE_TRANSLATION_get();
  public static readonly string FIELD_KFBXNODE_ROTATION = examplePINVOKE.FIELD_KFBXNODE_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_SCALING = examplePINVOKE.FIELD_KFBXNODE_SCALING_get();
  public static readonly string FIELD_KFBXNODE_CHILDREN = examplePINVOKE.FIELD_KFBXNODE_CHILDREN_get();
  public static readonly string FIELD_KFBXNODE_CULLING_TYPE = examplePINVOKE.FIELD_KFBXNODE_CULLING_TYPE_get();
  public static readonly string TOKEN_KFBXNODE_CULLING_OFF = examplePINVOKE.TOKEN_KFBXNODE_CULLING_OFF_get();
  public static readonly string TOKEN_KFBXNODE_CULLING_ON_CCW = examplePINVOKE.TOKEN_KFBXNODE_CULLING_ON_CCW_get();
  public static readonly string TOKEN_KFBXNODE_CULLING_ON_CW = examplePINVOKE.TOKEN_KFBXNODE_CULLING_ON_CW_get();
  public static readonly string FIELD_KFBXNODE_LIMITS = examplePINVOKE.FIELD_KFBXNODE_LIMITS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_AUTO = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_AUTO_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_AUTO = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_AUTO_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_AUTO = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_AUTO_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_ENABLE = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_ENABLE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_ENABLE = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_ENABLE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_ENABLE = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_ENABLE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_X_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_X_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Y_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_Y_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Z_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_Z_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_X_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_X_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_X_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Y_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_Y_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Z_DEFAULT = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_Z_DEFAULT_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_X_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_X_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Y_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_Y_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Z_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_Z_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_X_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_X_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_X_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Y_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_Y_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Z_MIN = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_Z_MIN_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_X_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_X_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Y_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_Y_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_T_Z_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_T_Z_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_X_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_X_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_X_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Y_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_Y_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_S_Z_MAX = examplePINVOKE.FIELD_KFBXNODE_LIMITS_S_Z_MAX_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_TYPE = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_TYPE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_CLAMP_TYPE = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_CLAMP_TYPE_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_X_AXIS = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_X_AXIS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Y_AXIS = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Y_AXIS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_R_Z_AXIS = examplePINVOKE.FIELD_KFBXNODE_LIMITS_R_Z_AXIS_get();
  public static readonly string FIELD_KFBXNODE_LIMITS_AXIS_LENGTH = examplePINVOKE.FIELD_KFBXNODE_LIMITS_AXIS_LENGTH_get();
  public static readonly string FIELD_KFBXNODE_TARGET = examplePINVOKE.FIELD_KFBXNODE_TARGET_get();
  public static readonly string FIELD_KFBXNODE_UP_VECTOR_MODEL = examplePINVOKE.FIELD_KFBXNODE_UP_VECTOR_MODEL_get();
  public static readonly string FIELD_KFBXNODE_POST_TARGET_ROTATION = examplePINVOKE.FIELD_KFBXNODE_POST_TARGET_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_TARGET_UP_VECTOR = examplePINVOKE.FIELD_KFBXNODE_TARGET_UP_VECTOR_get();
  public static readonly string FIELD_KFBXNODE_PIVOTS = examplePINVOKE.FIELD_KFBXNODE_PIVOTS_get();
  public static readonly string FIELD_KFBXNODE_PACKAGE = examplePINVOKE.FIELD_KFBXNODE_PACKAGE_get();
  public static readonly string FIELD_KFBXNODE_FILE = examplePINVOKE.FIELD_KFBXNODE_FILE_get();
  public static readonly string FIELD_KFBXNODE_TRANSLATION_OFFSET = examplePINVOKE.FIELD_KFBXNODE_TRANSLATION_OFFSET_get();
  public static readonly string FIELD_KFBXNODE_ROTATION_PIVOT = examplePINVOKE.FIELD_KFBXNODE_ROTATION_PIVOT_get();
  public static readonly string FIELD_KFBXNODE_PRE_ROTATION = examplePINVOKE.FIELD_KFBXNODE_PRE_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_POST_ROTATION = examplePINVOKE.FIELD_KFBXNODE_POST_ROTATION_get();
  public static readonly string FIELD_KFBXNODE_SCALING_PIVOT = examplePINVOKE.FIELD_KFBXNODE_SCALING_PIVOT_get();
  public static readonly string FIELD_KFBXNODE_PIVOT_ENABLED = examplePINVOKE.FIELD_KFBXNODE_PIVOT_ENABLED_get();
  public static readonly string FIELD_KFBXGENERICNODE_VERSION = examplePINVOKE.FIELD_KFBXGENERICNODE_VERSION_get();
  public static readonly string FIELD_KFBXGENERICNODE_GENERICNODE = examplePINVOKE.FIELD_KFBXGENERICNODE_GENERICNODE_get();
  public static readonly string FIELD_KFBXGEOMETRY_MATERIAL = examplePINVOKE.FIELD_KFBXGEOMETRY_MATERIAL_get();
  public static readonly string FIELD_KFBXGEOMETRY_TEXTURE = examplePINVOKE.FIELD_KFBXGEOMETRY_TEXTURE_get();
  public static readonly string FIELD_KFBXGEOMETRY_LINK = examplePINVOKE.FIELD_KFBXGEOMETRY_LINK_get();
  public static readonly string FIELD_KFBXGEOMETRY_SHAPE = examplePINVOKE.FIELD_KFBXGEOMETRY_SHAPE_get();
  public static readonly string FIELD_KFBXMARKER_LOOK = examplePINVOKE.FIELD_KFBXMARKER_LOOK_get();
  public static readonly string FIELD_KFBXMARKER_SIZE = examplePINVOKE.FIELD_KFBXMARKER_SIZE_get();
  public static readonly string FIELD_KFBXMARKER_COLOR = examplePINVOKE.FIELD_KFBXMARKER_COLOR_get();
  public static readonly string FIELD_KFBXMARKER_SHOW_LABEL = examplePINVOKE.FIELD_KFBXMARKER_SHOW_LABEL_get();
  public static readonly string FIELD_KFBXMARKER_IK_PIVOT = examplePINVOKE.FIELD_KFBXMARKER_IK_PIVOT_get();
  public static readonly string FIELD_KFBXMARKER_IK_REACH_TRANSLATION = examplePINVOKE.FIELD_KFBXMARKER_IK_REACH_TRANSLATION_get();
  public static readonly string FIELD_KFBXMARKER_IK_REACH_ROTATION = examplePINVOKE.FIELD_KFBXMARKER_IK_REACH_ROTATION_get();
  public static readonly string FIELD_KFBXMARKER_IK_PULL = examplePINVOKE.FIELD_KFBXMARKER_IK_PULL_get();
  public static readonly string FIELD_KFBXMARKER_IK_PULL_HIPS = examplePINVOKE.FIELD_KFBXMARKER_IK_PULL_HIPS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_GEOMETRY_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_POSITION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_POSITION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_UP_VECTOR = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_UP_VECTOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_DEFAULT_CAMERA_INTEREST_POSITION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_DEFAULT_CAMERA_INTEREST_POSITION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ROLL = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ROLL_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_TURNTABLE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_TURNTABLE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_PROJECTION_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_PROJECTION_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FORMAT_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_FORMAT_NAME_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_NTSC = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_NTSC_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_D1_NTSC = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_D1_NTSC_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_PAL = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_PAL_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_D1_PAL = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_D1_PAL_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_HD = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_HD_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_640x480 = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_640x480_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_320x200 = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_320x200_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_320x240 = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_320x240_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_128x128 = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_128x128_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_FULL_SCREEN = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_FULL_SCREEN_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_FORMAT = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_FORMAT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_WIDTH = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_WIDTH_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_HEIGHT = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_ASPECT_HEIGHT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_PIXEL_RATIO = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_PIXEL_RATIO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_NEAR_PLANE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_NEAR_PLANE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_FAR_PLANE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_FAR_PLANE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LOCK = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LOCK_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_APERTURE_FORMAT_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_APERTURE_FORMAT_NAME_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_16MM_THEATRICAL = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_16MM_THEATRICAL_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_SUPER_16MM = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_SUPER_16MM_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_ACADEMY = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_ACADEMY_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_TV_PROJECTION = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_TV_PROJECTION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_FULL_APERTURE = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_FULL_APERTURE_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_185_PROJECTION = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_185_PROJECTION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_35MM_ANAMORPHIC = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_35MM_ANAMORPHIC_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_70MM_PROJECTION = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_70MM_PROJECTION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_VISTA_VISION = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_VISTA_VISION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_DYNAVISION = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_DYNAVISION_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_IMAX = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_IMAX_get();
  public static readonly string TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_APERTURE_FORMAT = examplePINVOKE.TOKEN_KFBXGEOMETRYCAMERA_CUSTOM_APERTURE_FORMAT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_APERTURE_MODE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_APERTURE_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_DIMENSION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_SQUEEZERATIO = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_SQUEEZERATIO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_FOCAL_LENGTH = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_FOCAL_LENGTH_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_X = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_X_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_Y = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_APERTURE_Y_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_X = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_X_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_Y = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_OPTICAL_CENTER_Y_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_MEDIA_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_MEDIA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_TEXTURE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_TEXTURE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_VIDEO_CLIP_TEXTURE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_VIDEO_CLIP_TEXTURE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISPLAY_MODE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISPLAY_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DRAWING_MODE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DRAWING_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_THRESHOLD_ENABLE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_THRESHOLD_ENABLE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_TRESHOLD = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_FOREGROUND_MATTE_TRESHOLD_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_PLACEMENT_OPTIONS = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_PLACEMENT_OPTIONS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE_MODE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_DISTANCE_MODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_VIEW_CAMERA_INTEREST = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_VIEW_CAMERA_INTEREST_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_VIEW_NEAR_FAR_PLANES = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_VIEW_NEAR_FAR_PLANES_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_GRID = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_GRID_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_AXIS = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_AXIS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_INFO_ON_MOVING = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_INFO_ON_MOVING_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_TIME_CODE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_TIME_CODE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SAFE_AREA_STYLE = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SAFE_AREA_STYLE_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA_ON_RENDER = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_DISPLAY_SAFE_AREA_ON_RENDER_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_SHOW_AUDIO = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_SHOW_AUDIO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_COLOR = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_BACKGROUND_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_AUDIO_COLOR = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_AUDIO_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_USE_FRAME_COLOR = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_USE_FRAME_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_FRAME_COLOR = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_FRAME_COLOR_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_ORTHO_ZOOM = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_ORTHO_ZOOM_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_DEPTH_OF_FIELD = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_DEPTH_OF_FIELD_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_ANTIALIASING = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_ANTIALIASING_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_OVERSAMPLING = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_CAMERA_LENS_OVERSAMPLING_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_RENDER_OPTIONS_USAGE_TIME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_RENDER_OPTIONS_USAGE_TIME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_GEOMETRY_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_STEREO = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_STEREO_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_INTERAXIAL_SEP = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_INTERAXIAL_SEP_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_ZERO_PARALLAX = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_ZERO_PARALLAX_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_TOE_IN_ADJUST = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_TOE_IN_ADJUST_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_RIGHT_CAM = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_RIGHT_CAM_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_LEFT_CAM = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_FILM_OFFSET_LEFT_CAM_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_RELATIVE_PRECOMP_FILE_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_RELATIVE_PRECOMP_FILE_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_CONTENT = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERA_STEREO_PRECOMP_FILE_CONTENT_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_SWITCHER = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_SWITCHER_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_ID = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_INDEX_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYCAMERASWITCHER_CAMERA_INDEX_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_GEOMETRY_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYLIGHT_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYLIGHT_LIGHT_TYPE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLIGHT_CAST_LIGHT = examplePINVOKE.FIELD_KFBXGEOMETRYLIGHT_CAST_LIGHT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_UV_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_UV_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_GEOMETRY_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTICES = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTICES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_EDGES = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_EDGES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_INTERNAL_EDGES = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_INTERNAL_EDGES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_NORMALS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_NORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_NORMALS_WCOMPONENT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_NORMALS_WCOMPONENT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BINORMALS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_BINORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BINORMALS_WCOMPONENT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_BINORMALS_WCOMPONENT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TANGENTS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TANGENTS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TANGENTS_WCOMPONENT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TANGENTS_WCOMPONENT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_NORMALS_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_NORMALS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BINORMALS_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_BINORMALS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TANGENTS_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TANGENTS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_MATERIAL_ASSIGNATION = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_MATERIAL_ASSIGNATION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_ASSIGNATION = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_ASSIGNATION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_POLYGON_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_POLYGON_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_POLYGON_GROUP = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_POLYGON_GROUP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_MATERIALS_ID = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_MATERIALS_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_ID = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_UV_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_UV_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_MAPPING_INFO_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_MAPPING_INFO_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_UV = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_UV_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_POLYGON_UV = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_POLYGON_UV_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_GEOMETRY_UV_INFO = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_GEOMETRY_UV_INFO_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_VERTEX_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_VERTEX_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_TEXTURE_UV_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_TEXTURE_UV_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INFO = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INFO_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_ASSIGNATION = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_ASSIGNATION_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VALUES = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_VALUES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_COLOR_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_SMOOTHING = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_SMOOTHING_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VERTEX_CREASE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VERTEX_CREASE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_EDGE_CREASE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_EDGE_CREASE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_HOLE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_HOLE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_INDICES = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_INDICES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_DIRECT_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_ID = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_ID_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_ARRAY = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_ARRAY_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_USER_DATA_NAME = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_USER_DATA_NAME_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_VISIBILITY = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_VISIBILITY_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_SMOOTHNESS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_SMOOTHNESS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PREVIEW_DIVSION_LEVELS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_PREVIEW_DIVSION_LEVELS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_RENDER_DIVSION_LEVELS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_RENDER_DIVSION_LEVELS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_DISPLAY_SUBDIVISIONS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_DISPLAY_SUBDIVISIONS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PRESERVE_BORDERS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_PRESERVE_BORDERS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PRESERVE_HARD_EDGES = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_PRESERVE_HARD_EDGES_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_PROPAGATE_EDGE_HARDNESS = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_PROPAGATE_EDGE_HARDNESS_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_BOUNDARY_RULE = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_BOUNDARY_RULE_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_EXTENDED_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_U_EXTENDED_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_CLOSED = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_U_CLOSED_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_TOPCAP = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_U_TOPCAP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_STEP = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_U_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_U_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_U_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_EXTENDED_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_V_EXTENDED_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_CLOSED = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_V_CLOSED_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_TOPCAP = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_V_TOPCAP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_STEP = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_V_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYMESH_V_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRYMESH_V_COUNT_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_NO_MAPPING_INFORMATION = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_NO_MAPPING_INFORMATION_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_VERTICE = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_VERTICE_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_POLYGON = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_POLYGON_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_POLYGON_VERTEX = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_POLYGON_VERTEX_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_FACE = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_FACE_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_EDGE = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_EDGE_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_ALL_SAME = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_ALL_SAME_get();
  public static readonly string TOKEN_KFBXGEOMETRYMESH_BY_MODEL = examplePINVOKE.TOKEN_KFBXGEOMETRYMESH_BY_MODEL_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY = examplePINVOKE.FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYSUBDIV_GEOMETRY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_LEVEL_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRYSUBDIV_LEVEL_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_CURRENT_LEVEL = examplePINVOKE.FIELD_KFBXGEOMETRYSUBDIV_CURRENT_LEVEL_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIV_DISPLAY_SMOOTHNESS = examplePINVOKE.FIELD_KFBXGEOMETRYSUBDIV_DISPLAY_SMOOTHNESS_get();
  public static readonly string TOKEN_REFERENCE_DIRECT = examplePINVOKE.TOKEN_REFERENCE_DIRECT_get();
  public static readonly string TOKEN_REFERENCE_INDEX = examplePINVOKE.TOKEN_REFERENCE_INDEX_get();
  public static readonly string TOKEN_REFERENCE_INDEX_TO_DIRECT = examplePINVOKE.TOKEN_REFERENCE_INDEX_TO_DIRECT_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_NURB_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_NURB_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_NURB_ORDER = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_NURB_ORDER_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_DIMENSION = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_STEP = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_FORM = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_FORM_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_UCAPPED = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_UCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_VCAPPED = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_VCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_POINTS = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_U = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_U_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_V = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_MULTIPLICITY_V_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_U = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_U_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_V = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_KNOTVECTOR_V_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_MATERIALS = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_MATERIALS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURB_SURFACE_DISPLAY = examplePINVOKE.FIELD_KFBXGEOMETRYNURB_SURFACE_DISPLAY_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_ORDER = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_NURB_ORDER_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_DIMENSION = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_STEP = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_FORM = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_FORM_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_UCAPPED = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_UCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_VCAPPED = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_VCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_POINTS = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_U = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_U_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_V = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_KNOTVECTOR_V_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_MATERIALS = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_MATERIALS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_SURFACE_DISPLAY = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_SURFACE_DISPLAY_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_SURFACE_FLIP_NORMALS = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_SURFACE_FLIP_NORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_FLIP_NORMALS = examplePINVOKE.FIELD_KFBXGEOMETRYTRIM_NURBS_SURFACE_FLIP_NORMALS_get();
  public static readonly string FIELD_KFBXGEOMETRYBOUNDARY_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYBOUNDARY_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLINE_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYLINE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYLINE_POINTS = examplePINVOKE.FIELD_KFBXGEOMETRYLINE_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYLINE_POINTS_INDEX = examplePINVOKE.FIELD_KFBXGEOMETRYLINE_POINTS_INDEX_get();
  public static readonly string FIELD_KFBXGEOMETRYSUBDIVISION_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYSUBDIVISION_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_ORDER = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_ORDER_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_DIMENSION = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_DIMENSION_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_KNOTVECTOR = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_KNOTVECTOR_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_FORM = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_FORM_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_POINTS = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYNURBS_CURVE_RATIONAL = examplePINVOKE.FIELD_KFBXGEOMETRYNURBS_CURVE_RATIONAL_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_PATCH_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_PATCH_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_PATCH_TYPE = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_PATCH_TYPE_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_DIMENSIONS = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_DIMENSIONS_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_STEP = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_STEP_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_CLOSED = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_CLOSED_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_UCAPPED = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_UCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_VCAPPED = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_VCAPPED_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_POINTS = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_POINTS_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_SURFACE_DISPLAY = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_SURFACE_DISPLAY_get();
  public static readonly string FIELD_KFBXGEOMETRYPATCH_MATERIALS = examplePINVOKE.FIELD_KFBXGEOMETRYPATCH_MATERIALS_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_VERSION = examplePINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_VERSION_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_SRC_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_SRC_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_DST_COUNT = examplePINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_DST_COUNT_get();
  public static readonly string FIELD_KFBXGEOMETRY_WEIGHTED_MAP_INDEX_MAPPING = examplePINVOKE.FIELD_KFBXGEOMETRY_WEIGHTED_MAP_INDEX_MAPPING_get();
  public static readonly string FIELD_KFBXGEOMETRYSKELETON_LIMB_LENGTH = examplePINVOKE.FIELD_KFBXGEOMETRYSKELETON_LIMB_LENGTH_get();
  public static readonly string FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_SIZE = examplePINVOKE.FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_SIZE_get();
  public static readonly string FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_COLOR = examplePINVOKE.FIELD_KFBXGEOMETRYSKELETON_LIMB_NODE_COLOR_get();
  public static readonly string FIELD_KFBXVIDEO_USEMIPMAP = examplePINVOKE.FIELD_KFBXVIDEO_USEMIPMAP_get();
  public static readonly string FIELD_KFBXTEXTURE_TEXTURE = examplePINVOKE.FIELD_KFBXTEXTURE_TEXTURE_get();
  public static readonly string FIELD_KFBXTEXTURE_TYPE = examplePINVOKE.FIELD_KFBXTEXTURE_TYPE_get();
  public static readonly string FIELD_KFBXTEXTURE_VERSION = examplePINVOKE.FIELD_KFBXTEXTURE_VERSION_get();
  public static readonly string FIELD_KFBXTEXTURE_TEXTURE_NAME = examplePINVOKE.FIELD_KFBXTEXTURE_TEXTURE_NAME_get();
  public static readonly string FIELD_KFBXTEXTURE_MEDIA = examplePINVOKE.FIELD_KFBXTEXTURE_MEDIA_get();
  public static readonly string FIELD_KFBXTEXTURE_FILENAME = examplePINVOKE.FIELD_KFBXTEXTURE_FILENAME_get();
  public static readonly string FIELD_KFBXTEXTURE_RELATIVE_FILENAME = examplePINVOKE.FIELD_KFBXTEXTURE_RELATIVE_FILENAME_get();
  public static readonly string FIELD_KFBXTEXTURE_TRANSLATION = examplePINVOKE.FIELD_KFBXTEXTURE_TRANSLATION_get();
  public static readonly string FIELD_KFBXTEXTURE_SCALING = examplePINVOKE.FIELD_KFBXTEXTURE_SCALING_get();
  public static readonly string FIELD_KFBXTEXTURE_UV_TRANSLATION = examplePINVOKE.FIELD_KFBXTEXTURE_UV_TRANSLATION_get();
  public static readonly string FIELD_KFBXTEXTURE_UV_SCALING = examplePINVOKE.FIELD_KFBXTEXTURE_UV_SCALING_get();
  public static readonly string FIELD_KFBXTEXTURE_ROTATION = examplePINVOKE.FIELD_KFBXTEXTURE_ROTATION_get();
  public static readonly string FIELD_KFBXTEXTURE_TILING = examplePINVOKE.FIELD_KFBXTEXTURE_TILING_get();
  public static readonly string FIELD_KFBXTEXTURE_ALPHA_SRC = examplePINVOKE.FIELD_KFBXTEXTURE_ALPHA_SRC_get();
  public static readonly string FIELD_KFBXTEXTURE_CROPPING = examplePINVOKE.FIELD_KFBXTEXTURE_CROPPING_get();
  public static readonly string FIELD_KFBXTEXTURE_MAPPING_TYPE = examplePINVOKE.FIELD_KFBXTEXTURE_MAPPING_TYPE_get();
  public static readonly string FIELD_KFBXTEXTURE_PLANAR_NORMAL = examplePINVOKE.FIELD_KFBXTEXTURE_PLANAR_NORMAL_get();
  public static readonly string FIELD_KFBXTEXTURE_SWAPUV = examplePINVOKE.FIELD_KFBXTEXTURE_SWAPUV_get();
  public static readonly string FIELD_KFBXTEXTURE_MATERIAL_USE = examplePINVOKE.FIELD_KFBXTEXTURE_MATERIAL_USE_get();
  public static readonly string FIELD_KFBXTEXTURE_TEXTURE_USE = examplePINVOKE.FIELD_KFBXTEXTURE_TEXTURE_USE_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_STANDARD = examplePINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_STANDARD_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_SHADOW_MAP = examplePINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_SHADOW_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_LIGHT_MAP = examplePINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_LIGHT_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERICAL_REFLEXION_MAP = examplePINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERICAL_REFLEXION_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERE_REFLEXION_MAP = examplePINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_SPHERE_REFLEXION_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_TEXTURE_USE_BUMP_NORMAL_MAP = examplePINVOKE.TOKEN_KFBXTEXTURE_TEXTURE_USE_BUMP_NORMAL_MAP_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_TRANSLUCENT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_TRANSLUCENT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_ADD = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_ADD_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_MODULATE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_MODULATE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_MODULATE2 = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_MODULATE2_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_OVER = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_OVER_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_NORMAL = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_NORMAL_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DISSOLVE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_DISSOLVE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DARKEN = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_DARKEN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_COLORBURN = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_COLORBURN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LINEARBURN = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_LINEARBURN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DARKERCOLOR = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_DARKERCOLOR_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LIGHTEN = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_LIGHTEN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SCREEN = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_SCREEN_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_COLORDODGE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_COLORDODGE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LINEARDODGE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_LINEARDODGE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LIGHTERCOLOR = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_LIGHTERCOLOR_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SOFTLIGHT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_SOFTLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_HARDLIGHT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_HARDLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_VIVIDLIGHT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_VIVIDLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LINEARLIGHT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_LINEARLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_PINLIGHT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_PINLIGHT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_HARDMIX = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_HARDMIX_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DIFFERENCE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_DIFFERENCE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_EXCLUSION = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_EXCLUSION_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SUBTRACT = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_SUBTRACT_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_DIVIDE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_DIVIDE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_HUE = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_HUE_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_SATURATION = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_SATURATION_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_COLOR = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_COLOR_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_LUMINOSITY = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_LUMINOSITY_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_OVERLAY = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_OVERLAY_get();
  public static readonly string TOKEN_KFBXTEXTURE_BLEND_MAXBLEND = examplePINVOKE.TOKEN_KFBXTEXTURE_BLEND_MAXBLEND_get();
  public static readonly string FIELD_KFBXTEXTURE_WRAP_U = examplePINVOKE.FIELD_KFBXTEXTURE_WRAP_U_get();
  public static readonly string FIELD_KFBXTEXTURE_WRAP_V = examplePINVOKE.FIELD_KFBXTEXTURE_WRAP_V_get();
  public static readonly string FIELD_KFBXTEXTURE_BLEND_MODE = examplePINVOKE.FIELD_KFBXTEXTURE_BLEND_MODE_get();
  public static readonly string FIELD_KFBXTEXTURE_ALPHA = examplePINVOKE.FIELD_KFBXTEXTURE_ALPHA_get();
  public static readonly string FIELD_KFBXMATERIAL_MATERIAL = examplePINVOKE.FIELD_KFBXMATERIAL_MATERIAL_get();
  public static readonly string FIELD_KFBXMATERIAL_VERSION = examplePINVOKE.FIELD_KFBXMATERIAL_VERSION_get();
  public static readonly string FIELD_KFBXMATERIAL_SHADING_MODEL = examplePINVOKE.FIELD_KFBXMATERIAL_SHADING_MODEL_get();
  public static readonly string FIELD_KFBXMATERIAL_AMBIENT = examplePINVOKE.FIELD_KFBXMATERIAL_AMBIENT_get();
  public static readonly string FIELD_KFBXMATERIAL_DIFFUSE = examplePINVOKE.FIELD_KFBXMATERIAL_DIFFUSE_get();
  public static readonly string FIELD_KFBXMATERIAL_SPECULAR = examplePINVOKE.FIELD_KFBXMATERIAL_SPECULAR_get();
  public static readonly string FIELD_KFBXMATERIAL_EMISSIVE = examplePINVOKE.FIELD_KFBXMATERIAL_EMISSIVE_get();
  public static readonly string FIELD_KFBXMATERIAL_SHININESS = examplePINVOKE.FIELD_KFBXMATERIAL_SHININESS_get();
  public static readonly string FIELD_KFBXMATERIAL_REFLECTIVITY = examplePINVOKE.FIELD_KFBXMATERIAL_REFLECTIVITY_get();
  public static readonly string FIELD_KFBXMATERIAL_ALPHA = examplePINVOKE.FIELD_KFBXMATERIAL_ALPHA_get();
  public static readonly string FIELD_KFBXMATERIAL_MULTI_LAYER = examplePINVOKE.FIELD_KFBXMATERIAL_MULTI_LAYER_get();
  public static readonly string FIELD_KFBXLINK_LINK = examplePINVOKE.FIELD_KFBXLINK_LINK_get();
  public static readonly string FIELD_KFBXLINK_MODE = examplePINVOKE.FIELD_KFBXLINK_MODE_get();
  public static readonly string FIELD_KFBXLINK_USERDATA = examplePINVOKE.FIELD_KFBXLINK_USERDATA_get();
  public static readonly string FIELD_KFBXLINK_INDEXES = examplePINVOKE.FIELD_KFBXLINK_INDEXES_get();
  public static readonly string FIELD_KFBXLINK_WEIGHTS = examplePINVOKE.FIELD_KFBXLINK_WEIGHTS_get();
  public static readonly string FIELD_KFBXLINK_TRANSFORM = examplePINVOKE.FIELD_KFBXLINK_TRANSFORM_get();
  public static readonly string FIELD_KFBXLINK_TRANSFORM_LINK = examplePINVOKE.FIELD_KFBXLINK_TRANSFORM_LINK_get();
  public static readonly string FIELD_KFBXLINK_ASSOCIATE_MODEL = examplePINVOKE.FIELD_KFBXLINK_ASSOCIATE_MODEL_get();
  public static readonly string FIELD_KFBXLINK_TRANSFORM_PARENT = examplePINVOKE.FIELD_KFBXLINK_TRANSFORM_PARENT_get();
  public static readonly string TOKEN_KFBXLINK_AVERAGE = examplePINVOKE.TOKEN_KFBXLINK_AVERAGE_get();
  public static readonly string TOKEN_KFBXLINK_ADDITIVE = examplePINVOKE.TOKEN_KFBXLINK_ADDITIVE_get();
  public static readonly string TOKEN_KFBXLINK_TOTAL1 = examplePINVOKE.TOKEN_KFBXLINK_TOTAL1_get();
  public static readonly string FIELD_KFBXDEFORMER_DEFORMER = examplePINVOKE.FIELD_KFBXDEFORMER_DEFORMER_get();
  public static readonly string FIELD_KFBXDEFORMER_VERSION = examplePINVOKE.FIELD_KFBXDEFORMER_VERSION_get();
  public static readonly string FIELD_KFBXDEFORMER_TYPE = examplePINVOKE.FIELD_KFBXDEFORMER_TYPE_get();
  public static readonly string FIELD_KFBXDEFORMER_MULTI_LAYER = examplePINVOKE.FIELD_KFBXDEFORMER_MULTI_LAYER_get();
  public static readonly string FIELD_KFBXDEFORMER_MODE = examplePINVOKE.FIELD_KFBXDEFORMER_MODE_get();
  public static readonly string FIELD_KFBXDEFORMER_USERDATA = examplePINVOKE.FIELD_KFBXDEFORMER_USERDATA_get();
  public static readonly string FIELD_KFBXDEFORMER_INDEXES = examplePINVOKE.FIELD_KFBXDEFORMER_INDEXES_get();
  public static readonly string FIELD_KFBXDEFORMER_WEIGHTS = examplePINVOKE.FIELD_KFBXDEFORMER_WEIGHTS_get();
  public static readonly string FIELD_KFBXDEFORMER_TRANSFORM = examplePINVOKE.FIELD_KFBXDEFORMER_TRANSFORM_get();
  public static readonly string FIELD_KFBXDEFORMER_TRANSFORM_LINK = examplePINVOKE.FIELD_KFBXDEFORMER_TRANSFORM_LINK_get();
  public static readonly string FIELD_KFBXDEFORMER_ASSOCIATE_MODEL = examplePINVOKE.FIELD_KFBXDEFORMER_ASSOCIATE_MODEL_get();
  public static readonly string FIELD_KFBXDEFORMER_TRANSFORM_PARENT = examplePINVOKE.FIELD_KFBXDEFORMER_TRANSFORM_PARENT_get();
  public static readonly string TOKEN_KFBXDEFORMER_AVERAGE = examplePINVOKE.TOKEN_KFBXDEFORMER_AVERAGE_get();
  public static readonly string TOKEN_KFBXDEFORMER_ADDITIVE = examplePINVOKE.TOKEN_KFBXDEFORMER_ADDITIVE_get();
  public static readonly string TOKEN_KFBXDEFORMER_TOTAL1 = examplePINVOKE.TOKEN_KFBXDEFORMER_TOTAL1_get();
  public static readonly string FIELD_KFBXSKIN_VERSION = examplePINVOKE.FIELD_KFBXSKIN_VERSION_get();
  public static readonly string FIELD_KFBXSKIN_DEFORM_ACCURACY = examplePINVOKE.FIELD_KFBXSKIN_DEFORM_ACCURACY_get();
  public static readonly string FIELD_KFBXSKIN_SKINNINGTYPE = examplePINVOKE.FIELD_KFBXSKIN_SKINNINGTYPE_get();
  public static readonly string TOKEN_KFBXSKIN_LINEAR = examplePINVOKE.TOKEN_KFBXSKIN_LINEAR_get();
  public static readonly string TOKEN_KFBXSKIN_DUALQUATERNION = examplePINVOKE.TOKEN_KFBXSKIN_DUALQUATERNION_get();
  public static readonly string TOKEN_KFBXSKIN_BLEND = examplePINVOKE.TOKEN_KFBXSKIN_BLEND_get();
  public static readonly string FIELD_KFBXSKIN_INDEXES = examplePINVOKE.FIELD_KFBXSKIN_INDEXES_get();
  public static readonly string FIELD_KFBXSKIN_BLENDWEIGHTS = examplePINVOKE.FIELD_KFBXSKIN_BLENDWEIGHTS_get();
  public static readonly string FIELD_KFBXCLUSTER_VERSION = examplePINVOKE.FIELD_KFBXCLUSTER_VERSION_get();
  public static readonly string FIELD_KFBXCLUSTER_MODE = examplePINVOKE.FIELD_KFBXCLUSTER_MODE_get();
  public static readonly string FIELD_KFBXCLUSTER_USERDATA = examplePINVOKE.FIELD_KFBXCLUSTER_USERDATA_get();
  public static readonly string FIELD_KFBXCLUSTER_INDEXES = examplePINVOKE.FIELD_KFBXCLUSTER_INDEXES_get();
  public static readonly string FIELD_KFBXCLUSTER_WEIGHTS = examplePINVOKE.FIELD_KFBXCLUSTER_WEIGHTS_get();
  public static readonly string FIELD_KFBXCLUSTER_TRANSFORM = examplePINVOKE.FIELD_KFBXCLUSTER_TRANSFORM_get();
  public static readonly string FIELD_KFBXCLUSTER_TRANSFORM_LINK = examplePINVOKE.FIELD_KFBXCLUSTER_TRANSFORM_LINK_get();
  public static readonly string FIELD_KFBXCLUSTER_ASSOCIATE_MODEL = examplePINVOKE.FIELD_KFBXCLUSTER_ASSOCIATE_MODEL_get();
  public static readonly string FIELD_KFBXCLUSTER_TRANSFORM_PARENT = examplePINVOKE.FIELD_KFBXCLUSTER_TRANSFORM_PARENT_get();
  public static readonly string TOKEN_KFBXCLUSTER_AVERAGE = examplePINVOKE.TOKEN_KFBXCLUSTER_AVERAGE_get();
  public static readonly string TOKEN_KFBXCLUSTER_ADDITIVE = examplePINVOKE.TOKEN_KFBXCLUSTER_ADDITIVE_get();
  public static readonly string TOKEN_KFBXCLUSTER_TOTAL1 = examplePINVOKE.TOKEN_KFBXCLUSTER_TOTAL1_get();
  public static readonly string FIELD_KFBXBLENDSHAPE_VERSION = examplePINVOKE.FIELD_KFBXBLENDSHAPE_VERSION_get();
  public static readonly string FIELD_KFBXBLENDSHAPECHANNEL_VERSION = examplePINVOKE.FIELD_KFBXBLENDSHAPECHANNEL_VERSION_get();
  public static readonly string FIELD_KFBXBLENDSHAPECHANNEL_DEFORMPERCENT = examplePINVOKE.FIELD_KFBXBLENDSHAPECHANNEL_DEFORMPERCENT_get();
  public static readonly string FIELD_KFBXBLENDSHAPECHANNEL_FULLWEIGHTS = examplePINVOKE.FIELD_KFBXBLENDSHAPECHANNEL_FULLWEIGHTS_get();
  public static readonly string FIELD_KFBXSHAPE_SHAPE = examplePINVOKE.FIELD_KFBXSHAPE_SHAPE_get();
  public static readonly string FIELD_KFBXSHAPE_VERSION = examplePINVOKE.FIELD_KFBXSHAPE_VERSION_get();
  public static readonly string FIELD_KFBXSHAPE_INDEXES = examplePINVOKE.FIELD_KFBXSHAPE_INDEXES_get();
  public static readonly string FIELD_KFBXSHAPE_VERTICES = examplePINVOKE.FIELD_KFBXSHAPE_VERTICES_get();
  public static readonly string FIELD_KFBXSHAPE_NORMALS = examplePINVOKE.FIELD_KFBXSHAPE_NORMALS_get();
  public static readonly string FILED_KFBXVERTEXCACHEDEFORMER_VERSION = examplePINVOKE.FILED_KFBXVERTEXCACHEDEFORMER_VERSION_get();
  public static readonly string FILED_KFBXVERTEXCACHEDEFORMER_CACHE_CHANNEL = examplePINVOKE.FILED_KFBXVERTEXCACHEDEFORMER_CACHE_CHANNEL_get();
  public static readonly string FIELD_KFBXCACHE_VERTEX_CACHE = examplePINVOKE.FIELD_KFBXCACHE_VERTEX_CACHE_get();
  public static readonly string FIELD_KFBXCACHE_VERSION = examplePINVOKE.FIELD_KFBXCACHE_VERSION_get();
  public static readonly string FIELD_KFBXCACHE_CACHE_PATH = examplePINVOKE.FIELD_KFBXCACHE_CACHE_PATH_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_BINDING_TABLE = examplePINVOKE.FIELD_KFBXBINDINGTABLE_BINDING_TABLE_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_VERSION = examplePINVOKE.FIELD_KFBXBINDINGTABLE_VERSION_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_TARGET = examplePINVOKE.FIELD_KFBXBINDINGTABLE_TARGET_get();
  public static readonly string FIELD_KFBXBINDINGTABLE_ENTRY = examplePINVOKE.FIELD_KFBXBINDINGTABLE_ENTRY_get();
  public static readonly string FIELD_KFBXIMPLEMENTATION_IMPLEMENTATION = examplePINVOKE.FIELD_KFBXIMPLEMENTATION_IMPLEMENTATION_get();
  public static readonly string FIELD_KFBXIMPLEMENTATION_VERSION = examplePINVOKE.FIELD_KFBXIMPLEMENTATION_VERSION_get();
  public static readonly string FIELD_KFBXBINDINGOPERATOR_BINDING_OPERATOR = examplePINVOKE.FIELD_KFBXBINDINGOPERATOR_BINDING_OPERATOR_get();
  public static readonly string FIELD_KFBXBINDINGOPERATOR_VERSION = examplePINVOKE.FIELD_KFBXBINDINGOPERATOR_VERSION_get();
  public static readonly string FIELD_KFBXBINDINGOPERATOR_ENTRY = examplePINVOKE.FIELD_KFBXBINDINGOPERATOR_ENTRY_get();
  public static readonly string FIELD_KFBXCOLLECTION_COLLECTION = examplePINVOKE.FIELD_KFBXCOLLECTION_COLLECTION_get();
  public static readonly string FIELD_KFBXCOLLECTION_VERSION = examplePINVOKE.FIELD_KFBXCOLLECTION_VERSION_get();
  public static readonly string FIELD_KFBXCOLLECTIONEXCLUSIVE_COLLECTIONEXCLUSIVE = examplePINVOKE.FIELD_KFBXCOLLECTIONEXCLUSIVE_COLLECTIONEXCLUSIVE_get();
  public static readonly string FIELD_KFBXCOLLECTIONEXCLUSIVE_VERSION = examplePINVOKE.FIELD_KFBXCOLLECTIONEXCLUSIVE_VERSION_get();
  public static readonly string FIELD_KFBXSELECTIONSET_VERTICE_INDEXARRAY = examplePINVOKE.FIELD_KFBXSELECTIONSET_VERTICE_INDEXARRAY_get();
  public static readonly string FIELD_KFBXSELECTIONSET_EDGE_INDEXARRAY = examplePINVOKE.FIELD_KFBXSELECTIONSET_EDGE_INDEXARRAY_get();
  public static readonly string FIELD_KFBXSELECTIONSET_POLYGONVERTICES_INDEXARRAY = examplePINVOKE.FIELD_KFBXSELECTIONSET_POLYGONVERTICES_INDEXARRAY_get();
  public static readonly string FIELD_KFBXDISPLAYLAYER_DISPLAYLAYER = examplePINVOKE.FIELD_KFBXDISPLAYLAYER_DISPLAYLAYER_get();
  public static readonly string FIELD_KFBXDISPLAYLAYER_VERSION = examplePINVOKE.FIELD_KFBXDISPLAYLAYER_VERSION_get();
  public static readonly string FIELD_KFBXDOCUMENT_DOCUMENT = examplePINVOKE.FIELD_KFBXDOCUMENT_DOCUMENT_get();
  public static readonly string FIELD_KFBXDOCUMENT_VERSION = examplePINVOKE.FIELD_KFBXDOCUMENT_VERSION_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_LAYERED_TEXTURE = examplePINVOKE.FIELD_KFBXLAYEREDTEXTURE_LAYERED_TEXTURE_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_VERSION = examplePINVOKE.FIELD_KFBXLAYEREDTEXTURE_VERSION_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_BLENDMODES = examplePINVOKE.FIELD_KFBXLAYEREDTEXTURE_BLENDMODES_get();
  public static readonly string FIELD_KFBXLAYEREDTEXTURE_ALPHAS = examplePINVOKE.FIELD_KFBXLAYEREDTEXTURE_ALPHAS_get();
  public static readonly string FIELD_KFBXGOBO_GOBOMANAGER = examplePINVOKE.FIELD_KFBXGOBO_GOBOMANAGER_get();
  public static readonly string FIELD_KFBXGOBO_GOBO = examplePINVOKE.FIELD_KFBXGOBO_GOBO_get();
  public static readonly string FIELD_KFBXGOBO_LIGHTGOBO = examplePINVOKE.FIELD_KFBXGOBO_LIGHTGOBO_get();
  public static readonly string FIELD_KFBXGOBO_VERSION = examplePINVOKE.FIELD_KFBXGOBO_VERSION_get();
  public static readonly string FIELD_KFBXGOBO_GOBONAME = examplePINVOKE.FIELD_KFBXGOBO_GOBONAME_get();
  public static readonly string FIELD_KFBXGOBO_GOBOPATH = examplePINVOKE.FIELD_KFBXGOBO_GOBOPATH_get();
  public static readonly string FIELD_KFBXGOBO_DRAWCOMPONENT = examplePINVOKE.FIELD_KFBXGOBO_DRAWCOMPONENT_get();
  public static readonly string FIELD_PASSWORD = examplePINVOKE.FIELD_PASSWORD_get();
  public static readonly string FIELD_OLD_PASSWORD = examplePINVOKE.FIELD_OLD_PASSWORD_get();
  public static readonly string FIELD_XOR_STRING = examplePINVOKE.FIELD_XOR_STRING_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_UV = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_UV_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_SMOOTHING = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_SMOOTHING_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_VERTEX_CREASE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_VERTEX_CREASE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_EDGE_CREASE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_EDGE_CREASE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_HOLE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_HOLE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_USER_DATA = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_USER_DATA_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_VISIBILITY = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_VISIBILITY_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_NORMAL = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_NORMAL_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_BINORMAL = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_BINORMAL_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TANGENT = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_TANGENT_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_MATERIAL = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_MATERIAL_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TEXTURE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_TEXTURE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_COLOR = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_COLOR_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_POLYGON_GROUP = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_POLYGON_GROUP_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_VERSION = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_VERSION_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_NAME = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_NAME_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TYPED_INDEX = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_TYPED_INDEX_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_MAPPING_INFO_TYPE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_MAPPING_INFO_TYPE_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_REFERENCE_INFO_TYPE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_REFERENCE_INFO_TYPE_get();
  public static readonly string FIELD_KFBXLAYER = examplePINVOKE.FIELD_KFBXLAYER_get();
  public static readonly string FIELD_KFBXLAYER_VERSION = examplePINVOKE.FIELD_KFBXLAYER_VERSION_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_get();
  public static readonly string FIELD_KFBXLAYER_ELEMENT_TYPE = examplePINVOKE.FIELD_KFBXLAYER_ELEMENT_TYPE_get();
  public static readonly string FIELD_KFBXLAYER_GEOMETRY_LAYER = examplePINVOKE.FIELD_KFBXLAYER_GEOMETRY_LAYER_get();
  public static readonly string FIELD_KFBXLAYER_LAYER_TEXTURE_INFO = examplePINVOKE.FIELD_KFBXLAYER_LAYER_TEXTURE_INFO_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_MODE = examplePINVOKE.FIELD_KFBXLAYER_TEXTURE_MODE_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_BLEND_MODE = examplePINVOKE.FIELD_KFBXLAYER_TEXTURE_BLEND_MODE_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_ID_COUNT = examplePINVOKE.FIELD_KFBXLAYER_TEXTURE_ID_COUNT_get();
  public static readonly string FIELD_KFBXLAYER_TEXTURE_ID = examplePINVOKE.FIELD_KFBXLAYER_TEXTURE_ID_get();
  public static readonly string FIELD_KFBXLAYER_UV_MODE = examplePINVOKE.FIELD_KFBXLAYER_UV_MODE_get();
  public static readonly string FIELD_KFBXLAYER_UV_COUNT = examplePINVOKE.FIELD_KFBXLAYER_UV_COUNT_get();
  public static readonly string FIELD_KFBXLAYER_UV = examplePINVOKE.FIELD_KFBXLAYER_UV_get();
  public static readonly string FIELD_KFBXLAYER_UV_INDEX = examplePINVOKE.FIELD_KFBXLAYER_UV_INDEX_get();
  public static readonly string FIELD_KFBXLAYER_UV_ID_COUNT = examplePINVOKE.FIELD_KFBXLAYER_UV_ID_COUNT_get();
  public static readonly string FIELD_KFBXLAYER_UV_ID = examplePINVOKE.FIELD_KFBXLAYER_UV_ID_get();
  public static readonly string FIELD_KFBXPOSE_VERSION = examplePINVOKE.FIELD_KFBXPOSE_VERSION_get();
  public static readonly string FIELD_KFBXPOSE_TYPE = examplePINVOKE.FIELD_KFBXPOSE_TYPE_get();
  public static readonly string FIELD_KFBXPOSE_POSE = examplePINVOKE.FIELD_KFBXPOSE_POSE_get();
  public static readonly string FIELD_KFBXPOSE_BIND_POSE = examplePINVOKE.FIELD_KFBXPOSE_BIND_POSE_get();
  public static readonly string FIELD_KFBXPOSE_REST_POSE = examplePINVOKE.FIELD_KFBXPOSE_REST_POSE_get();
  public static readonly string FIELD_SCENEINFO = examplePINVOKE.FIELD_SCENEINFO_get();
  public static readonly string FIELD_SCENEINFO_TYPE = examplePINVOKE.FIELD_SCENEINFO_TYPE_get();
  public static readonly string FIELD_SCENEINFO_VERSION = examplePINVOKE.FIELD_SCENEINFO_VERSION_get();
  public static readonly string FIELD_SCENEINFO_METADATA = examplePINVOKE.FIELD_SCENEINFO_METADATA_get();
  public static readonly string FIELD_SCENEINFO_METADATA_VERSION = examplePINVOKE.FIELD_SCENEINFO_METADATA_VERSION_get();
  public static readonly string FIELD_SCENEINFO_METADATA_TITLE = examplePINVOKE.FIELD_SCENEINFO_METADATA_TITLE_get();
  public static readonly string FIELD_SCENEINFO_METADATA_SUBJECT = examplePINVOKE.FIELD_SCENEINFO_METADATA_SUBJECT_get();
  public static readonly string FIELD_SCENEINFO_METADATA_AUTHOR = examplePINVOKE.FIELD_SCENEINFO_METADATA_AUTHOR_get();
  public static readonly string FIELD_SCENEINFO_METADATA_KEYWORDS = examplePINVOKE.FIELD_SCENEINFO_METADATA_KEYWORDS_get();
  public static readonly string FIELD_SCENEINFO_METADATA_REVISION = examplePINVOKE.FIELD_SCENEINFO_METADATA_REVISION_get();
  public static readonly string FIELD_SCENEINFO_METADATA_COMMENT = examplePINVOKE.FIELD_SCENEINFO_METADATA_COMMENT_get();
  public static readonly string FIELD_GLOBAL_SETTINGS = examplePINVOKE.FIELD_GLOBAL_SETTINGS_get();
  public static readonly string FIELD_GLOBAL_SETTINGS_VERSION = examplePINVOKE.FIELD_GLOBAL_SETTINGS_VERSION_get();
  public static readonly string FIELD_KFBXREFERENCE_REFERENCE = examplePINVOKE.FIELD_KFBXREFERENCE_REFERENCE_get();
  public static readonly string FIELD_KFBXREFERENCE_VERSION = examplePINVOKE.FIELD_KFBXREFERENCE_VERSION_get();
  public static readonly string FIELD_CONSTRAINT = examplePINVOKE.FIELD_CONSTRAINT_get();
  public static readonly string FIELD_CONSTRAINT_VERSION = examplePINVOKE.FIELD_CONSTRAINT_VERSION_get();
  public static readonly string FIELD_CONSTRAINT_OFFSET = examplePINVOKE.FIELD_CONSTRAINT_OFFSET_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_CONSTRAINT = examplePINVOKE.TOKEN_KFBXCONSTRAINT_CONSTRAINT_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_POSITION = examplePINVOKE.TOKEN_KFBXCONSTRAINT_POSITION_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_ROTATION = examplePINVOKE.TOKEN_KFBXCONSTRAINT_ROTATION_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_SCALE = examplePINVOKE.TOKEN_KFBXCONSTRAINT_SCALE_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_PARENT = examplePINVOKE.TOKEN_KFBXCONSTRAINT_PARENT_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_SINGLECHAINIK = examplePINVOKE.TOKEN_KFBXCONSTRAINT_SINGLECHAINIK_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_AIM = examplePINVOKE.TOKEN_KFBXCONSTRAINT_AIM_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_CHARACTER = examplePINVOKE.TOKEN_KFBXCONSTRAINT_CHARACTER_get();
  public static readonly string TOKEN_KFBXCONSTRAINT_CUSTOM = examplePINVOKE.TOKEN_KFBXCONSTRAINT_CUSTOM_get();
  public static readonly string FIELD_OBJECT_DESCRIPTION = examplePINVOKE.FIELD_OBJECT_DESCRIPTION_get();
  public static readonly string FIELD_OBJECT_DESCRIPTION_NAME = examplePINVOKE.FIELD_OBJECT_DESCRIPTION_NAME_get();
  public static readonly string FIELD_OBJECT_REFERENCES = examplePINVOKE.FIELD_OBJECT_REFERENCES_get();
  public static readonly string FIELD_OBJECT_REFERENCES_FILE_PATH_URL = examplePINVOKE.FIELD_OBJECT_REFERENCES_FILE_PATH_URL_get();
  public static readonly string FIELD_OBJECT_REFERENCES_REFERENCE = examplePINVOKE.FIELD_OBJECT_REFERENCES_REFERENCE_get();
  public static readonly string FIELD_OBJECT_DEFINITION = examplePINVOKE.FIELD_OBJECT_DEFINITION_get();
  public static readonly string FIELD_OBJECT_PROPERTY_TEMPLATE = examplePINVOKE.FIELD_OBJECT_PROPERTY_TEMPLATE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_VERSION = examplePINVOKE.FIELD_OBJECT_DEFINITION_VERSION_get();
  public static readonly string FIELD_OBJECT_DEFINITION_COUNT = examplePINVOKE.FIELD_OBJECT_DEFINITION_COUNT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_REFERENCE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_REFERENCE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTAINER = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTAINER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MODEL = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MODEL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_NODE_ATTRIBUTE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_NODE_ATTRIBUTE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY_WEIGHTED_MAP = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GEOMETRY_WEIGHTED_MAP_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MARKETSET = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MARKETSET_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MATERIAL = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_MATERIAL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION_EXCLUSIVE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_COLLECTION_EXCLUSIVE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DISPLAY_LAYER = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DISPLAY_LAYER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TEXTURE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TEXTURE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_THUMBNAIL = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_THUMBNAIL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_VIDEO = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_VIDEO_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DEFORMER = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DEFORMER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SUBDEFORMER = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SUBDEFORMER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SHAPE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SHAPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPECHANNEL = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BLENDSHAPECHANNEL_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONSTRAINT = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONSTRAINT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTROLSET_PLUG = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CONTROLSET_PLUG_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_POSE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_POSE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GENERIC_NODE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GENERIC_NODE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BOUNDARY = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BOUNDARY_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CACHE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CACHE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_IMPLEMENTATION = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_IMPLEMENTATION_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGTABLE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGTABLE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGOPERATOR = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_BINDINGOPERATOR_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LAYERED_TEXTURE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LAYERED_TEXTURE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PROCEDURAL_TEXTURE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PROCEDURAL_TEXTURE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENEINFO = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENEINFO_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SCENE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LIBRARY = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_LIBRARY_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DOCUMENT = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_DOCUMENT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_FOLDER = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_FOLDER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CLIP = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_CLIP_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE_TRACK = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_TIMELINE_TRACK_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ENVIRONMENT = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ENVIRONMENT_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_OBJECTMETADATA = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_OBJECTMETADATA_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PLUGIN_PARAMS = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_PLUGIN_PARAMS_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_STACK = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_STACK_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_LAYER = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_LAYER_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVENODE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVENODE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_CURVE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_EVALUATOR = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_ANIM_EVALUATOR_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SELECTIONNODE = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_SELECTIONNODE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_MESH = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_MESH_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SUBDIV = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SUBDIV_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_PATCH = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_PATCH_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURB = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURB_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_SURFACE = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_SURFACE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_CURVE = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_NURBS_CURVE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_TRIM_NURB_SURFACE = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_TRIM_NURB_SURFACE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_BOUNDARY = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_BOUNDARY_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_LINE = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_LINE_get();
  public static readonly string FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SHAPE = examplePINVOKE.FIELD_OBJECT_TYPE_GEOMETRY_SUBTYPE_SHAPE_get();
  public static readonly string FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GLOBAL_SETTINGS = examplePINVOKE.FIELD_OBJECT_DEFINITION_OBJECT_TYPE_GLOBAL_SETTINGS_get();
  public static readonly string FIELD_OBJECT_PROPERTIES = examplePINVOKE.FIELD_OBJECT_PROPERTIES_get();
  public static readonly string FIELD_OBJECT_RELATIONS = examplePINVOKE.FIELD_OBJECT_RELATIONS_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_MODEL = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_MODEL_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_MATERIAL = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_MATERIAL_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_TEXTURE = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_TEXTURE_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_VIDEO = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_VIDEO_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_CONSTRAINT = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_CONSTRAINT_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_DEFORMER = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_DEFORMER_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_POSE = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_POSE_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_SCENEINFO = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_SCENEINFO_get();
  public static readonly string FIELD_OBJECT_RELATIONS_TYPE_CACHE = examplePINVOKE.FIELD_OBJECT_RELATIONS_TYPE_CACHE_get();
  public static readonly string FIELD_OBJECT_CONNECTIONS = examplePINVOKE.FIELD_OBJECT_CONNECTIONS_get();
  public static readonly string FIELD_TAKES = examplePINVOKE.FIELD_TAKES_get();
  public static readonly string FIELD_EMBEDDED_FILES = examplePINVOKE.FIELD_EMBEDDED_FILES_get();
  public static readonly string FIELD_EMBEDDED_FILE = examplePINVOKE.FIELD_EMBEDDED_FILE_get();
  public static readonly string FIELD_EMBEDDED_ORIGINAL_FILENAME = examplePINVOKE.FIELD_EMBEDDED_ORIGINAL_FILENAME_get();
  public static readonly string FIELD_EMBEDDED_FILENAME = examplePINVOKE.FIELD_EMBEDDED_FILENAME_get();
  public static readonly string FIELD_EMBEDDED_CONSUMERS = examplePINVOKE.FIELD_EMBEDDED_CONSUMERS_get();
  public static readonly string FIELD_EMBEDDED_CONSUMER = examplePINVOKE.FIELD_EMBEDDED_CONSUMER_get();
  public static readonly string FIELD_NODE_ATTRIBUTE_NAME = examplePINVOKE.FIELD_NODE_ATTRIBUTE_NAME_get();
  public static readonly string FIELD_NODE_ATTRIBUTE_REFTO = examplePINVOKE.FIELD_NODE_ATTRIBUTE_REFTO_get();
  public static readonly string FIELD_OLD_SECTION_VERSION5 = examplePINVOKE.FIELD_OLD_SECTION_VERSION5_get();
  public static readonly string FIELD_OLD_SECTION_HIERARCHYVIEW = examplePINVOKE.FIELD_OLD_SECTION_HIERARCHYVIEW_get();
  public static readonly string OBJECT_OLD_SECTION_VERSION5 = examplePINVOKE.OBJECT_OLD_SECTION_VERSION5_get();
  public static readonly string OBJECT_OLD_SECTION_HIERARCHYVIEW = examplePINVOKE.OBJECT_OLD_SECTION_HIERARCHYVIEW_get();
  public static readonly string FBXSDK_CAMERA_PERSPECTIVE = examplePINVOKE.FBXSDK_CAMERA_PERSPECTIVE_get();
  public static readonly string FBXSDK_CAMERA_TOP = examplePINVOKE.FBXSDK_CAMERA_TOP_get();
  public static readonly string FBXSDK_CAMERA_FRONT = examplePINVOKE.FBXSDK_CAMERA_FRONT_get();
  public static readonly string FBXSDK_CAMERA_BACK = examplePINVOKE.FBXSDK_CAMERA_BACK_get();
  public static readonly string FBXSDK_CAMERA_RIGHT = examplePINVOKE.FBXSDK_CAMERA_RIGHT_get();
  public static readonly string FBXSDK_CAMERA_LEFT = examplePINVOKE.FBXSDK_CAMERA_LEFT_get();
  public static readonly string FBXSDK_CAMERA_BOTTOM = examplePINVOKE.FBXSDK_CAMERA_BOTTOM_get();
  public static readonly string FBXSDK_CAMERA_SWITCHER = examplePINVOKE.FBXSDK_CAMERA_SWITCHER_get();
  public static readonly string FBXSDK_IO_END_NODE_STR = examplePINVOKE.FBXSDK_IO_END_NODE_STR_get();
  public static readonly bool IOSVisible = examplePINVOKE.IOSVisible_get();
  public static readonly bool IOSHidden = examplePINVOKE.IOSHidden_get();
  public static readonly bool IOSSavable = examplePINVOKE.IOSSavable_get();
  public static readonly bool IOSNotSavable = examplePINVOKE.IOSNotSavable_get();
  public static readonly bool IOSEnabled = examplePINVOKE.IOSEnabled_get();
  public static readonly bool IOSDisabled = examplePINVOKE.IOSDisabled_get();
  public static readonly int IOSBinary = examplePINVOKE.IOSBinary_get();
  public static readonly int IOSASCII = examplePINVOKE.IOSASCII_get();
  public static readonly string FBXSDK_PLUGINS_REGISTRY_PATH = examplePINVOKE.FBXSDK_PLUGINS_REGISTRY_PATH_get();
  public static readonly string IMP_FBX_PRESET_EXT = examplePINVOKE.IMP_FBX_PRESET_EXT_get();
  public static readonly string EXP_FBX_PRESET_EXT = examplePINVOKE.EXP_FBX_PRESET_EXT_get();
  public static readonly string M_E_FILENAME = examplePINVOKE.M_E_FILENAME_get();
  public static readonly string ARCH_FILENAME = examplePINVOKE.ARCH_FILENAME_get();
  public static readonly string MOBU_FILENAME = examplePINVOKE.MOBU_FILENAME_get();
  public static readonly string USERDEFINED_FILENAME = examplePINVOKE.USERDEFINED_FILENAME_get();
  public static readonly string FN_LOCALIZATION_PREFIX = examplePINVOKE.FN_LOCALIZATION_PREFIX_get();
  public static readonly string FN_LOCALIZATION_EXT = examplePINVOKE.FN_LOCALIZATION_EXT_get();
  public static readonly string FN_LANGUAGE = examplePINVOKE.FN_LANGUAGE_get();
  public static readonly string IOSROOT = examplePINVOKE.IOSROOT_get();
  public static readonly string IOSN_EXPORT = examplePINVOKE.IOSN_EXPORT_get();
  public static readonly string IOSN_IMPORT = examplePINVOKE.IOSN_IMPORT_get();
  public static readonly string IOSN_PLUGIN_GRP = examplePINVOKE.IOSN_PLUGIN_GRP_get();
  public static readonly string IOSN_PLUGIN_UI_WIDTH = examplePINVOKE.IOSN_PLUGIN_UI_WIDTH_get();
  public static readonly string IOSN_PLUGIN_UI_HEIGHT = examplePINVOKE.IOSN_PLUGIN_UI_HEIGHT_get();
  public static readonly string IOSN_PLUGIN_VERSIONS_URL = examplePINVOKE.IOSN_PLUGIN_VERSIONS_URL_get();
  public static readonly string IOSN_PI_VERSION = examplePINVOKE.IOSN_PI_VERSION_get();
  public static readonly string IOSN_PRESET_SELECTED = examplePINVOKE.IOSN_PRESET_SELECTED_get();
  public static readonly string IOSN_PRESETS_GRP = examplePINVOKE.IOSN_PRESETS_GRP_get();
  public static readonly string IOSN_STATISTICS_GRP = examplePINVOKE.IOSN_STATISTICS_GRP_get();
  public static readonly string IOSN_UNITS_GRP = examplePINVOKE.IOSN_UNITS_GRP_get();
  public static readonly string IOSN_INCLUDE_GRP = examplePINVOKE.IOSN_INCLUDE_GRP_get();
  public static readonly string IOSN_ADV_OPT_GRP = examplePINVOKE.IOSN_ADV_OPT_GRP_get();
  public static readonly string IOSN_AXISCONV_GRP = examplePINVOKE.IOSN_AXISCONV_GRP_get();
  public static readonly string IOSN_CAMERA_GRP = examplePINVOKE.IOSN_CAMERA_GRP_get();
  public static readonly string IOSN_LIGHT_GRP = examplePINVOKE.IOSN_LIGHT_GRP_get();
  public static readonly string IOSN_EXTRA_GRP = examplePINVOKE.IOSN_EXTRA_GRP_get();
  public static readonly string IOSN_CONSTRAINTS_GRP = examplePINVOKE.IOSN_CONSTRAINTS_GRP_get();
  public static readonly string IOSN_INPUTCONNECTIONS_GRP = examplePINVOKE.IOSN_INPUTCONNECTIONS_GRP_get();
  public static readonly string IOSN_INFORMATION_GRP = examplePINVOKE.IOSN_INFORMATION_GRP_get();
  public static readonly string IOSN_UP_AXIS = examplePINVOKE.IOSN_UP_AXIS_get();
  public static readonly string IOSN_UP_AXIS_MAX = examplePINVOKE.IOSN_UP_AXIS_MAX_get();
  public static readonly string IOSN_ZUPROTATION_MAX = examplePINVOKE.IOSN_ZUPROTATION_MAX_get();
  public static readonly string IOSN_AXISCONVERSION = examplePINVOKE.IOSN_AXISCONVERSION_get();
  public static readonly string IOSN_AUTO_AXIS = examplePINVOKE.IOSN_AUTO_AXIS_get();
  public static readonly string IOSN_FILE_UP_AXIS = examplePINVOKE.IOSN_FILE_UP_AXIS_get();
  public static readonly string IOSN_PRESETS = examplePINVOKE.IOSN_PRESETS_get();
  public static readonly string IOSN_STATISTICS = examplePINVOKE.IOSN_STATISTICS_get();
  public static readonly string IOSN_UNITS_SCALE = examplePINVOKE.IOSN_UNITS_SCALE_get();
  public static readonly string IOSN_TOTAL_UNITS_SCALE_TB = examplePINVOKE.IOSN_TOTAL_UNITS_SCALE_TB_get();
  public static readonly string IOSN_SCALECONVERSION = examplePINVOKE.IOSN_SCALECONVERSION_get();
  public static readonly string IOSN_MASTERSCALE = examplePINVOKE.IOSN_MASTERSCALE_get();
  public static readonly string IOSN_DYN_SCALE_CONVERSION = examplePINVOKE.IOSN_DYN_SCALE_CONVERSION_get();
  public static readonly string IOSN_UNITSELECTOR = examplePINVOKE.IOSN_UNITSELECTOR_get();
  public static readonly string IOSN_ANIMATION = examplePINVOKE.IOSN_ANIMATION_get();
  public static readonly string IOSN_GEOMETRY = examplePINVOKE.IOSN_GEOMETRY_get();
  public static readonly string IOSN_DEFORMATION = examplePINVOKE.IOSN_DEFORMATION_get();
  public static readonly string IOSN_MARKERS = examplePINVOKE.IOSN_MARKERS_get();
  public static readonly string IOSN_CHARACTER = examplePINVOKE.IOSN_CHARACTER_get();
  public static readonly string IOSN_CHARACTER_AS_MAYA_HIK = examplePINVOKE.IOSN_CHARACTER_AS_MAYA_HIK_get();
  public static readonly string IOSN_CHARACTER_TYPE = examplePINVOKE.IOSN_CHARACTER_TYPE_get();
  public static readonly string IOSN_CHARACTER_TYPE_DESC = examplePINVOKE.IOSN_CHARACTER_TYPE_DESC_get();
  public static readonly string IOSN_SETLOCKEDATTRIB = examplePINVOKE.IOSN_SETLOCKEDATTRIB_get();
  public static readonly string IOSN_TRIANGULATE = examplePINVOKE.IOSN_TRIANGULATE_get();
  public static readonly string IOSN_MRCUSTOMATTRIBUTES = examplePINVOKE.IOSN_MRCUSTOMATTRIBUTES_get();
  public static readonly string IOSN_MESHPRIMITIVE = examplePINVOKE.IOSN_MESHPRIMITIVE_get();
  public static readonly string IOSN_MESHTRIANGLE = examplePINVOKE.IOSN_MESHTRIANGLE_get();
  public static readonly string IOSN_MESHPOLY = examplePINVOKE.IOSN_MESHPOLY_get();
  public static readonly string IOSN_NURB = examplePINVOKE.IOSN_NURB_get();
  public static readonly string IOSN_PATCH = examplePINVOKE.IOSN_PATCH_get();
  public static readonly string IOSN_BIP2FBX = examplePINVOKE.IOSN_BIP2FBX_get();
  public static readonly string IOSN_ASCIIFBX = examplePINVOKE.IOSN_ASCIIFBX_get();
  public static readonly string IOSN_TAKE = examplePINVOKE.IOSN_TAKE_get();
  public static readonly string IOSN_GEOMETRYMESHPRIMITIVEAS = examplePINVOKE.IOSN_GEOMETRYMESHPRIMITIVEAS_get();
  public static readonly string IOSN_GEOMETRYMESHTRIANGLEAS = examplePINVOKE.IOSN_GEOMETRYMESHTRIANGLEAS_get();
  public static readonly string IOSN_GEOMETRYMESHPOLYAS = examplePINVOKE.IOSN_GEOMETRYMESHPOLYAS_get();
  public static readonly string IOSN_GEOMETRYNURBSAS = examplePINVOKE.IOSN_GEOMETRYNURBSAS_get();
  public static readonly string IOSN_GEOMETRYNURBSSURFACEAS = examplePINVOKE.IOSN_GEOMETRYNURBSSURFACEAS_get();
  public static readonly string IOSN_GEOMETRYPATCHAS = examplePINVOKE.IOSN_GEOMETRYPATCHAS_get();
  public static readonly string IOSN_TANGENTS_BINORMALS = examplePINVOKE.IOSN_TANGENTS_BINORMALS_get();
  public static readonly string IOSN_SMOOTH_MESH = examplePINVOKE.IOSN_SMOOTH_MESH_get();
  public static readonly string IOSN_SELECTION_SET = examplePINVOKE.IOSN_SELECTION_SET_get();
  public static readonly string IOSN_ANIMATIONONLY = examplePINVOKE.IOSN_ANIMATIONONLY_get();
  public static readonly string IOSN_SELECTIONONLY = examplePINVOKE.IOSN_SELECTIONONLY_get();
  public static readonly string IOSN_BONE = examplePINVOKE.IOSN_BONE_get();
  public static readonly string IOSN_BONEWIDTHHEIGHTLOCK = examplePINVOKE.IOSN_BONEWIDTHHEIGHTLOCK_get();
  public static readonly string IOSN_BONEASDUMMY = examplePINVOKE.IOSN_BONEASDUMMY_get();
  public static readonly string IOSN_BONEMAX4BONEWIDTH = examplePINVOKE.IOSN_BONEMAX4BONEWIDTH_get();
  public static readonly string IOSN_BONEMAX4BONEHEIGHT = examplePINVOKE.IOSN_BONEMAX4BONEHEIGHT_get();
  public static readonly string IOSN_BONEMAX4BONETAPER = examplePINVOKE.IOSN_BONEMAX4BONETAPER_get();
  public static readonly string IOSN_REMOVE_SINGLE_KEY = examplePINVOKE.IOSN_REMOVE_SINGLE_KEY_get();
  public static readonly string IOSN_CURVE_FILTER = examplePINVOKE.IOSN_CURVE_FILTER_get();
  public static readonly string IOSN_CONSTRAINT = examplePINVOKE.IOSN_CONSTRAINT_get();
  public static readonly string IOSN_UI = examplePINVOKE.IOSN_UI_get();
  public static readonly string IOSN_SHOW_UI_MODE = examplePINVOKE.IOSN_SHOW_UI_MODE_get();
  public static readonly string IOSN_SHOW_WARNINGS_MANAGER = examplePINVOKE.IOSN_SHOW_WARNINGS_MANAGER_get();
  public static readonly string IOSN_GENERATE_LOG_DATA = examplePINVOKE.IOSN_GENERATE_LOG_DATA_get();
  public static readonly string IOSN_PERF_GRP = examplePINVOKE.IOSN_PERF_GRP_get();
  public static readonly string IOSN_REMOVEBADPOLYSFROMMESH = examplePINVOKE.IOSN_REMOVEBADPOLYSFROMMESH_get();
  public static readonly string IOSN_META_DATA = examplePINVOKE.IOSN_META_DATA_get();
  public static readonly string IOSN_CACHE_GRP = examplePINVOKE.IOSN_CACHE_GRP_get();
  public static readonly string IOSN_CACHE_SIZE = examplePINVOKE.IOSN_CACHE_SIZE_get();
  public static readonly string IOSN_MERGE_MODE = examplePINVOKE.IOSN_MERGE_MODE_get();
  public static readonly string IOSN_MERGE_MODE_DESCRIPTION = examplePINVOKE.IOSN_MERGE_MODE_DESCRIPTION_get();
  public static readonly string IOSN_ONE_CLICK_MERGE = examplePINVOKE.IOSN_ONE_CLICK_MERGE_get();
  public static readonly string IOSN_ONE_CLICK_MERGE_TEXTURE = examplePINVOKE.IOSN_ONE_CLICK_MERGE_TEXTURE_get();
  public static readonly string IOSN_SAMPLINGPANEL = examplePINVOKE.IOSN_SAMPLINGPANEL_get();
  public static readonly string IOSN_FILE_FORMAT = examplePINVOKE.IOSN_FILE_FORMAT_get();
  public static readonly string IOSN_FBX = examplePINVOKE.IOSN_FBX_get();
  public static readonly string IOSN_DXF = examplePINVOKE.IOSN_DXF_get();
  public static readonly string IOSN_OBJ = examplePINVOKE.IOSN_OBJ_get();
  public static readonly string IOSN_3DS = examplePINVOKE.IOSN_3DS_get();
  public static readonly string IOSN_COLLADA = examplePINVOKE.IOSN_COLLADA_get();
  public static readonly string IOSN_MOTION_BASE = examplePINVOKE.IOSN_MOTION_BASE_get();
  public static readonly string IOSN_BIOVISION_BVH = examplePINVOKE.IOSN_BIOVISION_BVH_get();
  public static readonly string IOSN_MOTIONANALYSIS_HTR = examplePINVOKE.IOSN_MOTIONANALYSIS_HTR_get();
  public static readonly string IOSN_MOTIONANALYSIS_TRC = examplePINVOKE.IOSN_MOTIONANALYSIS_TRC_get();
  public static readonly string IOSN_ACCLAIM_ASF = examplePINVOKE.IOSN_ACCLAIM_ASF_get();
  public static readonly string IOSN_ACCLAIM_AMC = examplePINVOKE.IOSN_ACCLAIM_AMC_get();
  public static readonly string IOSN_VICON_C3D = examplePINVOKE.IOSN_VICON_C3D_get();
  public static readonly string IOSN_SKINS = examplePINVOKE.IOSN_SKINS_get();
  public static readonly string IOSN_POINTCACHE = examplePINVOKE.IOSN_POINTCACHE_get();
  public static readonly string IOSN_QUATERNION = examplePINVOKE.IOSN_QUATERNION_get();
  public static readonly string IOSN_NAMETAKE = examplePINVOKE.IOSN_NAMETAKE_get();
  public static readonly string IOSN_SHAPE = examplePINVOKE.IOSN_SHAPE_get();
  public static readonly string IOSN_LIGHT = examplePINVOKE.IOSN_LIGHT_get();
  public static readonly string IOSN_LIGHTATTENUATION = examplePINVOKE.IOSN_LIGHTATTENUATION_get();
  public static readonly string IOSN_CAMERA = examplePINVOKE.IOSN_CAMERA_get();
  public static readonly string IOSN_VIEW_CUBE = examplePINVOKE.IOSN_VIEW_CUBE_get();
  public static readonly string IOSN_BINDPOSE = examplePINVOKE.IOSN_BINDPOSE_get();
  public static readonly string IOSN_EMBEDTEXTURE_GRP = examplePINVOKE.IOSN_EMBEDTEXTURE_GRP_get();
  public static readonly string IOSN_EMBEDTEXTURE = examplePINVOKE.IOSN_EMBEDTEXTURE_get();
  public static readonly string IOSN_EMBEDDED_FOLDER = examplePINVOKE.IOSN_EMBEDDED_FOLDER_get();
  public static readonly string IOSN_CONVERTTOTIFF = examplePINVOKE.IOSN_CONVERTTOTIFF_get();
  public static readonly string IOSN_UNLOCK_NORMALS = examplePINVOKE.IOSN_UNLOCK_NORMALS_get();
  public static readonly string IOSN_CREASE = examplePINVOKE.IOSN_CREASE_get();
  public static readonly string IOSN_FINESTSUBDIVLEVEL = examplePINVOKE.IOSN_FINESTSUBDIVLEVEL_get();
  public static readonly string IOSN_BAKEANIMATIONLAYERS = examplePINVOKE.IOSN_BAKEANIMATIONLAYERS_get();
  public static readonly string IOSN_BAKECOMPLEXANIMATION = examplePINVOKE.IOSN_BAKECOMPLEXANIMATION_get();
  public static readonly string IOSN_BAKEFRAMESTART = examplePINVOKE.IOSN_BAKEFRAMESTART_get();
  public static readonly string IOSN_BAKEFRAMEEND = examplePINVOKE.IOSN_BAKEFRAMEEND_get();
  public static readonly string IOSN_BAKEFRAMESTEP = examplePINVOKE.IOSN_BAKEFRAMESTEP_get();
  public static readonly string IOSN_BAKEFRAMESTARTNORESET = examplePINVOKE.IOSN_BAKEFRAMESTARTNORESET_get();
  public static readonly string IOSN_BAKEFRAMEENDNORESET = examplePINVOKE.IOSN_BAKEFRAMEENDNORESET_get();
  public static readonly string IOSN_BAKEFRAMESTEPNORESET = examplePINVOKE.IOSN_BAKEFRAMESTEPNORESET_get();
  public static readonly string IOSN_USEMATRIXFROMPOSE = examplePINVOKE.IOSN_USEMATRIXFROMPOSE_get();
  public static readonly string IOSN_NULLSTOPIVOT = examplePINVOKE.IOSN_NULLSTOPIVOT_get();
  public static readonly string IOSN_PIVOTTONULLS = examplePINVOKE.IOSN_PIVOTTONULLS_get();
  public static readonly string IOSN_GEOMNORMALPERPOLY = examplePINVOKE.IOSN_GEOMNORMALPERPOLY_get();
  public static readonly string IOSN_MAXBONEASBONE = examplePINVOKE.IOSN_MAXBONEASBONE_get();
  public static readonly string IOSN_MAXNURBSSTEP = examplePINVOKE.IOSN_MAXNURBSSTEP_get();
  public static readonly string IOSN_PROTECTDRIVENKEYS = examplePINVOKE.IOSN_PROTECTDRIVENKEYS_get();
  public static readonly string IOSN_DEFORMNULLSASJOINTS = examplePINVOKE.IOSN_DEFORMNULLSASJOINTS_get();
  public static readonly string IOSN_ENVIRONMENT = examplePINVOKE.IOSN_ENVIRONMENT_get();
  public static readonly string IOSN_SAMPLINGRATESELECTOR = examplePINVOKE.IOSN_SAMPLINGRATESELECTOR_get();
  public static readonly string IOSN_SAMPLINGRATE = examplePINVOKE.IOSN_SAMPLINGRATE_get();
  public static readonly string IOSN_APPLYCSTKEYRED = examplePINVOKE.IOSN_APPLYCSTKEYRED_get();
  public static readonly string IOSN_CSTKEYREDTPREC = examplePINVOKE.IOSN_CSTKEYREDTPREC_get();
  public static readonly string IOSN_CSTKEYREDRPREC = examplePINVOKE.IOSN_CSTKEYREDRPREC_get();
  public static readonly string IOSN_CSTKEYREDSPREC = examplePINVOKE.IOSN_CSTKEYREDSPREC_get();
  public static readonly string IOSN_CSTKEYREDOPREC = examplePINVOKE.IOSN_CSTKEYREDOPREC_get();
  public static readonly string IOSN_APPLYKEYREDUCE = examplePINVOKE.IOSN_APPLYKEYREDUCE_get();
  public static readonly string IOSN_KEYREDUCEPREC = examplePINVOKE.IOSN_KEYREDUCEPREC_get();
  public static readonly string IOSN_APPLYKEYSONFRM = examplePINVOKE.IOSN_APPLYKEYSONFRM_get();
  public static readonly string IOSN_APPLYKEYSYNC = examplePINVOKE.IOSN_APPLYKEYSYNC_get();
  public static readonly string IOSN_APPLYUNROLL = examplePINVOKE.IOSN_APPLYUNROLL_get();
  public static readonly string IOSN_UNROLLPREC = examplePINVOKE.IOSN_UNROLLPREC_get();
  public static readonly string IOSN_UNROLLPATH = examplePINVOKE.IOSN_UNROLLPATH_get();
  public static readonly string IOSN_UNROLLFORCEAUTO = examplePINVOKE.IOSN_UNROLLFORCEAUTO_get();
  public static readonly string IOSN_AUTOTANGENTSONLY = examplePINVOKE.IOSN_AUTOTANGENTSONLY_get();
  public static readonly string IOSN_SMOOTHING_GROUPS = examplePINVOKE.IOSN_SMOOTHING_GROUPS_get();
  public static readonly string IOSN_HARDEDGES = examplePINVOKE.IOSN_HARDEDGES_get();
  public static readonly string IOSN_EXP_HARDEDGES = examplePINVOKE.IOSN_EXP_HARDEDGES_get();
  public static readonly string IOSN_BLINDDATA = examplePINVOKE.IOSN_BLINDDATA_get();
  public static readonly string IOSN_INPUTCONNECTIONS = examplePINVOKE.IOSN_INPUTCONNECTIONS_get();
  public static readonly string IOSN_INSTANCES = examplePINVOKE.IOSN_INSTANCES_get();
  public static readonly string IOSN_REFERENCES = examplePINVOKE.IOSN_REFERENCES_get();
  public static readonly string IOSN_CONTAINEROBJECTS = examplePINVOKE.IOSN_CONTAINEROBJECTS_get();
  public static readonly string IOSN_BYPASSRRSINHERITANCE = examplePINVOKE.IOSN_BYPASSRRSINHERITANCE_get();
  public static readonly string IOSN_FORCEWEIGHTNORMALIZE = examplePINVOKE.IOSN_FORCEWEIGHTNORMALIZE_get();
  public static readonly string IOSN_SHAPEANIMATION = examplePINVOKE.IOSN_SHAPEANIMATION_get();
  public static readonly string IOSN_SMOOTHKEYASUSER = examplePINVOKE.IOSN_SMOOTHKEYASUSER_get();
  public static readonly string IOSN_SCALEFACTOR = examplePINVOKE.IOSN_SCALEFACTOR_get();
  public static readonly string IOSN_AXISCONVERSIONMETHOD = examplePINVOKE.IOSN_AXISCONVERSIONMETHOD_get();
  public static readonly string IOSN_UPAXIS = examplePINVOKE.IOSN_UPAXIS_get();
  public static readonly string IOSN_SELECTIONSETNAMEASPOINTCACHE = examplePINVOKE.IOSN_SELECTIONSETNAMEASPOINTCACHE_get();
  public static readonly string IOSN_KEEPFRAMERATE = examplePINVOKE.IOSN_KEEPFRAMERATE_get();
  public static readonly string IOSN_ATTENUATIONASINTENSITYCURVE = examplePINVOKE.IOSN_ATTENUATIONASINTENSITYCURVE_get();
  public static readonly string IOSN_RESAMPLE_ANIMATION_CURVES = examplePINVOKE.IOSN_RESAMPLE_ANIMATION_CURVES_get();
  public static readonly string IOSN_TIMELINE = examplePINVOKE.IOSN_TIMELINE_get();
  public static readonly string IOSN_TIMELINE_SPAN = examplePINVOKE.IOSN_TIMELINE_SPAN_get();
  public static readonly string IOSN_BUTTON_WEB_UPDATE = examplePINVOKE.IOSN_BUTTON_WEB_UPDATE_get();
  public static readonly string IOSN_BUTTON_EDIT = examplePINVOKE.IOSN_BUTTON_EDIT_get();
  public static readonly string IOSN_BUTTON_OK = examplePINVOKE.IOSN_BUTTON_OK_get();
  public static readonly string IOSN_BUTTON_CANCEL = examplePINVOKE.IOSN_BUTTON_CANCEL_get();
  public static readonly string IOSN_MENU_EDIT_PRESET = examplePINVOKE.IOSN_MENU_EDIT_PRESET_get();
  public static readonly string IOSN_MENU_SAVE_PRESET = examplePINVOKE.IOSN_MENU_SAVE_PRESET_get();
  public static readonly string IOSN_UIL = examplePINVOKE.IOSN_UIL_get();
  public static readonly string IOSN_PLUGIN_PRODUCT_FAMILY = examplePINVOKE.IOSN_PLUGIN_PRODUCT_FAMILY_get();
  public static readonly string IOSN_PLUGIN_UI_XPOS = examplePINVOKE.IOSN_PLUGIN_UI_XPOS_get();
  public static readonly string IOSN_PLUGIN_UI_YPOS = examplePINVOKE.IOSN_PLUGIN_UI_YPOS_get();
  public static readonly string IOSN_FBX_EXTENTIONS_SDK = examplePINVOKE.IOSN_FBX_EXTENTIONS_SDK_get();
  public static readonly string IOSN_FBX_EXTENTIONS_SDK_WARNING = examplePINVOKE.IOSN_FBX_EXTENTIONS_SDK_WARNING_get();
  public static readonly string IOSN_COLLADA_FRAME_COUNT = examplePINVOKE.IOSN_COLLADA_FRAME_COUNT_get();
  public static readonly string IOSN_COLLADA_START = examplePINVOKE.IOSN_COLLADA_START_get();
  public static readonly string IOSN_COLLADA_TAKE_NAME = examplePINVOKE.IOSN_COLLADA_TAKE_NAME_get();
  public static readonly string IOSN_COLLADA_TRIANGULATE = examplePINVOKE.IOSN_COLLADA_TRIANGULATE_get();
  public static readonly string IOSN_COLLADA_SINGLEMATRIX = examplePINVOKE.IOSN_COLLADA_SINGLEMATRIX_get();
  public static readonly string IOSN_COLLADA_FRAME_RATE = examplePINVOKE.IOSN_COLLADA_FRAME_RATE_get();
  public static readonly string IOSN_DXF_TRIANGULATE = examplePINVOKE.IOSN_DXF_TRIANGULATE_get();
  public static readonly string IOSN_DXF_DEFORMATION = examplePINVOKE.IOSN_DXF_DEFORMATION_get();
  public static readonly string IOSN_DXF_WELD_VERTICES = examplePINVOKE.IOSN_DXF_WELD_VERTICES_get();
  public static readonly string IOSN_DXF_OBJECT_DERIVATION = examplePINVOKE.IOSN_DXF_OBJECT_DERIVATION_get();
  public static readonly string IOSN_DXF_REFERENCE_NODE = examplePINVOKE.IOSN_DXF_REFERENCE_NODE_get();
  public static readonly string IOSN_OBJ_REFERENCE_NODE = examplePINVOKE.IOSN_OBJ_REFERENCE_NODE_get();
  public static readonly string IOSN_OBJ_TRIANGULATE = examplePINVOKE.IOSN_OBJ_TRIANGULATE_get();
  public static readonly string IOSN_OBJ_DEFORMATION = examplePINVOKE.IOSN_OBJ_DEFORMATION_get();
  public static readonly string IOSN_3DS_REFERENCENODE = examplePINVOKE.IOSN_3DS_REFERENCENODE_get();
  public static readonly string IOSN_3DS_TEXTURE = examplePINVOKE.IOSN_3DS_TEXTURE_get();
  public static readonly string IOSN_3DS_MATERIAL = examplePINVOKE.IOSN_3DS_MATERIAL_get();
  public static readonly string IOSN_3DS_ANIMATION = examplePINVOKE.IOSN_3DS_ANIMATION_get();
  public static readonly string IOSN_3DS_MESH = examplePINVOKE.IOSN_3DS_MESH_get();
  public static readonly string IOSN_3DS_LIGHT = examplePINVOKE.IOSN_3DS_LIGHT_get();
  public static readonly string IOSN_3DS_CAMERA = examplePINVOKE.IOSN_3DS_CAMERA_get();
  public static readonly string IOSN_3DS_AMBIENT_LIGHT = examplePINVOKE.IOSN_3DS_AMBIENT_LIGHT_get();
  public static readonly string IOSN_3DS_RESCALING = examplePINVOKE.IOSN_3DS_RESCALING_get();
  public static readonly string IOSN_3DS_FILTER = examplePINVOKE.IOSN_3DS_FILTER_get();
  public static readonly string IOSN_3DS_SMOOTHGROUP = examplePINVOKE.IOSN_3DS_SMOOTHGROUP_get();
  public static readonly string IOSN_3DS_TAKE_NAME = examplePINVOKE.IOSN_3DS_TAKE_NAME_get();
  public static readonly string IOSN_3DS_TEXUVBYPOLY = examplePINVOKE.IOSN_3DS_TEXUVBYPOLY_get();
  public static readonly string IOSN_ZOOMEXTENTS = examplePINVOKE.IOSN_ZOOMEXTENTS_get();
  public static readonly string IOSN_GLOBAL_AMBIENT_COLOR = examplePINVOKE.IOSN_GLOBAL_AMBIENT_COLOR_get();
  public static readonly string IOSN_EDGE_ORIENTATION = examplePINVOKE.IOSN_EDGE_ORIENTATION_get();
  public static readonly string IOSN_VERSIONS_UI_ALIAS = examplePINVOKE.IOSN_VERSIONS_UI_ALIAS_get();
  public static readonly string IOSN_VERSIONS_COMP_DESCRIPTIONS = examplePINVOKE.IOSN_VERSIONS_COMP_DESCRIPTIONS_get();
  public static readonly string IOSN_MODEL_COUNT = examplePINVOKE.IOSN_MODEL_COUNT_get();
  public static readonly string IOSN_DEVICE_COUNT = examplePINVOKE.IOSN_DEVICE_COUNT_get();
  public static readonly string IOSN_CHARACTER_COUNT = examplePINVOKE.IOSN_CHARACTER_COUNT_get();
  public static readonly string IOSN_ACTOR_COUNT = examplePINVOKE.IOSN_ACTOR_COUNT_get();
  public static readonly string IOSN_CONSTRAINT_COUNT = examplePINVOKE.IOSN_CONSTRAINT_COUNT_get();
  public static readonly string IOSN_MEDIA_COUNT = examplePINVOKE.IOSN_MEDIA_COUNT_get();
  public static readonly string IOSN_TEMPLATE = examplePINVOKE.IOSN_TEMPLATE_get();
  public static readonly string IOSN_PIVOT = examplePINVOKE.IOSN_PIVOT_get();
  public static readonly string IOSN_GLOBAL_SETTINGS = examplePINVOKE.IOSN_GLOBAL_SETTINGS_get();
  public static readonly string IOSN_MERGE_LAYER_AND_TIMEWARP = examplePINVOKE.IOSN_MERGE_LAYER_AND_TIMEWARP_get();
  public static readonly string IOSN_GOBO = examplePINVOKE.IOSN_GOBO_get();
  public static readonly string IOSN_LINK = examplePINVOKE.IOSN_LINK_get();
  public static readonly string IOSN_MATERIAL = examplePINVOKE.IOSN_MATERIAL_get();
  public static readonly string IOSN_TEXTURE = examplePINVOKE.IOSN_TEXTURE_get();
  public static readonly string IOSN_MODEL = examplePINVOKE.IOSN_MODEL_get();
  public static readonly string IOSN_EMBEDDED = examplePINVOKE.IOSN_EMBEDDED_get();
  public static readonly string IOSN_PASSWORD = examplePINVOKE.IOSN_PASSWORD_get();
  public static readonly string IOSN_PASSWORD_ENABLE = examplePINVOKE.IOSN_PASSWORD_ENABLE_get();
  public static readonly string IOSN_CURRENT_TAKE_NAME = examplePINVOKE.IOSN_CURRENT_TAKE_NAME_get();
  public static readonly string IOSN_COLLAPSE_EXTERNALS = examplePINVOKE.IOSN_COLLAPSE_EXTERNALS_get();
  public static readonly string IOSN_COMPRESS_ARRAYS = examplePINVOKE.IOSN_COMPRESS_ARRAYS_get();
  public static readonly string IOSN_COMPRESS_LEVEL = examplePINVOKE.IOSN_COMPRESS_LEVEL_get();
  public static readonly string IOSN_COMPRESS_MINSIZE = examplePINVOKE.IOSN_COMPRESS_MINSIZE_get();
  public static readonly string IOSN_EMBEDDED_PROPERTIES_SKIP = examplePINVOKE.IOSN_EMBEDDED_PROPERTIES_SKIP_get();
  public static readonly string IOSN_EXPORT_FILE_VERSION = examplePINVOKE.IOSN_EXPORT_FILE_VERSION_get();
  public static readonly string IOSN_SHOW_UI_WARNING = examplePINVOKE.IOSN_SHOW_UI_WARNING_get();
  public static readonly string IOSN_ADD_MATERIAL_TO_EDIT = examplePINVOKE.IOSN_ADD_MATERIAL_TO_EDIT_get();
  public static readonly string IOSN_ENABLE_TEX_DISPLAY = examplePINVOKE.IOSN_ENABLE_TEX_DISPLAY_get();
  public static readonly string IOSN_PREFERED_ENVELOPPE_SYSTEM = examplePINVOKE.IOSN_PREFERED_ENVELOPPE_SYSTEM_get();
  public static readonly string IOSN_FIRST_TIME_RUN_NOTICE = examplePINVOKE.IOSN_FIRST_TIME_RUN_NOTICE_get();
  public static readonly string IOSN_EXTRACT_EMBEDDED_DATA = examplePINVOKE.IOSN_EXTRACT_EMBEDDED_DATA_get();
  public static readonly string IOSN_USETMPFILEPERIPHERAL = examplePINVOKE.IOSN_USETMPFILEPERIPHERAL_get();
  public static readonly string IOSN_CONSTRUCTIONHISTORY = examplePINVOKE.IOSN_CONSTRUCTIONHISTORY_get();
  public static readonly string IMP_PRESETS = examplePINVOKE.IMP_PRESETS_get();
  public static readonly string IMP_STATISTICS = examplePINVOKE.IMP_STATISTICS_get();
  public static readonly string IMP_STATISTICS_GRP = examplePINVOKE.IMP_STATISTICS_GRP_get();
  public static readonly string IMP_PRESETS_GRP = examplePINVOKE.IMP_PRESETS_GRP_get();
  public static readonly string IMP_PLUGIN_GRP = examplePINVOKE.IMP_PLUGIN_GRP_get();
  public static readonly string IMP_INCLUDE_GRP = examplePINVOKE.IMP_INCLUDE_GRP_get();
  public static readonly string IMP_ADV_OPT_GRP = examplePINVOKE.IMP_ADV_OPT_GRP_get();
  public static readonly string IMP_FBX_EXT_SDK_GRP = examplePINVOKE.IMP_FBX_EXT_SDK_GRP_get();
  public static readonly string IMP_FIRST_TIME_RUN_NOTICE_GRP = examplePINVOKE.IMP_FIRST_TIME_RUN_NOTICE_GRP_get();
  public static readonly string IMP_INFORMATION_GRP = examplePINVOKE.IMP_INFORMATION_GRP_get();
  public static readonly string IMP_FIRST_TIME_RUN_NOTICE = examplePINVOKE.IMP_FIRST_TIME_RUN_NOTICE_get();
  public static readonly string IMP_GEOMETRY = examplePINVOKE.IMP_GEOMETRY_get();
  public static readonly string IMP_ANIMATION = examplePINVOKE.IMP_ANIMATION_get();
  public static readonly string IMP_SETLOCKEDATTRIB = examplePINVOKE.IMP_SETLOCKEDATTRIB_get();
  public static readonly string IMP_MERGE_MODE = examplePINVOKE.IMP_MERGE_MODE_get();
  public static readonly string IMP_MERGE_MODE_DESCRIPTION = examplePINVOKE.IMP_MERGE_MODE_DESCRIPTION_get();
  public static readonly string IMP_ONE_CLICK_MERGE = examplePINVOKE.IMP_ONE_CLICK_MERGE_get();
  public static readonly string IMP_ONE_CLICK_MERGE_TEXTURE = examplePINVOKE.IMP_ONE_CLICK_MERGE_TEXTURE_get();
  public static readonly string IMP_ADD_MATERIAL_TO_EDIT = examplePINVOKE.IMP_ADD_MATERIAL_TO_EDIT_get();
  public static readonly string IMP_ENABLE_TEX_DISPLAY = examplePINVOKE.IMP_ENABLE_TEX_DISPLAY_get();
  public static readonly string IMP_PREFERED_ENVELOPPE_SYSTEM = examplePINVOKE.IMP_PREFERED_ENVELOPPE_SYSTEM_get();
  public static readonly string IMP_CAMERA_GRP = examplePINVOKE.IMP_CAMERA_GRP_get();
  public static readonly string IMP_LIGHT_GRP = examplePINVOKE.IMP_LIGHT_GRP_get();
  public static readonly string IMP_EMBEDDED_GRP = examplePINVOKE.IMP_EMBEDDED_GRP_get();
  public static readonly string IMP_EXTRACT_FOLDER = examplePINVOKE.IMP_EXTRACT_FOLDER_get();
  public static readonly string IMP_LIGHT = examplePINVOKE.IMP_LIGHT_get();
  public static readonly string IMP_ENVIRONMENT = examplePINVOKE.IMP_ENVIRONMENT_get();
  public static readonly string IMP_CAMERA = examplePINVOKE.IMP_CAMERA_get();
  public static readonly string IMP_VIEW_CUBE = examplePINVOKE.IMP_VIEW_CUBE_get();
  public static readonly string IMP_ZOOMEXTENTS = examplePINVOKE.IMP_ZOOMEXTENTS_get();
  public static readonly string IMP_GLOBAL_AMBIENT_COLOR = examplePINVOKE.IMP_GLOBAL_AMBIENT_COLOR_get();
  public static readonly string IMP_CURVEFILTERS = examplePINVOKE.IMP_CURVEFILTERS_get();
  public static readonly string IMP_SAMPLINGPANEL = examplePINVOKE.IMP_SAMPLINGPANEL_get();
  public static readonly string IMP_DEFORMATION = examplePINVOKE.IMP_DEFORMATION_get();
  public static readonly string IMP_BONE = examplePINVOKE.IMP_BONE_get();
  public static readonly string IMP_ATTENUATIONASINTENSITYCURVE = examplePINVOKE.IMP_ATTENUATIONASINTENSITYCURVE_get();
  public static readonly string IMP_EXTRA_GRP = examplePINVOKE.IMP_EXTRA_GRP_get();
  public static readonly string IMP_TAKE = examplePINVOKE.IMP_TAKE_get();
  public static readonly string IMP_KEEPFRAMERATE = examplePINVOKE.IMP_KEEPFRAMERATE_get();
  public static readonly string IMP_TIMELINE = examplePINVOKE.IMP_TIMELINE_get();
  public static readonly string IMP_TIMELINE_SPAN = examplePINVOKE.IMP_TIMELINE_SPAN_get();
  public static readonly string IMP_BAKEANIMATIONLAYERS = examplePINVOKE.IMP_BAKEANIMATIONLAYERS_get();
  public static readonly string IMP_MARKERS = examplePINVOKE.IMP_MARKERS_get();
  public static readonly string IMP_QUATERNION = examplePINVOKE.IMP_QUATERNION_get();
  public static readonly string IMP_PROTECTDRIVENKEYS = examplePINVOKE.IMP_PROTECTDRIVENKEYS_get();
  public static readonly string IMP_DEFORMNULLSASJOINTS = examplePINVOKE.IMP_DEFORMNULLSASJOINTS_get();
  public static readonly string IMP_NULLSTOPIVOT = examplePINVOKE.IMP_NULLSTOPIVOT_get();
  public static readonly string IMP_POINTCACHE = examplePINVOKE.IMP_POINTCACHE_get();
  public static readonly string IMP_SHAPEANIMATION = examplePINVOKE.IMP_SHAPEANIMATION_get();
  public static readonly string IMP_CONSTRAINTS_GRP = examplePINVOKE.IMP_CONSTRAINTS_GRP_get();
  public static readonly string IMP_CONSTRAINT = examplePINVOKE.IMP_CONSTRAINT_get();
  public static readonly string IMP_CHARACTER = examplePINVOKE.IMP_CHARACTER_get();
  public static readonly string IMP_CHARACTER_AS_MAYA_HIK = examplePINVOKE.IMP_CHARACTER_AS_MAYA_HIK_get();
  public static readonly string IMP_CHARACTER_TYPE = examplePINVOKE.IMP_CHARACTER_TYPE_get();
  public static readonly string IMP_SAMPLINGRATESELECTOR = examplePINVOKE.IMP_SAMPLINGRATESELECTOR_get();
  public static readonly string IMP_SAMPLINGRATE = examplePINVOKE.IMP_SAMPLINGRATE_get();
  public static readonly string IMP_UNITS_GRP = examplePINVOKE.IMP_UNITS_GRP_get();
  public static readonly string IMP_AXISCONV_GRP = examplePINVOKE.IMP_AXISCONV_GRP_get();
  public static readonly string IMP_CACHE_GRP = examplePINVOKE.IMP_CACHE_GRP_get();
  public static readonly string IMP_UI = examplePINVOKE.IMP_UI_get();
  public static readonly string IMP_FILEFORMAT = examplePINVOKE.IMP_FILEFORMAT_get();
  public static readonly string IMP_PERF_GRP = examplePINVOKE.IMP_PERF_GRP_get();
  public static readonly string IMP_REMOVEBADPOLYSFROMMESH = examplePINVOKE.IMP_REMOVEBADPOLYSFROMMESH_get();
  public static readonly string IMP_META_DATA = examplePINVOKE.IMP_META_DATA_get();
  public static readonly string IMP_FBX_EXTENTIONS_SDK_WARNING = examplePINVOKE.IMP_FBX_EXTENTIONS_SDK_WARNING_get();
  public static readonly string IMP_SCALECONVERSION = examplePINVOKE.IMP_SCALECONVERSION_get();
  public static readonly string IMP_MASTERSCALE = examplePINVOKE.IMP_MASTERSCALE_get();
  public static readonly string IMP_UNITS_SCALE = examplePINVOKE.IMP_UNITS_SCALE_get();
  public static readonly string IMP_DYN_SCALE_CONVERSION = examplePINVOKE.IMP_DYN_SCALE_CONVERSION_get();
  public static readonly string IMP_UNITSELECTOR = examplePINVOKE.IMP_UNITSELECTOR_get();
  public static readonly string IMP_TOTAL_UNITS_SCALE_TB = examplePINVOKE.IMP_TOTAL_UNITS_SCALE_TB_get();
  public static readonly string IMP_SHOW_UI_MODE = examplePINVOKE.IMP_SHOW_UI_MODE_get();
  public static readonly string IMP_SHOW_UI_WARNING = examplePINVOKE.IMP_SHOW_UI_WARNING_get();
  public static readonly string IMP_SHOW_WARNINGS_MANAGER = examplePINVOKE.IMP_SHOW_WARNINGS_MANAGER_get();
  public static readonly string IMP_GENERATE_LOG_DATA = examplePINVOKE.IMP_GENERATE_LOG_DATA_get();
  public static readonly string IMP_PLUGIN_VERSIONS_URL = examplePINVOKE.IMP_PLUGIN_VERSIONS_URL_get();
  public static readonly string IMP_DXF = examplePINVOKE.IMP_DXF_get();
  public static readonly string IMP_FBX = examplePINVOKE.IMP_FBX_get();
  public static readonly string IMP_OBJ = examplePINVOKE.IMP_OBJ_get();
  public static readonly string IMP_3DS = examplePINVOKE.IMP_3DS_get();
  public static readonly string IMP_MOTION_BASE = examplePINVOKE.IMP_MOTION_BASE_get();
  public static readonly string IMP_BIOVISION_BVH = examplePINVOKE.IMP_BIOVISION_BVH_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR = examplePINVOKE.IMP_MOTIONANALYSIS_HTR_get();
  public static readonly string IMP_ACCLAIM_ASF = examplePINVOKE.IMP_ACCLAIM_ASF_get();
  public static readonly string IMP_ACCLAIM_AMC = examplePINVOKE.IMP_ACCLAIM_AMC_get();
  public static readonly string IMP_UNLOCK_NORMALS = examplePINVOKE.IMP_UNLOCK_NORMALS_get();
  public static readonly string IMP_CREASE = examplePINVOKE.IMP_CREASE_get();
  public static readonly string IMP_SMOOTHING_GROUPS = examplePINVOKE.IMP_SMOOTHING_GROUPS_get();
  public static readonly string IMP_HARDEDGES = examplePINVOKE.IMP_HARDEDGES_get();
  public static readonly string IMP_BLINDDATA = examplePINVOKE.IMP_BLINDDATA_get();
  public static readonly string IMP_BONE_WIDTHHEIGHTLOCK = examplePINVOKE.IMP_BONE_WIDTHHEIGHTLOCK_get();
  public static readonly string IMP_BONEASDUMMY = examplePINVOKE.IMP_BONEASDUMMY_get();
  public static readonly string IMP_BONEMAX4BONEWIDTH = examplePINVOKE.IMP_BONEMAX4BONEWIDTH_get();
  public static readonly string IMP_BONEMAX4BONEHEIGHT = examplePINVOKE.IMP_BONEMAX4BONEHEIGHT_get();
  public static readonly string IMP_BONEMAX4BONETAPER = examplePINVOKE.IMP_BONEMAX4BONETAPER_get();
  public static readonly string IMP_SHAPE = examplePINVOKE.IMP_SHAPE_get();
  public static readonly string IMP_SKINS = examplePINVOKE.IMP_SKINS_get();
  public static readonly string IMP_USEMATRIXFROMPOSE = examplePINVOKE.IMP_USEMATRIXFROMPOSE_get();
  public static readonly string IMP_FORCEWEIGHTNORMALIZE = examplePINVOKE.IMP_FORCEWEIGHTNORMALIZE_get();
  public static readonly string IMP_APPLYCSTKEYRED = examplePINVOKE.IMP_APPLYCSTKEYRED_get();
  public static readonly string IMP_CSTKEYREDTPREC = examplePINVOKE.IMP_CSTKEYREDTPREC_get();
  public static readonly string IMP_CSTKEYREDRPREC = examplePINVOKE.IMP_CSTKEYREDRPREC_get();
  public static readonly string IMP_CSTKEYREDSPREC = examplePINVOKE.IMP_CSTKEYREDSPREC_get();
  public static readonly string IMP_CSTKEYREDOPREC = examplePINVOKE.IMP_CSTKEYREDOPREC_get();
  public static readonly string IMP_AUTOTANGENTSONLY = examplePINVOKE.IMP_AUTOTANGENTSONLY_get();
  public static readonly string IMP_APPLYKEYREDUCE = examplePINVOKE.IMP_APPLYKEYREDUCE_get();
  public static readonly string IMP_KEYREDUCEPREC = examplePINVOKE.IMP_KEYREDUCEPREC_get();
  public static readonly string IMP_APPLYKEYSONFRM = examplePINVOKE.IMP_APPLYKEYSONFRM_get();
  public static readonly string IMP_APPLYKEYSYNC = examplePINVOKE.IMP_APPLYKEYSYNC_get();
  public static readonly string IMP_APPLYUNROLL = examplePINVOKE.IMP_APPLYUNROLL_get();
  public static readonly string IMP_UNROLLPREC = examplePINVOKE.IMP_UNROLLPREC_get();
  public static readonly string IMP_UNROLLPATH = examplePINVOKE.IMP_UNROLLPATH_get();
  public static readonly string IMP_UNROLLFORCEAUTO = examplePINVOKE.IMP_UNROLLFORCEAUTO_get();
  public static readonly string IMP_UP_AXIS = examplePINVOKE.IMP_UP_AXIS_get();
  public static readonly string IMP_UP_AXIS_MAX = examplePINVOKE.IMP_UP_AXIS_MAX_get();
  public static readonly string IMP_ZUPROTATION_MAX = examplePINVOKE.IMP_ZUPROTATION_MAX_get();
  public static readonly string IMP_AXISCONVERSION = examplePINVOKE.IMP_AXISCONVERSION_get();
  public static readonly string IMP_AUTO_AXIS = examplePINVOKE.IMP_AUTO_AXIS_get();
  public static readonly string IMP_FILE_UP_AXIS = examplePINVOKE.IMP_FILE_UP_AXIS_get();
  public static readonly string IMP_CACHE_SIZE = examplePINVOKE.IMP_CACHE_SIZE_get();
  public static readonly string IMP_PLUGIN_UI_WIDTH = examplePINVOKE.IMP_PLUGIN_UI_WIDTH_get();
  public static readonly string IMP_PLUGIN_UI_HEIGHT = examplePINVOKE.IMP_PLUGIN_UI_HEIGHT_get();
  public static readonly string IMP_PRESET_SELECTED = examplePINVOKE.IMP_PRESET_SELECTED_get();
  public static readonly string IMP_UIL = examplePINVOKE.IMP_UIL_get();
  public static readonly string IMP_PLUGIN_PRODUCT_FAMILY = examplePINVOKE.IMP_PLUGIN_PRODUCT_FAMILY_get();
  public static readonly string IMP_PLUGIN_UI_XPOS = examplePINVOKE.IMP_PLUGIN_UI_XPOS_get();
  public static readonly string IMP_PLUGIN_UI_YPOS = examplePINVOKE.IMP_PLUGIN_UI_YPOS_get();
  public static readonly string IMP_DXF_WELD_VERTICES = examplePINVOKE.IMP_DXF_WELD_VERTICES_get();
  public static readonly string IMP_DXF_OBJECT_DERIVATION = examplePINVOKE.IMP_DXF_OBJECT_DERIVATION_get();
  public static readonly string IMP_DXF_REFERENCE_NODE = examplePINVOKE.IMP_DXF_REFERENCE_NODE_get();
  public static readonly string IMP_OBJ_REFERENCE_NODE = examplePINVOKE.IMP_OBJ_REFERENCE_NODE_get();
  public static readonly string IMP_3DS_REFERENCENODE = examplePINVOKE.IMP_3DS_REFERENCENODE_get();
  public static readonly string IMP_3DS_TEXTURE = examplePINVOKE.IMP_3DS_TEXTURE_get();
  public static readonly string IMP_3DS_MATERIAL = examplePINVOKE.IMP_3DS_MATERIAL_get();
  public static readonly string IMP_3DS_ANIMATION = examplePINVOKE.IMP_3DS_ANIMATION_get();
  public static readonly string IMP_3DS_MESH = examplePINVOKE.IMP_3DS_MESH_get();
  public static readonly string IMP_3DS_LIGHT = examplePINVOKE.IMP_3DS_LIGHT_get();
  public static readonly string IMP_3DS_CAMERA = examplePINVOKE.IMP_3DS_CAMERA_get();
  public static readonly string IMP_3DS_AMBIENT_LIGHT = examplePINVOKE.IMP_3DS_AMBIENT_LIGHT_get();
  public static readonly string IMP_3DS_RESCALING = examplePINVOKE.IMP_3DS_RESCALING_get();
  public static readonly string IMP_3DS_FILTER = examplePINVOKE.IMP_3DS_FILTER_get();
  public static readonly string IMP_3DS_SMOOTHGROUP = examplePINVOKE.IMP_3DS_SMOOTHGROUP_get();
  public static readonly string IMP_FBX_MODEL_COUNT = examplePINVOKE.IMP_FBX_MODEL_COUNT_get();
  public static readonly string IMP_FBX_DEVICE_COUNT = examplePINVOKE.IMP_FBX_DEVICE_COUNT_get();
  public static readonly string IMP_FBX_CHARACTER_COUNT = examplePINVOKE.IMP_FBX_CHARACTER_COUNT_get();
  public static readonly string IMP_FBX_ACTOR_COUNT = examplePINVOKE.IMP_FBX_ACTOR_COUNT_get();
  public static readonly string IMP_FBX_CONSTRAINT_COUNT = examplePINVOKE.IMP_FBX_CONSTRAINT_COUNT_get();
  public static readonly string IMP_FBX_MEDIA_COUNT = examplePINVOKE.IMP_FBX_MEDIA_COUNT_get();
  public static readonly string IMP_FBX_TEMPLATE = examplePINVOKE.IMP_FBX_TEMPLATE_get();
  public static readonly string IMP_FBX_PIVOT = examplePINVOKE.IMP_FBX_PIVOT_get();
  public static readonly string IMP_FBX_GLOBAL_SETTINGS = examplePINVOKE.IMP_FBX_GLOBAL_SETTINGS_get();
  public static readonly string IMP_FBX_CHARACTER = examplePINVOKE.IMP_FBX_CHARACTER_get();
  public static readonly string IMP_FBX_CONSTRAINT = examplePINVOKE.IMP_FBX_CONSTRAINT_get();
  public static readonly string IMP_FBX_MERGE_LAYER_AND_TIMEWARP = examplePINVOKE.IMP_FBX_MERGE_LAYER_AND_TIMEWARP_get();
  public static readonly string IMP_FBX_GOBO = examplePINVOKE.IMP_FBX_GOBO_get();
  public static readonly string IMP_FBX_SHAPE = examplePINVOKE.IMP_FBX_SHAPE_get();
  public static readonly string IMP_FBX_LINK = examplePINVOKE.IMP_FBX_LINK_get();
  public static readonly string IMP_FBX_MATERIAL = examplePINVOKE.IMP_FBX_MATERIAL_get();
  public static readonly string IMP_FBX_TEXTURE = examplePINVOKE.IMP_FBX_TEXTURE_get();
  public static readonly string IMP_FBX_MODEL = examplePINVOKE.IMP_FBX_MODEL_get();
  public static readonly string IMP_FBX_ANIMATION = examplePINVOKE.IMP_FBX_ANIMATION_get();
  public static readonly string IMP_FBX_PASSWORD = examplePINVOKE.IMP_FBX_PASSWORD_get();
  public static readonly string IMP_FBX_PASSWORD_ENABLE = examplePINVOKE.IMP_FBX_PASSWORD_ENABLE_get();
  public static readonly string IMP_FBX_CURRENT_TAKE_NAME = examplePINVOKE.IMP_FBX_CURRENT_TAKE_NAME_get();
  public static readonly string IMP_FBX_EXTRACT_EMBEDDED_DATA = examplePINVOKE.IMP_FBX_EXTRACT_EMBEDDED_DATA_get();
  public static readonly string IMP_BUTTON_WEB_UPDATE = examplePINVOKE.IMP_BUTTON_WEB_UPDATE_get();
  public static readonly string IMP_PI_VERSION = examplePINVOKE.IMP_PI_VERSION_get();
  public static readonly string EXP_STATISTICS_GRP = examplePINVOKE.EXP_STATISTICS_GRP_get();
  public static readonly string EXP_ADV_OPT_GRP = examplePINVOKE.EXP_ADV_OPT_GRP_get();
  public static readonly string EXP_PRESETS_GRP = examplePINVOKE.EXP_PRESETS_GRP_get();
  public static readonly string EXP_STATISTICS = examplePINVOKE.EXP_STATISTICS_get();
  public static readonly string EXP_FIRST_TIME_RUN_NOTICE_GRP = examplePINVOKE.EXP_FIRST_TIME_RUN_NOTICE_GRP_get();
  public static readonly string EXP_INFORMATION_GRP = examplePINVOKE.EXP_INFORMATION_GRP_get();
  public static readonly string EXP_PLUGIN_GRP = examplePINVOKE.EXP_PLUGIN_GRP_get();
  public static readonly string EXP_INCLUDE_GRP = examplePINVOKE.EXP_INCLUDE_GRP_get();
  public static readonly string EXP_FBX_EXT_SDK_GRP = examplePINVOKE.EXP_FBX_EXT_SDK_GRP_get();
  public static readonly string EXP_UNITS_GRP = examplePINVOKE.EXP_UNITS_GRP_get();
  public static readonly string EXP_FILEFORMAT = examplePINVOKE.EXP_FILEFORMAT_get();
  public static readonly string EXP_AXISCONV_GRP = examplePINVOKE.EXP_AXISCONV_GRP_get();
  public static readonly string EXP_CACHE_GRP = examplePINVOKE.EXP_CACHE_GRP_get();
  public static readonly string EXP_UI = examplePINVOKE.EXP_UI_get();
  public static readonly string EXP_FBX_EXTENTIONS_SDK_WARNING = examplePINVOKE.EXP_FBX_EXTENTIONS_SDK_WARNING_get();
  public static readonly string EXP_FIRST_TIME_RUN_NOTICE = examplePINVOKE.EXP_FIRST_TIME_RUN_NOTICE_get();
  public static readonly string EXP_SCALEFACTOR = examplePINVOKE.EXP_SCALEFACTOR_get();
  public static readonly string EXP_AXISCONVERSIONMETHOD = examplePINVOKE.EXP_AXISCONVERSIONMETHOD_get();
  public static readonly string EXP_UPAXIS = examplePINVOKE.EXP_UPAXIS_get();
  public static readonly string EXP_UNITS_SCALE = examplePINVOKE.EXP_UNITS_SCALE_get();
  public static readonly string EXP_MASTERSCALE = examplePINVOKE.EXP_MASTERSCALE_get();
  public static readonly string EXP_DYN_SCALE_CONVERSION = examplePINVOKE.EXP_DYN_SCALE_CONVERSION_get();
  public static readonly string EXP_UNITSELECTOR = examplePINVOKE.EXP_UNITSELECTOR_get();
  public static readonly string EXP_TOTAL_UNITS_SCALE_TB = examplePINVOKE.EXP_TOTAL_UNITS_SCALE_TB_get();
  public static readonly string EXP_SHOW_UI_MODE = examplePINVOKE.EXP_SHOW_UI_MODE_get();
  public static readonly string EXP_SHOW_UI_WARNING = examplePINVOKE.EXP_SHOW_UI_WARNING_get();
  public static readonly string EXP_SHOW_WARNINGS_MANAGER = examplePINVOKE.EXP_SHOW_WARNINGS_MANAGER_get();
  public static readonly string EXP_GENERATE_LOG_DATA = examplePINVOKE.EXP_GENERATE_LOG_DATA_get();
  public static readonly string EXP_PLUGIN_VERSIONS_URL = examplePINVOKE.EXP_PLUGIN_VERSIONS_URL_get();
  public static readonly string EXP_PRESETS = examplePINVOKE.EXP_PRESETS_get();
  public static readonly string EXP_CAMERA_GRP = examplePINVOKE.EXP_CAMERA_GRP_get();
  public static readonly string EXP_LIGHT_GRP = examplePINVOKE.EXP_LIGHT_GRP_get();
  public static readonly string EXP_GEOMETRY = examplePINVOKE.EXP_GEOMETRY_get();
  public static readonly string EXP_ANIMATION = examplePINVOKE.EXP_ANIMATION_get();
  public static readonly string EXP_PIVOTTONULLS = examplePINVOKE.EXP_PIVOTTONULLS_get();
  public static readonly string EXP_LIGHT = examplePINVOKE.EXP_LIGHT_get();
  public static readonly string EXP_LIGHTATTENUATION = examplePINVOKE.EXP_LIGHTATTENUATION_get();
  public static readonly string EXP_ENVIRONMENT = examplePINVOKE.EXP_ENVIRONMENT_get();
  public static readonly string EXP_CAMERA = examplePINVOKE.EXP_CAMERA_get();
  public static readonly string EXP_BINDPOSE = examplePINVOKE.EXP_BINDPOSE_get();
  public static readonly string EXP_SELECTIONONLY = examplePINVOKE.EXP_SELECTIONONLY_get();
  public static readonly string EXP_INPUTCONNECTIONS_GRP = examplePINVOKE.EXP_INPUTCONNECTIONS_GRP_get();
  public static readonly string EXP_INPUTCONNECTIONS = examplePINVOKE.EXP_INPUTCONNECTIONS_get();
  public static readonly string EXP_BYPASSRRSINHERITANCE = examplePINVOKE.EXP_BYPASSRRSINHERITANCE_get();
  public static readonly string EXP_EMBEDTEXTURE_GRP = examplePINVOKE.EXP_EMBEDTEXTURE_GRP_get();
  public static readonly string EXP_EMBEDTEXTURE = examplePINVOKE.EXP_EMBEDTEXTURE_get();
  public static readonly string EXP_CONVERTTOTIFF = examplePINVOKE.EXP_CONVERTTOTIFF_get();
  public static readonly string EXP_CURVEFILTERS = examplePINVOKE.EXP_CURVEFILTERS_get();
  public static readonly string EXP_DEFORMATION = examplePINVOKE.EXP_DEFORMATION_get();
  public static readonly string EXP_BAKECOMPLEXANIMATION = examplePINVOKE.EXP_BAKECOMPLEXANIMATION_get();
  public static readonly string EXP_BONE = examplePINVOKE.EXP_BONE_get();
  public static readonly string EXP_POINTCACHE = examplePINVOKE.EXP_POINTCACHE_get();
  public static readonly string EXP_SMOOTHKEYASUSER = examplePINVOKE.EXP_SMOOTHKEYASUSER_get();
  public static readonly string EXP_EXTRA_GRP = examplePINVOKE.EXP_EXTRA_GRP_get();
  public static readonly string EXP_REMOVE_SINGLE_KEY = examplePINVOKE.EXP_REMOVE_SINGLE_KEY_get();
  public static readonly string EXP_NAMETAKE = examplePINVOKE.EXP_NAMETAKE_get();
  public static readonly string EXP_QUATERNION = examplePINVOKE.EXP_QUATERNION_get();
  public static readonly string EXP_CONSTRAINTS_GRP = examplePINVOKE.EXP_CONSTRAINTS_GRP_get();
  public static readonly string EXP_CONSTRAINT = examplePINVOKE.EXP_CONSTRAINT_get();
  public static readonly string EXP_CHARACTER = examplePINVOKE.EXP_CHARACTER_get();
  public static readonly string EXP_MRCUSTOMATTRIBUTES = examplePINVOKE.EXP_MRCUSTOMATTRIBUTES_get();
  public static readonly string EXP_MESHPRIMITIVE = examplePINVOKE.EXP_MESHPRIMITIVE_get();
  public static readonly string EXP_MESHTRIANGLE = examplePINVOKE.EXP_MESHTRIANGLE_get();
  public static readonly string EXP_MESHPOLY = examplePINVOKE.EXP_MESHPOLY_get();
  public static readonly string EXP_NURB = examplePINVOKE.EXP_NURB_get();
  public static readonly string EXP_PATCH = examplePINVOKE.EXP_PATCH_get();
  public static readonly string EXP_BIP2FBX = examplePINVOKE.EXP_BIP2FBX_get();
  public static readonly string EXP_GEOMNORMALPERPOLY = examplePINVOKE.EXP_GEOMNORMALPERPOLY_get();
  public static readonly string EXP_TANGENTSPACE = examplePINVOKE.EXP_TANGENTSPACE_get();
  public static readonly string EXP_SMOOTHMESH = examplePINVOKE.EXP_SMOOTHMESH_get();
  public static readonly string EXP_SELECTIONSET = examplePINVOKE.EXP_SELECTIONSET_get();
  public static readonly string EXP_FINESTSUBDIVLEVEL = examplePINVOKE.EXP_FINESTSUBDIVLEVEL_get();
  public static readonly string EXP_MAXBONEASBONE = examplePINVOKE.EXP_MAXBONEASBONE_get();
  public static readonly string EXP_MAXNURBSSTEP = examplePINVOKE.EXP_MAXNURBSSTEP_get();
  public static readonly string EXP_CREASE = examplePINVOKE.EXP_CREASE_get();
  public static readonly string EXP_BLINDDATA = examplePINVOKE.EXP_BLINDDATA_get();
  public static readonly string EXP_NURBSSURFACEAS = examplePINVOKE.EXP_NURBSSURFACEAS_get();
  public static readonly string EXP_SMOOTHING_GROUPS = examplePINVOKE.EXP_SMOOTHING_GROUPS_get();
  public static readonly string EXP_HARDEDGES = examplePINVOKE.EXP_HARDEDGES_get();
  public static readonly string EXP_ANIMATIONONLY = examplePINVOKE.EXP_ANIMATIONONLY_get();
  public static readonly string EXP_INSTANCES = examplePINVOKE.EXP_INSTANCES_get();
  public static readonly string EXP_CONTAINEROBJECTS = examplePINVOKE.EXP_CONTAINEROBJECTS_get();
  public static readonly string EXP_TRIANGULATE = examplePINVOKE.EXP_TRIANGULATE_get();
  public static readonly string EXP_EDGE_ORIENTATION = examplePINVOKE.EXP_EDGE_ORIENTATION_get();
  public static readonly string EXP_SELECTIONSETNAMEASPOINTCACHE = examplePINVOKE.EXP_SELECTIONSETNAMEASPOINTCACHE_get();
  public static readonly string EXP_GEOMETRYMESHPRIMITIVEAS = examplePINVOKE.EXP_GEOMETRYMESHPRIMITIVEAS_get();
  public static readonly string EXP_GEOMETRYMESHTRIANGLEAS = examplePINVOKE.EXP_GEOMETRYMESHTRIANGLEAS_get();
  public static readonly string EXP_GEOMETRYMESHPOLYAS = examplePINVOKE.EXP_GEOMETRYMESHPOLYAS_get();
  public static readonly string EXP_GEOMETRYNURBSAS = examplePINVOKE.EXP_GEOMETRYNURBSAS_get();
  public static readonly string EXP_GEOMETRYPATCHAS = examplePINVOKE.EXP_GEOMETRYPATCHAS_get();
  public static readonly string EXP_BAKEFRAMESTART = examplePINVOKE.EXP_BAKEFRAMESTART_get();
  public static readonly string EXP_BAKEFRAMEEND = examplePINVOKE.EXP_BAKEFRAMEEND_get();
  public static readonly string EXP_BAKEFRAMESTEP = examplePINVOKE.EXP_BAKEFRAMESTEP_get();
  public static readonly string EXP_BAKE_RESAMPLE_ANIMATION_CURVES = examplePINVOKE.EXP_BAKE_RESAMPLE_ANIMATION_CURVES_get();
  public static readonly string EXP_BAKEFRAMESTARTNORESET = examplePINVOKE.EXP_BAKEFRAMESTARTNORESET_get();
  public static readonly string EXP_BAKEFRAMEENDNORESET = examplePINVOKE.EXP_BAKEFRAMEENDNORESET_get();
  public static readonly string EXP_BAKEFRAMESTEPNORESET = examplePINVOKE.EXP_BAKEFRAMESTEPNORESET_get();
  public static readonly string EXP_FBX = examplePINVOKE.EXP_FBX_get();
  public static readonly string EXP_DXF = examplePINVOKE.EXP_DXF_get();
  public static readonly string EXP_COLLADA = examplePINVOKE.EXP_COLLADA_get();
  public static readonly string EXP_OBJ = examplePINVOKE.EXP_OBJ_get();
  public static readonly string EXP_3DS = examplePINVOKE.EXP_3DS_get();
  public static readonly string EXP_MOTION_BASE = examplePINVOKE.EXP_MOTION_BASE_get();
  public static readonly string EXP_BIOVISION_BVH = examplePINVOKE.EXP_BIOVISION_BVH_get();
  public static readonly string EXP_ACCLAIM_ASF = examplePINVOKE.EXP_ACCLAIM_ASF_get();
  public static readonly string EXP_ACCLAIM_AMC = examplePINVOKE.EXP_ACCLAIM_AMC_get();
  public static readonly string EXP_ASCIIFBX = examplePINVOKE.EXP_ASCIIFBX_get();
  public static readonly string EXP_CACHE_SIZE = examplePINVOKE.EXP_CACHE_SIZE_get();
  public static readonly string EXP_SHAPE = examplePINVOKE.EXP_SHAPE_get();
  public static readonly string EXP_SKINS = examplePINVOKE.EXP_SKINS_get();
  public static readonly string EXP_APPLYCSTKEYRED = examplePINVOKE.EXP_APPLYCSTKEYRED_get();
  public static readonly string EXP_SAMPLINGRATE = examplePINVOKE.EXP_SAMPLINGRATE_get();
  public static readonly string EXP_CSTKEYREDTPREC = examplePINVOKE.EXP_CSTKEYREDTPREC_get();
  public static readonly string EXP_CSTKEYREDRPREC = examplePINVOKE.EXP_CSTKEYREDRPREC_get();
  public static readonly string EXP_CSTKEYREDSPREC = examplePINVOKE.EXP_CSTKEYREDSPREC_get();
  public static readonly string EXP_CSTKEYREDOPREC = examplePINVOKE.EXP_CSTKEYREDOPREC_get();
  public static readonly string EXP_AUTOTANGENTSONLY = examplePINVOKE.EXP_AUTOTANGENTSONLY_get();
  public static readonly string EXP_APPLYKEYREDUCE = examplePINVOKE.EXP_APPLYKEYREDUCE_get();
  public static readonly string EXP_KEYREDUCEPREC = examplePINVOKE.EXP_KEYREDUCEPREC_get();
  public static readonly string EXP_APPLYKEYSONFRM = examplePINVOKE.EXP_APPLYKEYSONFRM_get();
  public static readonly string EXP_APPLYKEYSYNC = examplePINVOKE.EXP_APPLYKEYSYNC_get();
  public static readonly string EXP_APPLYUNROLL = examplePINVOKE.EXP_APPLYUNROLL_get();
  public static readonly string EXP_UNROLLPREC = examplePINVOKE.EXP_UNROLLPREC_get();
  public static readonly string EXP_UNROLLPATH = examplePINVOKE.EXP_UNROLLPATH_get();
  public static readonly string EXP_UNROLLFORCEAUTO = examplePINVOKE.EXP_UNROLLFORCEAUTO_get();
  public static readonly string EXP_PLUGIN_UI_WIDTH = examplePINVOKE.EXP_PLUGIN_UI_WIDTH_get();
  public static readonly string EXP_PLUGIN_UI_HEIGHT = examplePINVOKE.EXP_PLUGIN_UI_HEIGHT_get();
  public static readonly string EXP_PRESET_SELECTED = examplePINVOKE.EXP_PRESET_SELECTED_get();
  public static readonly string EXP_UIL = examplePINVOKE.EXP_UIL_get();
  public static readonly string EXP_PLUGIN_PRODUCT_FAMILY = examplePINVOKE.EXP_PLUGIN_PRODUCT_FAMILY_get();
  public static readonly string EXP_PLUGIN_UI_XPOS = examplePINVOKE.EXP_PLUGIN_UI_XPOS_get();
  public static readonly string EXP_PLUGIN_UI_YPOS = examplePINVOKE.EXP_PLUGIN_UI_YPOS_get();
  public static readonly string EXP_BUTTON_WEB_UPDATE = examplePINVOKE.EXP_BUTTON_WEB_UPDATE_get();
  public static readonly string EXP_PI_VERSION = examplePINVOKE.EXP_PI_VERSION_get();
  public static readonly string EXP_BUTTON_EDIT = examplePINVOKE.EXP_BUTTON_EDIT_get();
  public static readonly string EXP_BUTTON_OK = examplePINVOKE.EXP_BUTTON_OK_get();
  public static readonly string EXP_BUTTON_CANCEL = examplePINVOKE.EXP_BUTTON_CANCEL_get();
  public static readonly string EXP_MENU_EDIT_PRESET = examplePINVOKE.EXP_MENU_EDIT_PRESET_get();
  public static readonly string EXP_MENU_SAVE_PRESET = examplePINVOKE.EXP_MENU_SAVE_PRESET_get();
  public static readonly string EXP_USETMPFILEPERIPHERAL = examplePINVOKE.EXP_USETMPFILEPERIPHERAL_get();
  public static readonly string EXP_CONSTRUCTIONHISTORY = examplePINVOKE.EXP_CONSTRUCTIONHISTORY_get();
  public static readonly string EXP_COLLADA_TRIANGULATE = examplePINVOKE.EXP_COLLADA_TRIANGULATE_get();
  public static readonly string EXP_COLLADA_SINGLEMATRIX = examplePINVOKE.EXP_COLLADA_SINGLEMATRIX_get();
  public static readonly string EXP_COLLADA_FRAME_RATE = examplePINVOKE.EXP_COLLADA_FRAME_RATE_get();
  public static readonly string EXP_DXF_TRIANGULATE = examplePINVOKE.EXP_DXF_TRIANGULATE_get();
  public static readonly string EXP_DXF_DEFORMATION = examplePINVOKE.EXP_DXF_DEFORMATION_get();
  public static readonly string EXP_OBJ_TRIANGULATE = examplePINVOKE.EXP_OBJ_TRIANGULATE_get();
  public static readonly string EXP_OBJ_DEFORMATION = examplePINVOKE.EXP_OBJ_DEFORMATION_get();
  public static readonly string EXP_3DS_REFERENCENODE = examplePINVOKE.EXP_3DS_REFERENCENODE_get();
  public static readonly string EXP_3DS_TEXTURE = examplePINVOKE.EXP_3DS_TEXTURE_get();
  public static readonly string EXP_3DS_MATERIAL = examplePINVOKE.EXP_3DS_MATERIAL_get();
  public static readonly string EXP_3DS_ANIMATION = examplePINVOKE.EXP_3DS_ANIMATION_get();
  public static readonly string EXP_3DS_MESH = examplePINVOKE.EXP_3DS_MESH_get();
  public static readonly string EXP_3DS_LIGHT = examplePINVOKE.EXP_3DS_LIGHT_get();
  public static readonly string EXP_3DS_CAMERA = examplePINVOKE.EXP_3DS_CAMERA_get();
  public static readonly string EXP_3DS_AMBIENT_LIGHT = examplePINVOKE.EXP_3DS_AMBIENT_LIGHT_get();
  public static readonly string EXP_3DS_RESCALING = examplePINVOKE.EXP_3DS_RESCALING_get();
  public static readonly string EXP_3DS_TEXUVBYPOLY = examplePINVOKE.EXP_3DS_TEXUVBYPOLY_get();
  public static readonly string EXP_FBX_TEMPLATE = examplePINVOKE.EXP_FBX_TEMPLATE_get();
  public static readonly string EXP_FBX_PIVOT = examplePINVOKE.EXP_FBX_PIVOT_get();
  public static readonly string EXP_FBX_GLOBAL_SETTINGS = examplePINVOKE.EXP_FBX_GLOBAL_SETTINGS_get();
  public static readonly string EXP_FBX_CHARACTER = examplePINVOKE.EXP_FBX_CHARACTER_get();
  public static readonly string EXP_FBX_CONSTRAINT = examplePINVOKE.EXP_FBX_CONSTRAINT_get();
  public static readonly string EXP_FBX_GOBO = examplePINVOKE.EXP_FBX_GOBO_get();
  public static readonly string EXP_FBX_SHAPE = examplePINVOKE.EXP_FBX_SHAPE_get();
  public static readonly string EXP_FBX_MATERIAL = examplePINVOKE.EXP_FBX_MATERIAL_get();
  public static readonly string EXP_FBX_TEXTURE = examplePINVOKE.EXP_FBX_TEXTURE_get();
  public static readonly string EXP_FBX_MODEL = examplePINVOKE.EXP_FBX_MODEL_get();
  public static readonly string EXP_FBX_ANIMATION = examplePINVOKE.EXP_FBX_ANIMATION_get();
  public static readonly string EXP_FBX_EMBEDDED = examplePINVOKE.EXP_FBX_EMBEDDED_get();
  public static readonly string EXP_FBX_PASSWORD = examplePINVOKE.EXP_FBX_PASSWORD_get();
  public static readonly string EXP_FBX_PASSWORD_ENABLE = examplePINVOKE.EXP_FBX_PASSWORD_ENABLE_get();
  public static readonly string EXP_FBX_COLLAPSE_EXTERNALS = examplePINVOKE.EXP_FBX_COLLAPSE_EXTERNALS_get();
  public static readonly string EXP_FBX_COMPRESS_ARRAYS = examplePINVOKE.EXP_FBX_COMPRESS_ARRAYS_get();
  public static readonly string EXP_FBX_COMPRESS_LEVEL = examplePINVOKE.EXP_FBX_COMPRESS_LEVEL_get();
  public static readonly string EXP_FBX_COMPRESS_MINSIZE = examplePINVOKE.EXP_FBX_COMPRESS_MINSIZE_get();
  public static readonly string EXP_FBX_EMBEDDED_PROPERTIES_SKIP = examplePINVOKE.EXP_FBX_EMBEDDED_PROPERTIES_SKIP_get();
  public static readonly string EXP_FBX_EXPORT_FILE_VERSION = examplePINVOKE.EXP_FBX_EXPORT_FILE_VERSION_get();
  public static readonly string IOSN_MOTION_START = examplePINVOKE.IOSN_MOTION_START_get();
  public static readonly string IOSN_MOTION_FRAME_COUNT = examplePINVOKE.IOSN_MOTION_FRAME_COUNT_get();
  public static readonly string IOSN_MOTION_FRAME_RATE = examplePINVOKE.IOSN_MOTION_FRAME_RATE_get();
  public static readonly string IOSN_MOTION_ACTOR_PREFIX = examplePINVOKE.IOSN_MOTION_ACTOR_PREFIX_get();
  public static readonly string IOSN_MOTION_RENAME_DUPLICATE_NAMES = examplePINVOKE.IOSN_MOTION_RENAME_DUPLICATE_NAMES_get();
  public static readonly string IOSN_MOTION_EXACT_ZERO_AS_OCCLUDED = examplePINVOKE.IOSN_MOTION_EXACT_ZERO_AS_OCCLUDED_get();
  public static readonly string IOSN_MOTION_SET_OCCLUDED_TO_LAST_VALID_POSITION = examplePINVOKE.IOSN_MOTION_SET_OCCLUDED_TO_LAST_VALID_POSITION_get();
  public static readonly string IOSN_MOTION_AS_OPTICAL_SEGMENTS = examplePINVOKE.IOSN_MOTION_AS_OPTICAL_SEGMENTS_get();
  public static readonly string IOSN_MOTION_ASF_SCENE_OWNED = examplePINVOKE.IOSN_MOTION_ASF_SCENE_OWNED_get();
  public static readonly string IOSN_MOTION_MOTION_FROM_GLOBAL_POSITION = examplePINVOKE.IOSN_MOTION_MOTION_FROM_GLOBAL_POSITION_get();
  public static readonly string IOSN_MOTION_GAPS_AS_VALID_DATA = examplePINVOKE.IOSN_MOTION_GAPS_AS_VALID_DATA_get();
  public static readonly string IOSN_MOTION_C3D_REAL_FORMAT = examplePINVOKE.IOSN_MOTION_C3D_REAL_FORMAT_get();
  public static readonly string IOSN_MOTION_CREATE_REFERENCE_NODE = examplePINVOKE.IOSN_MOTION_CREATE_REFERENCE_NODE_get();
  public static readonly string IOSN_MOTION_TRANSLATION = examplePINVOKE.IOSN_MOTION_TRANSLATION_get();
  public static readonly string IOSN_MOTION_BASE_T_IN_OFFSET = examplePINVOKE.IOSN_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IOSN_MOTION_BASE_R_IN_PREROTATION = examplePINVOKE.IOSN_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string IOSN_MOTION_DUMMY_NODES = examplePINVOKE.IOSN_MOTION_DUMMY_NODES_get();
  public static readonly string IOSN_MOTION_LIMITS = examplePINVOKE.IOSN_MOTION_LIMITS_get();
  public static readonly string IOSN_MOTION_FRAME_RATE_USED = examplePINVOKE.IOSN_MOTION_FRAME_RATE_USED_get();
  public static readonly string IOSN_MOTION_FRAME_RANGE = examplePINVOKE.IOSN_MOTION_FRAME_RANGE_get();
  public static readonly string IOSN_MOTION_WRITE_DEFAULT_AS_BASE_TR = examplePINVOKE.IOSN_MOTION_WRITE_DEFAULT_AS_BASE_TR_get();
  public static readonly string IMP_MOB_START = examplePINVOKE.IMP_MOB_START_get();
  public static readonly string IMP_MOB_FRAME_COUNT = examplePINVOKE.IMP_MOB_FRAME_COUNT_get();
  public static readonly string IMP_MOB_FRAME_RATE = examplePINVOKE.IMP_MOB_FRAME_RATE_get();
  public static readonly string IMP_MOB_ACTOR_PREFIX = examplePINVOKE.IMP_MOB_ACTOR_PREFIX_get();
  public static readonly string IMP_MOB_RENAME_DUPLICATE_NAMES = examplePINVOKE.IMP_MOB_RENAME_DUPLICATE_NAMES_get();
  public static readonly string IMP_MOB_EXACT_ZERO_AS_OCCLUDED = examplePINVOKE.IMP_MOB_EXACT_ZERO_AS_OCCLUDED_get();
  public static readonly string IMP_MOB_SET_OCCLUDED_TO_LAST_VALID_POSITION = examplePINVOKE.IMP_MOB_SET_OCCLUDED_TO_LAST_VALID_POSITION_get();
  public static readonly string IMP_MOB_AS_OPTICAL_SEGMENTS = examplePINVOKE.IMP_MOB_AS_OPTICAL_SEGMENTS_get();
  public static readonly string IMP_MOB_ASF_SCENE_OWNED = examplePINVOKE.IMP_MOB_ASF_SCENE_OWNED_get();
  public static readonly string IMP_ACCLAIM_AMC_CREATE_REFERENCE_NODE = examplePINVOKE.IMP_ACCLAIM_AMC_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_ACCLAIM_AMC_MOTION_BASE_T_IN_OFFSET = examplePINVOKE.IMP_ACCLAIM_AMC_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IMP_ACCLAIM_AMC_MOTION_BASE_R_IN_PREROTATION = examplePINVOKE.IMP_ACCLAIM_AMC_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string IMP_ACCLAIM_AMC_DUMMY_NODES = examplePINVOKE.IMP_ACCLAIM_AMC_DUMMY_NODES_get();
  public static readonly string IMP_ACCLAIM_AMC_MOTION_LIMITS = examplePINVOKE.IMP_ACCLAIM_AMC_MOTION_LIMITS_get();
  public static readonly string IMP_ACCLAIM_ASF_CREATE_REFERENCE_NODE = examplePINVOKE.IMP_ACCLAIM_ASF_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_ACCLAIM_ASF_MOTION_BASE_T_IN_OFFSET = examplePINVOKE.IMP_ACCLAIM_ASF_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IMP_ACCLAIM_ASF_MOTION_BASE_R_IN_PREROTATION = examplePINVOKE.IMP_ACCLAIM_ASF_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string IMP_ACCLAIM_ASF_DUMMY_NODES = examplePINVOKE.IMP_ACCLAIM_ASF_DUMMY_NODES_get();
  public static readonly string IMP_ACCLAIM_ASF_MOTION_LIMITS = examplePINVOKE.IMP_ACCLAIM_ASF_MOTION_LIMITS_get();
  public static readonly string IMP_BIOVISION_BVH_CREATE_REFERENCE_NODE = examplePINVOKE.IMP_BIOVISION_BVH_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR_CREATE_REFERENCE_NODE = examplePINVOKE.IMP_MOTIONANALYSIS_HTR_CREATE_REFERENCE_NODE_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR_MOTION_BASE_T_IN_OFFSET = examplePINVOKE.IMP_MOTIONANALYSIS_HTR_MOTION_BASE_T_IN_OFFSET_get();
  public static readonly string IMP_MOTIONANALYSIS_HTR_MOTION_BASE_R_IN_PREROTATION = examplePINVOKE.IMP_MOTIONANALYSIS_HTR_MOTION_BASE_R_IN_PREROTATION_get();
  public static readonly string EXP_MOB_START = examplePINVOKE.EXP_MOB_START_get();
  public static readonly string EXP_MOB_FRAME_COUNT = examplePINVOKE.EXP_MOB_FRAME_COUNT_get();
  public static readonly string EXP_MOB_FROM_GLOBAL_POSITION = examplePINVOKE.EXP_MOB_FROM_GLOBAL_POSITION_get();
  public static readonly string EXP_MOB_FRAME_RATE = examplePINVOKE.EXP_MOB_FRAME_RATE_get();
  public static readonly string EXP_MOB_GAPS_AS_VALID_DATA = examplePINVOKE.EXP_MOB_GAPS_AS_VALID_DATA_get();
  public static readonly string EXP_MOB_C3D_REAL_FORMAT = examplePINVOKE.EXP_MOB_C3D_REAL_FORMAT_get();
  public static readonly string EXP_MOB_ASF_SCENE_OWNED = examplePINVOKE.EXP_MOB_ASF_SCENE_OWNED_get();
  public static readonly string EXP_ACCLAIM_AMC_MOTION_TRANSLATION = examplePINVOKE.EXP_ACCLAIM_AMC_MOTION_TRANSLATION_get();
  public static readonly string EXP_ACCLAIM_AMC_FRAME_RATE_USED = examplePINVOKE.EXP_ACCLAIM_AMC_FRAME_RATE_USED_get();
  public static readonly string EXP_ACCLAIM_AMC_FRAME_RANGE = examplePINVOKE.EXP_ACCLAIM_AMC_FRAME_RANGE_get();
  public static readonly string EXP_ACCLAIM_AMC_WRITE_DEFAULT_AS_BASE_TR = examplePINVOKE.EXP_ACCLAIM_AMC_WRITE_DEFAULT_AS_BASE_TR_get();
  public static readonly string EXP_ACCLAIM_ASF_MOTION_TRANSLATION = examplePINVOKE.EXP_ACCLAIM_ASF_MOTION_TRANSLATION_get();
  public static readonly string EXP_ACCLAIM_ASF_FRAME_RATE_USED = examplePINVOKE.EXP_ACCLAIM_ASF_FRAME_RATE_USED_get();
  public static readonly string EXP_ACCLAIM_ASF_FRAME_RANGE = examplePINVOKE.EXP_ACCLAIM_ASF_FRAME_RANGE_get();
  public static readonly string EXP_ACCLAIM_ASF_WRITE_DEFAULT_AS_BASE_TR = examplePINVOKE.EXP_ACCLAIM_ASF_WRITE_DEFAULT_AS_BASE_TR_get();
  public static readonly string EXP_BIOVISION_BVH_MOTION_TRANSLATION = examplePINVOKE.EXP_BIOVISION_BVH_MOTION_TRANSLATION_get();
  public static readonly string FBXSDK_CURVENODE_TRANSFORM = examplePINVOKE.FBXSDK_CURVENODE_TRANSFORM_get();
  public static readonly string FBXSDK_CURVENODE_TRANSLATION = examplePINVOKE.FBXSDK_CURVENODE_TRANSLATION_get();
  public static readonly string FBXSDK_CURVENODE_ROTATION = examplePINVOKE.FBXSDK_CURVENODE_ROTATION_get();
  public static readonly string FBXSDK_CURVENODE_SCALING = examplePINVOKE.FBXSDK_CURVENODE_SCALING_get();
  public static readonly string FBXSDK_CURVENODE_COMPONENT_X = examplePINVOKE.FBXSDK_CURVENODE_COMPONENT_X_get();
  public static readonly string FBXSDK_CURVENODE_COMPONENT_Y = examplePINVOKE.FBXSDK_CURVENODE_COMPONENT_Y_get();
  public static readonly string FBXSDK_CURVENODE_COMPONENT_Z = examplePINVOKE.FBXSDK_CURVENODE_COMPONENT_Z_get();
  public static readonly string FBXSDK_CURVENODE_COLOR = examplePINVOKE.FBXSDK_CURVENODE_COLOR_get();
  public static readonly string FBXSDK_CURVENODE_COLOR_RED = examplePINVOKE.FBXSDK_CURVENODE_COLOR_RED_get();
  public static readonly string FBXSDK_CURVENODE_COLOR_GREEN = examplePINVOKE.FBXSDK_CURVENODE_COLOR_GREEN_get();
  public static readonly string FBXSDK_CURVENODE_COLOR_BLUE = examplePINVOKE.FBXSDK_CURVENODE_COLOR_BLUE_get();
  public static readonly string FBXSDK_TAKENODE_DEFAULT_NAME = examplePINVOKE.FBXSDK_TAKENODE_DEFAULT_NAME_get();
  public static readonly string FBXSDK_ROOTCURVE_DEFAULT_NAME = examplePINVOKE.FBXSDK_ROOTCURVE_DEFAULT_NAME_get();
  public static readonly string Character_Hips = examplePINVOKE.Character_Hips_get();
  public static readonly string Character_LeftUpLeg = examplePINVOKE.Character_LeftUpLeg_get();
  public static readonly string Character_LeftLeg = examplePINVOKE.Character_LeftLeg_get();
  public static readonly string Character_LeftFoot = examplePINVOKE.Character_LeftFoot_get();
  public static readonly string Character_RightUpLeg = examplePINVOKE.Character_RightUpLeg_get();
  public static readonly string Character_RightLeg = examplePINVOKE.Character_RightLeg_get();
  public static readonly string Character_RightFoot = examplePINVOKE.Character_RightFoot_get();
  public static readonly string Character_Spine = examplePINVOKE.Character_Spine_get();
  public static readonly string Character_LeftArm = examplePINVOKE.Character_LeftArm_get();
  public static readonly string Character_LeftForeArm = examplePINVOKE.Character_LeftForeArm_get();
  public static readonly string Character_LeftHand = examplePINVOKE.Character_LeftHand_get();
  public static readonly string Character_RightArm = examplePINVOKE.Character_RightArm_get();
  public static readonly string Character_RightForeArm = examplePINVOKE.Character_RightForeArm_get();
  public static readonly string Character_RightHand = examplePINVOKE.Character_RightHand_get();
  public static readonly string Character_Head = examplePINVOKE.Character_Head_get();
  public static readonly string Character_LeftToeBase = examplePINVOKE.Character_LeftToeBase_get();
  public static readonly string Character_RightToeBase = examplePINVOKE.Character_RightToeBase_get();
  public static readonly string Character_LeftShoulder = examplePINVOKE.Character_LeftShoulder_get();
  public static readonly string Character_RightShoulder = examplePINVOKE.Character_RightShoulder_get();
  public static readonly string Character_LeftShoulderExtra = examplePINVOKE.Character_LeftShoulderExtra_get();
  public static readonly string Character_RightShoulderExtra = examplePINVOKE.Character_RightShoulderExtra_get();
  public static readonly string Character_Neck = examplePINVOKE.Character_Neck_get();
  public static readonly string Character_LeftFingerBase = examplePINVOKE.Character_LeftFingerBase_get();
  public static readonly string Character_RightFingerBase = examplePINVOKE.Character_RightFingerBase_get();
  public static readonly string Character_Spine1 = examplePINVOKE.Character_Spine1_get();
  public static readonly string Character_Spine2 = examplePINVOKE.Character_Spine2_get();
  public static readonly string Character_Spine3 = examplePINVOKE.Character_Spine3_get();
  public static readonly string Character_Spine4 = examplePINVOKE.Character_Spine4_get();
  public static readonly string Character_Spine5 = examplePINVOKE.Character_Spine5_get();
  public static readonly string Character_Spine6 = examplePINVOKE.Character_Spine6_get();
  public static readonly string Character_Spine7 = examplePINVOKE.Character_Spine7_get();
  public static readonly string Character_Spine8 = examplePINVOKE.Character_Spine8_get();
  public static readonly string Character_Spine9 = examplePINVOKE.Character_Spine9_get();
  public static readonly string Character_Neck1 = examplePINVOKE.Character_Neck1_get();
  public static readonly string Character_Neck2 = examplePINVOKE.Character_Neck2_get();
  public static readonly string Character_Neck3 = examplePINVOKE.Character_Neck3_get();
  public static readonly string Character_Neck4 = examplePINVOKE.Character_Neck4_get();
  public static readonly string Character_Neck5 = examplePINVOKE.Character_Neck5_get();
  public static readonly string Character_Neck6 = examplePINVOKE.Character_Neck6_get();
  public static readonly string Character_Neck7 = examplePINVOKE.Character_Neck7_get();
  public static readonly string Character_Neck8 = examplePINVOKE.Character_Neck8_get();
  public static readonly string Character_Neck9 = examplePINVOKE.Character_Neck9_get();
  public static readonly string Character_LeftUpLegRoll = examplePINVOKE.Character_LeftUpLegRoll_get();
  public static readonly string Character_LeftLegRoll = examplePINVOKE.Character_LeftLegRoll_get();
  public static readonly string Character_RightUpLegRoll = examplePINVOKE.Character_RightUpLegRoll_get();
  public static readonly string Character_RightLegRoll = examplePINVOKE.Character_RightLegRoll_get();
  public static readonly string Character_LeftArmRoll = examplePINVOKE.Character_LeftArmRoll_get();
  public static readonly string Character_LeftForeArmRoll = examplePINVOKE.Character_LeftForeArmRoll_get();
  public static readonly string Character_RightArmRoll = examplePINVOKE.Character_RightArmRoll_get();
  public static readonly string Character_RightForeArmRoll = examplePINVOKE.Character_RightForeArmRoll_get();
  public static readonly string Character_LeftUpLegRollEx = examplePINVOKE.Character_LeftUpLegRollEx_get();
  public static readonly string Character_LeftLegRollEx = examplePINVOKE.Character_LeftLegRollEx_get();
  public static readonly string Character_RightUpLegRollEx = examplePINVOKE.Character_RightUpLegRollEx_get();
  public static readonly string Character_RightLegRollEx = examplePINVOKE.Character_RightLegRollEx_get();
  public static readonly string Character_LeftArmRollEx = examplePINVOKE.Character_LeftArmRollEx_get();
  public static readonly string Character_LeftForearmRollEx = examplePINVOKE.Character_LeftForearmRollEx_get();
  public static readonly string Character_RightArmRollEx = examplePINVOKE.Character_RightArmRollEx_get();
  public static readonly string Character_RightForearmRollEx = examplePINVOKE.Character_RightForearmRollEx_get();
  public static readonly string Character_Props0 = examplePINVOKE.Character_Props0_get();
  public static readonly string Character_Props1 = examplePINVOKE.Character_Props1_get();
  public static readonly string Character_Props2 = examplePINVOKE.Character_Props2_get();
  public static readonly string Character_Props3 = examplePINVOKE.Character_Props3_get();
  public static readonly string Character_Props4 = examplePINVOKE.Character_Props4_get();
  public static readonly string Character_LeftHandThumb1 = examplePINVOKE.Character_LeftHandThumb1_get();
  public static readonly string Character_LeftHandThumb2 = examplePINVOKE.Character_LeftHandThumb2_get();
  public static readonly string Character_LeftHandThumb3 = examplePINVOKE.Character_LeftHandThumb3_get();
  public static readonly string Character_LeftHandThumb4 = examplePINVOKE.Character_LeftHandThumb4_get();
  public static readonly string Character_LeftHandIndex1 = examplePINVOKE.Character_LeftHandIndex1_get();
  public static readonly string Character_LeftHandIndex2 = examplePINVOKE.Character_LeftHandIndex2_get();
  public static readonly string Character_LeftHandIndex3 = examplePINVOKE.Character_LeftHandIndex3_get();
  public static readonly string Character_LeftHandIndex4 = examplePINVOKE.Character_LeftHandIndex4_get();
  public static readonly string Character_LeftHandMiddle1 = examplePINVOKE.Character_LeftHandMiddle1_get();
  public static readonly string Character_LeftHandMiddle2 = examplePINVOKE.Character_LeftHandMiddle2_get();
  public static readonly string Character_LeftHandMiddle3 = examplePINVOKE.Character_LeftHandMiddle3_get();
  public static readonly string Character_LeftHandMiddle4 = examplePINVOKE.Character_LeftHandMiddle4_get();
  public static readonly string Character_LeftHandRing1 = examplePINVOKE.Character_LeftHandRing1_get();
  public static readonly string Character_LeftHandRing2 = examplePINVOKE.Character_LeftHandRing2_get();
  public static readonly string Character_LeftHandRing3 = examplePINVOKE.Character_LeftHandRing3_get();
  public static readonly string Character_LeftHandRing4 = examplePINVOKE.Character_LeftHandRing4_get();
  public static readonly string Character_LeftHandPinky1 = examplePINVOKE.Character_LeftHandPinky1_get();
  public static readonly string Character_LeftHandPinky2 = examplePINVOKE.Character_LeftHandPinky2_get();
  public static readonly string Character_LeftHandPinky3 = examplePINVOKE.Character_LeftHandPinky3_get();
  public static readonly string Character_LeftHandPinky4 = examplePINVOKE.Character_LeftHandPinky4_get();
  public static readonly string Character_LeftHandExtraFinger1 = examplePINVOKE.Character_LeftHandExtraFinger1_get();
  public static readonly string Character_LeftHandExtraFinger2 = examplePINVOKE.Character_LeftHandExtraFinger2_get();
  public static readonly string Character_LeftHandExtraFinger3 = examplePINVOKE.Character_LeftHandExtraFinger3_get();
  public static readonly string Character_LeftHandExtraFinger4 = examplePINVOKE.Character_LeftHandExtraFinger4_get();
  public static readonly string Character_RightHandThumb1 = examplePINVOKE.Character_RightHandThumb1_get();
  public static readonly string Character_RightHandThumb2 = examplePINVOKE.Character_RightHandThumb2_get();
  public static readonly string Character_RightHandThumb3 = examplePINVOKE.Character_RightHandThumb3_get();
  public static readonly string Character_RightHandThumb4 = examplePINVOKE.Character_RightHandThumb4_get();
  public static readonly string Character_RightHandIndex1 = examplePINVOKE.Character_RightHandIndex1_get();
  public static readonly string Character_RightHandIndex2 = examplePINVOKE.Character_RightHandIndex2_get();
  public static readonly string Character_RightHandIndex3 = examplePINVOKE.Character_RightHandIndex3_get();
  public static readonly string Character_RightHandIndex4 = examplePINVOKE.Character_RightHandIndex4_get();
  public static readonly string Character_RightHandMiddle1 = examplePINVOKE.Character_RightHandMiddle1_get();
  public static readonly string Character_RightHandMiddle2 = examplePINVOKE.Character_RightHandMiddle2_get();
  public static readonly string Character_RightHandMiddle3 = examplePINVOKE.Character_RightHandMiddle3_get();
  public static readonly string Character_RightHandMiddle4 = examplePINVOKE.Character_RightHandMiddle4_get();
  public static readonly string Character_RightHandRing1 = examplePINVOKE.Character_RightHandRing1_get();
  public static readonly string Character_RightHandRing2 = examplePINVOKE.Character_RightHandRing2_get();
  public static readonly string Character_RightHandRing3 = examplePINVOKE.Character_RightHandRing3_get();
  public static readonly string Character_RightHandRing4 = examplePINVOKE.Character_RightHandRing4_get();
  public static readonly string Character_RightHandPinky1 = examplePINVOKE.Character_RightHandPinky1_get();
  public static readonly string Character_RightHandPinky2 = examplePINVOKE.Character_RightHandPinky2_get();
  public static readonly string Character_RightHandPinky3 = examplePINVOKE.Character_RightHandPinky3_get();
  public static readonly string Character_RightHandPinky4 = examplePINVOKE.Character_RightHandPinky4_get();
  public static readonly string Character_RightHandExtraFinger1 = examplePINVOKE.Character_RightHandExtraFinger1_get();
  public static readonly string Character_RightHandExtraFinger2 = examplePINVOKE.Character_RightHandExtraFinger2_get();
  public static readonly string Character_RightHandExtraFinger3 = examplePINVOKE.Character_RightHandExtraFinger3_get();
  public static readonly string Character_RightHandExtraFinger4 = examplePINVOKE.Character_RightHandExtraFinger4_get();
  public static readonly string Character_LeftFootThumb1 = examplePINVOKE.Character_LeftFootThumb1_get();
  public static readonly string Character_LeftFootThumb2 = examplePINVOKE.Character_LeftFootThumb2_get();
  public static readonly string Character_LeftFootThumb3 = examplePINVOKE.Character_LeftFootThumb3_get();
  public static readonly string Character_LeftFootThumb4 = examplePINVOKE.Character_LeftFootThumb4_get();
  public static readonly string Character_LeftFootIndex1 = examplePINVOKE.Character_LeftFootIndex1_get();
  public static readonly string Character_LeftFootIndex2 = examplePINVOKE.Character_LeftFootIndex2_get();
  public static readonly string Character_LeftFootIndex3 = examplePINVOKE.Character_LeftFootIndex3_get();
  public static readonly string Character_LeftFootIndex4 = examplePINVOKE.Character_LeftFootIndex4_get();
  public static readonly string Character_LeftFootMiddle1 = examplePINVOKE.Character_LeftFootMiddle1_get();
  public static readonly string Character_LeftFootMiddle2 = examplePINVOKE.Character_LeftFootMiddle2_get();
  public static readonly string Character_LeftFootMiddle3 = examplePINVOKE.Character_LeftFootMiddle3_get();
  public static readonly string Character_LeftFootMiddle4 = examplePINVOKE.Character_LeftFootMiddle4_get();
  public static readonly string Character_LeftFootRing1 = examplePINVOKE.Character_LeftFootRing1_get();
  public static readonly string Character_LeftFootRing2 = examplePINVOKE.Character_LeftFootRing2_get();
  public static readonly string Character_LeftFootRing3 = examplePINVOKE.Character_LeftFootRing3_get();
  public static readonly string Character_LeftFootRing4 = examplePINVOKE.Character_LeftFootRing4_get();
  public static readonly string Character_LeftFootPinky1 = examplePINVOKE.Character_LeftFootPinky1_get();
  public static readonly string Character_LeftFootPinky2 = examplePINVOKE.Character_LeftFootPinky2_get();
  public static readonly string Character_LeftFootPinky3 = examplePINVOKE.Character_LeftFootPinky3_get();
  public static readonly string Character_LeftFootPinky4 = examplePINVOKE.Character_LeftFootPinky4_get();
  public static readonly string Character_LeftFootExtraFinger1 = examplePINVOKE.Character_LeftFootExtraFinger1_get();
  public static readonly string Character_LeftFootExtraFinger2 = examplePINVOKE.Character_LeftFootExtraFinger2_get();
  public static readonly string Character_LeftFootExtraFinger3 = examplePINVOKE.Character_LeftFootExtraFinger3_get();
  public static readonly string Character_LeftFootExtraFinger4 = examplePINVOKE.Character_LeftFootExtraFinger4_get();
  public static readonly string Character_RightFootThumb1 = examplePINVOKE.Character_RightFootThumb1_get();
  public static readonly string Character_RightFootThumb2 = examplePINVOKE.Character_RightFootThumb2_get();
  public static readonly string Character_RightFootThumb3 = examplePINVOKE.Character_RightFootThumb3_get();
  public static readonly string Character_RightFootThumb4 = examplePINVOKE.Character_RightFootThumb4_get();
  public static readonly string Character_RightFootIndex1 = examplePINVOKE.Character_RightFootIndex1_get();
  public static readonly string Character_RightFootIndex2 = examplePINVOKE.Character_RightFootIndex2_get();
  public static readonly string Character_RightFootIndex3 = examplePINVOKE.Character_RightFootIndex3_get();
  public static readonly string Character_RightFootIndex4 = examplePINVOKE.Character_RightFootIndex4_get();
  public static readonly string Character_RightFootMiddle1 = examplePINVOKE.Character_RightFootMiddle1_get();
  public static readonly string Character_RightFootMiddle2 = examplePINVOKE.Character_RightFootMiddle2_get();
  public static readonly string Character_RightFootMiddle3 = examplePINVOKE.Character_RightFootMiddle3_get();
  public static readonly string Character_RightFootMiddle4 = examplePINVOKE.Character_RightFootMiddle4_get();
  public static readonly string Character_RightFootRing1 = examplePINVOKE.Character_RightFootRing1_get();
  public static readonly string Character_RightFootRing2 = examplePINVOKE.Character_RightFootRing2_get();
  public static readonly string Character_RightFootRing3 = examplePINVOKE.Character_RightFootRing3_get();
  public static readonly string Character_RightFootRing4 = examplePINVOKE.Character_RightFootRing4_get();
  public static readonly string Character_RightFootPinky1 = examplePINVOKE.Character_RightFootPinky1_get();
  public static readonly string Character_RightFootPinky2 = examplePINVOKE.Character_RightFootPinky2_get();
  public static readonly string Character_RightFootPinky3 = examplePINVOKE.Character_RightFootPinky3_get();
  public static readonly string Character_RightFootPinky4 = examplePINVOKE.Character_RightFootPinky4_get();
  public static readonly string Character_RightFootExtraFinger1 = examplePINVOKE.Character_RightFootExtraFinger1_get();
  public static readonly string Character_RightFootExtraFinger2 = examplePINVOKE.Character_RightFootExtraFinger2_get();
  public static readonly string Character_RightFootExtraFinger3 = examplePINVOKE.Character_RightFootExtraFinger3_get();
  public static readonly string Character_RightFootExtraFinger4 = examplePINVOKE.Character_RightFootExtraFinger4_get();
  public static readonly string Character_LeftInHandThumb = examplePINVOKE.Character_LeftInHandThumb_get();
  public static readonly string Character_LeftInHandIndex = examplePINVOKE.Character_LeftInHandIndex_get();
  public static readonly string Character_LeftInHandMiddle = examplePINVOKE.Character_LeftInHandMiddle_get();
  public static readonly string Character_LeftInHandRing = examplePINVOKE.Character_LeftInHandRing_get();
  public static readonly string Character_LeftInHandPinky = examplePINVOKE.Character_LeftInHandPinky_get();
  public static readonly string Character_LeftInHandExtraFinger = examplePINVOKE.Character_LeftInHandExtraFinger_get();
  public static readonly string Character_RightInHandThumb = examplePINVOKE.Character_RightInHandThumb_get();
  public static readonly string Character_RightInHandIndex = examplePINVOKE.Character_RightInHandIndex_get();
  public static readonly string Character_RightInHandMiddle = examplePINVOKE.Character_RightInHandMiddle_get();
  public static readonly string Character_RightInHandRing = examplePINVOKE.Character_RightInHandRing_get();
  public static readonly string Character_RightInHandPinky = examplePINVOKE.Character_RightInHandPinky_get();
  public static readonly string Character_RightInHandExtraFinger = examplePINVOKE.Character_RightInHandExtraFinger_get();
  public static readonly string Character_LeftInFootThumb = examplePINVOKE.Character_LeftInFootThumb_get();
  public static readonly string Character_LeftInFootIndex = examplePINVOKE.Character_LeftInFootIndex_get();
  public static readonly string Character_LeftInFootMiddle = examplePINVOKE.Character_LeftInFootMiddle_get();
  public static readonly string Character_LeftInFootRing = examplePINVOKE.Character_LeftInFootRing_get();
  public static readonly string Character_LeftInFootPinky = examplePINVOKE.Character_LeftInFootPinky_get();
  public static readonly string Character_LeftInFootExtraFinger = examplePINVOKE.Character_LeftInFootExtraFinger_get();
  public static readonly string Character_RightInFootThumb = examplePINVOKE.Character_RightInFootThumb_get();
  public static readonly string Character_RightInFootIndex = examplePINVOKE.Character_RightInFootIndex_get();
  public static readonly string Character_RightInFootMiddle = examplePINVOKE.Character_RightInFootMiddle_get();
  public static readonly string Character_RightInFootRing = examplePINVOKE.Character_RightInFootRing_get();
  public static readonly string Character_RightInFootPinky = examplePINVOKE.Character_RightInFootPinky_get();
  public static readonly string Character_RightInFootExtraFinger = examplePINVOKE.Character_RightInFootExtraFinger_get();
  public static readonly string Character_GameModeParentLeftHipRoll = examplePINVOKE.Character_GameModeParentLeftHipRoll_get();
  public static readonly string Character_GameModeParentLeftKnee = examplePINVOKE.Character_GameModeParentLeftKnee_get();
  public static readonly string Character_GameModeParentLeftKneeRoll = examplePINVOKE.Character_GameModeParentLeftKneeRoll_get();
  public static readonly string Character_GameModeParentRightHipRoll = examplePINVOKE.Character_GameModeParentRightHipRoll_get();
  public static readonly string Character_GameModeParentRightKnee = examplePINVOKE.Character_GameModeParentRightKnee_get();
  public static readonly string Character_GameModeParentRightKneeRoll = examplePINVOKE.Character_GameModeParentRightKneeRoll_get();
  public static readonly string Character_GameModeParentLeftShoulderRoll = examplePINVOKE.Character_GameModeParentLeftShoulderRoll_get();
  public static readonly string Character_GameModeParentLeftElbow = examplePINVOKE.Character_GameModeParentLeftElbow_get();
  public static readonly string Character_GameModeParentLeftElbowRoll = examplePINVOKE.Character_GameModeParentLeftElbowRoll_get();
  public static readonly string Character_GameModeParentRightShoulderRoll = examplePINVOKE.Character_GameModeParentRightShoulderRoll_get();
  public static readonly string Character_GameModeParentRightElbow = examplePINVOKE.Character_GameModeParentRightElbow_get();
  public static readonly string Character_GameModeParentRightElbowRoll = examplePINVOKE.Character_GameModeParentRightElbowRoll_get();
  public static readonly string Character_LeftFloorContact = examplePINVOKE.Character_LeftFloorContact_get();
  public static readonly string Character_RightFloorContact = examplePINVOKE.Character_RightFloorContact_get();
  public static readonly string Character_LeftHandFloorContact = examplePINVOKE.Character_LeftHandFloorContact_get();
  public static readonly string Character_RightHandFloorContact = examplePINVOKE.Character_RightHandFloorContact_get();
  public static readonly string FBXSDK_CONTAINER_TEMPLATE_STR = examplePINVOKE.FBXSDK_CONTAINER_TEMPLATE_STR_get();
  public static readonly string FBXSDK_TEMPLATE_STR = examplePINVOKE.FBXSDK_TEMPLATE_STR_get();
  public static readonly string FBXSDK_EXTENDS_TEMPLATE_STR = examplePINVOKE.FBXSDK_EXTENDS_TEMPLATE_STR_get();
  public static readonly string MODEL_PREFIX = examplePINVOKE.MODEL_PREFIX_get();
  public static readonly string MATERIAL_PREFIX = examplePINVOKE.MATERIAL_PREFIX_get();
  public static readonly string POSE_PREFIX = examplePINVOKE.POSE_PREFIX_get();
  public static readonly string DEFORMER_PREFIX = examplePINVOKE.DEFORMER_PREFIX_get();
  public static readonly string CONTAINER_PREFIX = examplePINVOKE.CONTAINER_PREFIX_get();
  public static readonly string SUBDEFORMER_PREFIX = examplePINVOKE.SUBDEFORMER_PREFIX_get();
  public static readonly string CONSTRAINT_PREFIX = examplePINVOKE.CONSTRAINT_PREFIX_get();
  public static readonly string CONTROLSET_PLUG_PREFIX = examplePINVOKE.CONTROLSET_PLUG_PREFIX_get();
  public static readonly string VIDEO_PREFIX = examplePINVOKE.VIDEO_PREFIX_get();
  public static readonly string TEXTURE_PREFIX = examplePINVOKE.TEXTURE_PREFIX_get();
  public static readonly string THUMBNAIL_PREFIX = examplePINVOKE.THUMBNAIL_PREFIX_get();
  public static readonly string MARKER_SET_PREFIX = examplePINVOKE.MARKER_SET_PREFIX_get();
  public static readonly string GEOMETRY_PREFIX = examplePINVOKE.GEOMETRY_PREFIX_get();
  public static readonly string GEOMETRY_WEIGHTED_MAP_PREFIX = examplePINVOKE.GEOMETRY_WEIGHTED_MAP_PREFIX_get();
  public static readonly string SCENE_PREFIX = examplePINVOKE.SCENE_PREFIX_get();
  public static readonly string CACHE_PREFIX = examplePINVOKE.CACHE_PREFIX_get();
  public static readonly string IMPLEMENTATION_PREFIX = examplePINVOKE.IMPLEMENTATION_PREFIX_get();
  public static readonly string BINDINGTABLE_PREFIX = examplePINVOKE.BINDINGTABLE_PREFIX_get();
  public static readonly string BINDINGOPERATOR_PREFIX = examplePINVOKE.BINDINGOPERATOR_PREFIX_get();
  public static readonly string LAYERED_TEXTURE_PREFIX = examplePINVOKE.LAYERED_TEXTURE_PREFIX_get();
  public static readonly string PROCEDURAL_TEXTURE_PREFIX = examplePINVOKE.PROCEDURAL_TEXTURE_PREFIX_get();
  public static readonly string DOCUMENT_PREFIX = examplePINVOKE.DOCUMENT_PREFIX_get();
  public static readonly string COLLECTION_PREFIX = examplePINVOKE.COLLECTION_PREFIX_get();
  public static readonly string COLLECTION_EXCLUSIVE_PREFIX = examplePINVOKE.COLLECTION_EXCLUSIVE_PREFIX_get();
  public static readonly string NODE_ATTRIBUTE_PREFIX = examplePINVOKE.NODE_ATTRIBUTE_PREFIX_get();
  public static readonly string ENVIRONMENT_PREFIX = examplePINVOKE.ENVIRONMENT_PREFIX_get();
  public static readonly string OBJECTMETADATA_PREFIX = examplePINVOKE.OBJECTMETADATA_PREFIX_get();
  public static readonly string EXPOSURECONTROL_PREFIX = examplePINVOKE.EXPOSURECONTROL_PREFIX_get();
  public static readonly string ANIM_STACK_PREFIX = examplePINVOKE.ANIM_STACK_PREFIX_get();
  public static readonly string ANIM_LAYER_PREFIX = examplePINVOKE.ANIM_LAYER_PREFIX_get();
  public static readonly string ANIM_CURVENODE_PREFIX = examplePINVOKE.ANIM_CURVENODE_PREFIX_get();
  public static readonly string ANIM_CURVE_PREFIX = examplePINVOKE.ANIM_CURVE_PREFIX_get();
  public static readonly string ANIM_EVAL_PREFIX = examplePINVOKE.ANIM_EVAL_PREFIX_get();
  public static readonly string SELECTION_SET_PREFIX = examplePINVOKE.SELECTION_SET_PREFIX_get();
  public static readonly string SELECTION_SET_NODE_PREFIX = examplePINVOKE.SELECTION_SET_NODE_PREFIX_get();
  public static readonly string DISPLAY_LAYER_PREFIX = examplePINVOKE.DISPLAY_LAYER_PREFIX_get();
  public static readonly string SCENEREFERENCE_PREFIX = examplePINVOKE.SCENEREFERENCE_PREFIX_get();
  public static readonly string ADSK_ENVIRONMENT_PREFIX = examplePINVOKE.ADSK_ENVIRONMENT_PREFIX_get();
  public static readonly string ADSK_LIGHT_PREFIX = examplePINVOKE.ADSK_LIGHT_PREFIX_get();
  public static readonly string ADSK_PROCEDURALGEOMETRY_PREFIX = examplePINVOKE.ADSK_PROCEDURALGEOMETRY_PREFIX_get();
  public static readonly string ADSK_SURFACEMATERIAL_PREFIX = examplePINVOKE.ADSK_SURFACEMATERIAL_PREFIX_get();
  public static readonly string ADSK_TEXTURE_PREFIX = examplePINVOKE.ADSK_TEXTURE_PREFIX_get();
  public static readonly string ADSK_SWATCHSCENE_PREFIX = examplePINVOKE.ADSK_SWATCHSCENE_PREFIX_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_HLSL = examplePINVOKE.FBXSDK_SHADING_LANGUAGE_HLSL_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_GLSL = examplePINVOKE.FBXSDK_SHADING_LANGUAGE_GLSL_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_CGFX = examplePINVOKE.FBXSDK_SHADING_LANGUAGE_CGFX_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_SFX = examplePINVOKE.FBXSDK_SHADING_LANGUAGE_SFX_get();
  public static readonly string FBXSDK_SHADING_LANGUAGE_MRSL = examplePINVOKE.FBXSDK_SHADING_LANGUAGE_MRSL_get();
  public static readonly string FBXSDK_RENDERING_API_DIRECTX = examplePINVOKE.FBXSDK_RENDERING_API_DIRECTX_get();
  public static readonly string FBXSDK_RENDERING_API_OPENGL = examplePINVOKE.FBXSDK_RENDERING_API_OPENGL_get();
  public static readonly string FBXSDK_RENDERING_API_MENTALRAY = examplePINVOKE.FBXSDK_RENDERING_API_MENTALRAY_get();
  public static readonly string FBXSDK_RENDERING_API_PREVIEW = examplePINVOKE.FBXSDK_RENDERING_API_PREVIEW_get();
  public static readonly string FBXSDK_IMPLEMENTATION_PREVIEW = examplePINVOKE.FBXSDK_IMPLEMENTATION_PREVIEW_get();
  public static readonly string FBXSDK_IMPLEMENTATION_MENTALRAY = examplePINVOKE.FBXSDK_IMPLEMENTATION_MENTALRAY_get();
  public static readonly string FBXSDK_IMPLEMENTATION_CGFX = examplePINVOKE.FBXSDK_IMPLEMENTATION_CGFX_get();
  public static readonly string FBXSDK_IMPLEMENTATION_HLSL = examplePINVOKE.FBXSDK_IMPLEMENTATION_HLSL_get();
  public static readonly string FBXSDK_IMPLEMENTATION_SFX = examplePINVOKE.FBXSDK_IMPLEMENTATION_SFX_get();
  public static readonly string FBXSDK_IMPLEMENTATION_OGS = examplePINVOKE.FBXSDK_IMPLEMENTATION_OGS_get();
  public static readonly string FBXSDK_IMPLEMENTATION_NONE = examplePINVOKE.FBXSDK_IMPLEMENTATION_NONE_get();
  public static readonly string FBXSDK_TYPE_ENVIRONMENT = examplePINVOKE.FBXSDK_TYPE_ENVIRONMENT_get();
  public static readonly string FBXSDK_TYPE_LIGHT = examplePINVOKE.FBXSDK_TYPE_LIGHT_get();
  public static readonly string FBXSDK_TYPE_PROCEDURALGEOMETRY = examplePINVOKE.FBXSDK_TYPE_PROCEDURALGEOMETRY_get();
  public static readonly string FBXSDK_TYPE_SURFACEMATERIAL = examplePINVOKE.FBXSDK_TYPE_SURFACEMATERIAL_get();
  public static readonly string FBXSDK_TYPE_TEXTURE = examplePINVOKE.FBXSDK_TYPE_TEXTURE_get();
  public static readonly string FBXSDK_TYPE_SWATCHSCENE = examplePINVOKE.FBXSDK_TYPE_SWATCHSCENE_get();
  public static readonly string ADSK_TYPE_ENVIRONMENT = examplePINVOKE.ADSK_TYPE_ENVIRONMENT_get();
  public static readonly string ADSK_TYPE_LIGHT = examplePINVOKE.ADSK_TYPE_LIGHT_get();
  public static readonly string ADSK_TYPE_PROCEDURALGEOMETRY = examplePINVOKE.ADSK_TYPE_PROCEDURALGEOMETRY_get();
  public static readonly string ADSK_TYPE_SURFACEMATERIAL = examplePINVOKE.ADSK_TYPE_SURFACEMATERIAL_get();
  public static readonly string ADSK_TYPE_TEXTURE = examplePINVOKE.ADSK_TYPE_TEXTURE_get();
  public static readonly string ADSK_TYPE_SWATCHSCENE = examplePINVOKE.ADSK_TYPE_SWATCHSCENE_get();
  public static readonly string ADSK_UI_DEFINITION_URL = examplePINVOKE.ADSK_UI_DEFINITION_URL_get();
  public static readonly string NAMECLASH1_KEY = examplePINVOKE.NAMECLASH1_KEY_get();
  public static readonly string NAMECLASH2_KEY = examplePINVOKE.NAMECLASH2_KEY_get();
  public static readonly string UPPERTOLOWER_KEY = examplePINVOKE.UPPERTOLOWER_KEY_get();
  public static readonly string LOWERTOUPPER_KEY = examplePINVOKE.LOWERTOUPPER_KEY_get();
}

}
