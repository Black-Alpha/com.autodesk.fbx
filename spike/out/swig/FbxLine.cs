//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxLine : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxLine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.FbxLine_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxLine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxLine_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLine_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxLine_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxLine Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxLine_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLine(cPtr, false);
    return ret;
  }

  public new static FbxLine Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxLine_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLine(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)examplePINVOKE.FbxLine_GetAttributeType(swigCPtr);
    return ret;
  }

  public void Reset() {
    examplePINVOKE.FbxLine_Reset(swigCPtr);
  }

  public void SetIndexArraySize(int pCount) {
    examplePINVOKE.FbxLine_SetIndexArraySize(swigCPtr, pCount);
  }

  public int GetIndexArraySize() {
    int ret = examplePINVOKE.FbxLine_GetIndexArraySize(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FbxArrayT_int_t GetIndexArray() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxLine_GetIndexArray(swigCPtr);
    SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
    return ret;
  }

  public bool SetPointIndexAt(int pValue, int pIndex, bool pAsEndPoint) {
    bool ret = examplePINVOKE.FbxLine_SetPointIndexAt__SWIG_0(swigCPtr, pValue, pIndex, pAsEndPoint);
    return ret;
  }

  public bool SetPointIndexAt(int pValue, int pIndex) {
    bool ret = examplePINVOKE.FbxLine_SetPointIndexAt__SWIG_1(swigCPtr, pValue, pIndex);
    return ret;
  }

  public int GetPointIndexAt(int pIndex) {
    int ret = examplePINVOKE.FbxLine_GetPointIndexAt(swigCPtr, pIndex);
    return ret;
  }

  public bool AddPointIndex(int pValue, bool pAsEndPoint) {
    bool ret = examplePINVOKE.FbxLine_AddPointIndex__SWIG_0(swigCPtr, pValue, pAsEndPoint);
    return ret;
  }

  public bool AddPointIndex(int pValue) {
    bool ret = examplePINVOKE.FbxLine_AddPointIndex__SWIG_1(swigCPtr, pValue);
    return ret;
  }

  public SWIGTYPE_p_FbxArrayT_int_t GetEndPointArray() {
    global::System.IntPtr cPtr = examplePINVOKE.FbxLine_GetEndPointArray(swigCPtr);
    SWIGTYPE_p_FbxArrayT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_int_t(cPtr, false);
    return ret;
  }

  public bool AddEndPoint(int pPointIndex) {
    bool ret = examplePINVOKE.FbxLine_AddEndPoint(swigCPtr, pPointIndex);
    return ret;
  }

  public int GetEndPointAt(int pEndPointIndex) {
    int ret = examplePINVOKE.FbxLine_GetEndPointAt(swigCPtr, pEndPointIndex);
    return ret;
  }

  public int GetEndPointCount() {
    int ret = examplePINVOKE.FbxLine_GetEndPointCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t Renderable {
    set {
      examplePINVOKE.FbxLine_Renderable_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLine_Renderable_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(examplePINVOKE.FbxLine_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
