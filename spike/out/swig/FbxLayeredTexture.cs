//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxLayeredTexture : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxLayeredTexture(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxLayeredTexture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxLayeredTexture_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayeredTexture_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public virtual FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxLayeredTexture_GetClassId(swigCPtr), true);
    return ret;
  }

  public static FbxLayeredTexture Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxLayeredTexture_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxLayeredTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLayeredTexture(cPtr, false);
    return ret;
  }

  public static FbxLayeredTexture Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxLayeredTexture_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxLayeredTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLayeredTexture(cPtr, false);
    return ret;
  }

  public bool SetTextureBlendMode(int pIndex, FbxLayeredTexture.EBlendMode pMode) {
    bool ret = examplePINVOKE.FbxLayeredTexture_SetTextureBlendMode(swigCPtr, pIndex, (int)pMode);
    return ret;
  }

  public bool GetTextureBlendMode(int pIndex, SWIGTYPE_p_FbxLayeredTexture__EBlendMode pMode) {
    bool ret = examplePINVOKE.FbxLayeredTexture_GetTextureBlendMode(swigCPtr, pIndex, SWIGTYPE_p_FbxLayeredTexture__EBlendMode.getCPtr(pMode));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTextureAlpha(int pIndex, double pAlpha) {
    bool ret = examplePINVOKE.FbxLayeredTexture_SetTextureAlpha(swigCPtr, pIndex, pAlpha);
    return ret;
  }

  public bool GetTextureAlpha(int pIndex, SWIGTYPE_p_double pAlpha) {
    bool ret = examplePINVOKE.FbxLayeredTexture_GetTextureAlpha(swigCPtr, pIndex, SWIGTYPE_p_double.getCPtr(pAlpha));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(examplePINVOKE.FbxLayeredTexture_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_FbxArrayT_FbxLayeredTexture__InputData_t mInputData {
    set {
      examplePINVOKE.FbxLayeredTexture_mInputData_set(swigCPtr, SWIGTYPE_p_FbxArrayT_FbxLayeredTexture__InputData_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxLayeredTexture_mInputData_get(swigCPtr);
      SWIGTYPE_p_FbxArrayT_FbxLayeredTexture__InputData_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxArrayT_FbxLayeredTexture__InputData_t(cPtr, false);
      return ret;
    } 
  }

  public enum EBlendMode {
    eTranslucent,
    eAdditive,
    eModulate,
    eModulate2,
    eOver,
    eNormal,
    eDissolve,
    eDarken,
    eColorBurn,
    eLinearBurn,
    eDarkerColor,
    eLighten,
    eScreen,
    eColorDodge,
    eLinearDodge,
    eLighterColor,
    eSoftLight,
    eHardLight,
    eVividLight,
    eLinearLight,
    ePinLight,
    eHardMix,
    eDifference,
    eExclusion,
    eSubtract,
    eDivide,
    eHue,
    eSaturation,
    eColor,
    eLuminosity,
    eOverlay,
    eBlendModeCount
  }

}

}
