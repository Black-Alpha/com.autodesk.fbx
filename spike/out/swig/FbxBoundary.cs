//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxBoundary : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxBoundary(global::System.IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.FbxBoundary_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxBoundary obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxBoundary_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxBoundary_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxBoundary_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxBoundary Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxBoundary_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxBoundary ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxBoundary(cPtr, false);
    return ret;
  }

  public new static FbxBoundary Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxBoundary_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxBoundary ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxBoundary(cPtr, false);
    return ret;
  }

  public static string sOuterFlag {
    set {
      examplePINVOKE.FbxBoundary_sOuterFlag_set(value);
    } 
    get {
      string ret = examplePINVOKE.FbxBoundary_sOuterFlag_get();
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t OuterFlag {
    set {
      examplePINVOKE.FbxBoundary_OuterFlag_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxBoundary_OuterFlag_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public void AddCurve(FbxNurbsCurve pCurve) {
    examplePINVOKE.FbxBoundary_AddCurve(swigCPtr, FbxNurbsCurve.getCPtr(pCurve));
  }

  public int GetCurveCount() {
    int ret = examplePINVOKE.FbxBoundary_GetCurveCount(swigCPtr);
    return ret;
  }

  public FbxNurbsCurve GetCurve(int pIndex) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxBoundary_GetCurve__SWIG_0(swigCPtr, pIndex);
    FbxNurbsCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNurbsCurve(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)examplePINVOKE.FbxBoundary_GetAttributeType(swigCPtr);
    return ret;
  }

  public bool IsPointInControlHull(FbxVector4 pPoint) {
    bool ret = examplePINVOKE.FbxBoundary_IsPointInControlHull(swigCPtr, FbxVector4.getCPtr(pPoint));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxVector4 ComputePointInBoundary() {
    FbxVector4 ret = new FbxVector4(examplePINVOKE.FbxBoundary_ComputePointInBoundary(swigCPtr), true);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(examplePINVOKE.FbxBoundary_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ClearCurves() {
    examplePINVOKE.FbxBoundary_ClearCurves(swigCPtr);
  }

  public void CopyCurves(FbxBoundary pOther) {
    examplePINVOKE.FbxBoundary_CopyCurves(swigCPtr, FbxBoundary.getCPtr(pOther));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValid(bool mustClosed) {
    bool ret = examplePINVOKE.FbxBoundary_IsValid__SWIG_0(swigCPtr, mustClosed);
    return ret;
  }

  public bool IsValid() {
    bool ret = examplePINVOKE.FbxBoundary_IsValid__SWIG_1(swigCPtr);
    return ret;
  }

  public bool IsCounterClockwise() {
    bool ret = examplePINVOKE.FbxBoundary_IsCounterClockwise(swigCPtr);
    return ret;
  }

}

}
