//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxMarker : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxMarker(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxMarker obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static FbxClassId ClassId {
    set {
      examplePINVOKE.FbxMarker_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public virtual FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(examplePINVOKE.FbxMarker_GetClassId(swigCPtr), true);
    return ret;
  }

  public static FbxMarker Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMarker(cPtr, false);
    return ret;
  }

  public static FbxMarker Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxMarker(cPtr, false);
    return ret;
  }

  public virtual FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)examplePINVOKE.FbxMarker_GetAttributeType(swigCPtr);
    return ret;
  }

  public void Reset() {
    examplePINVOKE.FbxMarker_Reset(swigCPtr);
  }

  public void SetType(FbxMarker.EType pType) {
    examplePINVOKE.FbxMarker_SetType(swigCPtr, (int)pType);
  }

  public FbxMarker.EType GetType() {
    FbxMarker.EType ret = (FbxMarker.EType)examplePINVOKE.FbxMarker_GetType(swigCPtr);
    return ret;
  }

  public double GetDefaultOcclusion() {
    double ret = examplePINVOKE.FbxMarker_GetDefaultOcclusion(swigCPtr);
    return ret;
  }

  public void SetDefaultOcclusion(double pOcclusion) {
    examplePINVOKE.FbxMarker_SetDefaultOcclusion(swigCPtr, pOcclusion);
  }

  public double GetDefaultIKReachTranslation() {
    double ret = examplePINVOKE.FbxMarker_GetDefaultIKReachTranslation(swigCPtr);
    return ret;
  }

  public void SetDefaultIKReachTranslation(double pIKReachTranslation) {
    examplePINVOKE.FbxMarker_SetDefaultIKReachTranslation(swigCPtr, pIKReachTranslation);
  }

  public double GetDefaultIKReachRotation() {
    double ret = examplePINVOKE.FbxMarker_GetDefaultIKReachRotation(swigCPtr);
    return ret;
  }

  public void SetDefaultIKReachRotation(double pIKReachRotation) {
    examplePINVOKE.FbxMarker_SetDefaultIKReachRotation(swigCPtr, pIKReachRotation);
  }

  public double GetDefaultIKPull() {
    double ret = examplePINVOKE.FbxMarker_GetDefaultIKPull(swigCPtr);
    return ret;
  }

  public void SetDefaultIKPull(double pIKPull) {
    examplePINVOKE.FbxMarker_SetDefaultIKPull(swigCPtr, pIKPull);
  }

  public double GetDefaultIKPullHips() {
    double ret = examplePINVOKE.FbxMarker_GetDefaultIKPullHips(swigCPtr);
    return ret;
  }

  public void SetDefaultIKPullHips(double pIKPullHips) {
    examplePINVOKE.FbxMarker_SetDefaultIKPullHips(swigCPtr, pIKPullHips);
  }

  public FbxColor GetDefaultColor(FbxColor pColor) {
    FbxColor ret = new FbxColor(examplePINVOKE.FbxMarker_GetDefaultColor(swigCPtr, FbxColor.getCPtr(pColor)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDefaultColor(FbxColor pColor) {
    examplePINVOKE.FbxMarker_SetDefaultColor(swigCPtr, FbxColor.getCPtr(pColor));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_FbxPropertyTT_FbxMarker__ELook_t Look {
    set {
      examplePINVOKE.FbxMarker_Look_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_FbxMarker__ELook_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_Look_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_FbxMarker__ELook_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_FbxMarker__ELook_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t DrawLink {
    set {
      examplePINVOKE.FbxMarker_DrawLink_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_DrawLink_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_double_t Size {
    set {
      examplePINVOKE.FbxMarker_Size_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_double_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_Size_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_double_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_double_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t ShowLabel {
    set {
      examplePINVOKE.FbxMarker_ShowLabel_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_ShowLabel_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_FbxVectorTemplate3T_double_t_t IKPivot {
    set {
      examplePINVOKE.FbxMarker_IKPivot_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_FbxVectorTemplate3T_double_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = examplePINVOKE.FbxMarker_IKPivot_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_FbxVectorTemplate3T_double_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_FbxVectorTemplate3T_double_t_t(cPtr, false);
      return ret;
    } 
  }

  public FbxProperty GetOcclusion() {
    FbxProperty ret = new FbxProperty(examplePINVOKE.FbxMarker_GetOcclusion(swigCPtr), true);
    return ret;
  }

  public FbxProperty GetIKReachTranslation() {
    FbxProperty ret = new FbxProperty(examplePINVOKE.FbxMarker_GetIKReachTranslation(swigCPtr), true);
    return ret;
  }

  public FbxProperty GetIKReachRotation() {
    FbxProperty ret = new FbxProperty(examplePINVOKE.FbxMarker_GetIKReachRotation(swigCPtr), true);
    return ret;
  }

  public FbxProperty GetIKPull() {
    FbxProperty ret = new FbxProperty(examplePINVOKE.FbxMarker_GetIKPull(swigCPtr), true);
    return ret;
  }

  public FbxProperty GetIKPullHips() {
    FbxProperty ret = new FbxProperty(examplePINVOKE.FbxMarker_GetIKPullHips(swigCPtr), true);
    return ret;
  }

  public virtual FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(examplePINVOKE.FbxMarker_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EType {
    eStandard,
    eOptical,
    eEffectorFK,
    eEffectorIK
  }

  public enum ELook {
    eCube,
    eHardCross,
    eLightCross,
    eSphere,
    eCapsule,
    eBox,
    eBone,
    eCircle,
    eSquare,
    eStick,
    eNone
  }

}

}
