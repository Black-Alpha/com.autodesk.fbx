//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FbxSdk {

public class FbxString : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxString(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxString obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxString() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_FbxString(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxString() : this(examplePINVOKE.new_FbxString__SWIG_0(), true) {
  }

  public FbxString(FbxString pString) : this(examplePINVOKE.new_FbxString__SWIG_1(FbxString.getCPtr(pString)), true) {
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxString(string pString) : this(examplePINVOKE.new_FbxString__SWIG_2(pString), true) {
  }

  public FbxString(char pChar, uint pNbRepeat) : this(examplePINVOKE.new_FbxString__SWIG_3(pChar, pNbRepeat), true) {
  }

  public FbxString(char pChar) : this(examplePINVOKE.new_FbxString__SWIG_4(pChar), true) {
  }

  public FbxString(string pCharPtr, uint pLength) : this(examplePINVOKE.new_FbxString__SWIG_5(pCharPtr, pLength), true) {
  }

  public FbxString(int pValue) : this(examplePINVOKE.new_FbxString__SWIG_6(pValue), true) {
  }

  public FbxString(float pValue) : this(examplePINVOKE.new_FbxString__SWIG_7(pValue), true) {
  }

  public FbxString(double pValue) : this(examplePINVOKE.new_FbxString__SWIG_8(pValue), true) {
  }

  public uint GetLen() {
    uint ret = examplePINVOKE.FbxString_GetLen(swigCPtr);
    return ret;
  }

  public uint Size() {
    uint ret = examplePINVOKE.FbxString_Size(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = examplePINVOKE.FbxString_IsEmpty(swigCPtr);
    return ret;
  }

  public FbxString Clear() {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Clear(swigCPtr), false);
    return ret;
  }

  public string Buffer() {
    string ret = examplePINVOKE.FbxString_Buffer__SWIG_0(swigCPtr);
    return ret;
  }

  public FbxString Copy(string pString, uint pLength) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Copy(swigCPtr, pString, pLength), false);
    return ret;
  }

  public FbxString Append(string pString, uint pLength) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Append(swigCPtr, pString, pLength), false);
    return ret;
  }

  public int Compare(string pString) {
    int ret = examplePINVOKE.FbxString_Compare(swigCPtr, pString);
    return ret;
  }

  public int CompareNoCase(string pString) {
    int ret = examplePINVOKE.FbxString_CompareNoCase(swigCPtr, pString);
    return ret;
  }

  public void Swap(FbxString pString) {
    examplePINVOKE.FbxString_Swap(swigCPtr, FbxString.getCPtr(pString));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxString Upper() {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Upper(swigCPtr), true);
    return ret;
  }

  public FbxString Lower() {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Lower(swigCPtr), true);
    return ret;
  }

  public FbxString Mid(uint pFirst, uint pCount) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Mid__SWIG_0(swigCPtr, pFirst, pCount), true);
    return ret;
  }

  public FbxString Mid(uint pFirst) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Mid__SWIG_1(swigCPtr, pFirst), true);
    return ret;
  }

  public FbxString Left(uint pCount) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Left(swigCPtr, pCount), true);
    return ret;
  }

  public FbxString Right(uint pCount) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Right(swigCPtr, pCount), true);
    return ret;
  }

  public FbxString Pad(FbxString.EPaddingType pPadding, uint pLen, char pCar) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Pad__SWIG_0(swigCPtr, (int)pPadding, pLen, pCar), true);
    return ret;
  }

  public FbxString Pad(FbxString.EPaddingType pPadding, uint pLen) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_Pad__SWIG_1(swigCPtr, (int)pPadding, pLen), true);
    return ret;
  }

  public FbxString UnPad(FbxString.EPaddingType pPadding, char pCar) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_UnPad__SWIG_0(swigCPtr, (int)pPadding, pCar), true);
    return ret;
  }

  public FbxString UnPad(FbxString.EPaddingType pPadding) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_UnPad__SWIG_1(swigCPtr, (int)pPadding), true);
    return ret;
  }

  public int Find(char pChar, uint pStartPosition) {
    int ret = examplePINVOKE.FbxString_Find__SWIG_0(swigCPtr, pChar, pStartPosition);
    return ret;
  }

  public int Find(char pChar) {
    int ret = examplePINVOKE.FbxString_Find__SWIG_1(swigCPtr, pChar);
    return ret;
  }

  public int Find(string pStrSub, uint pStartPosition) {
    int ret = examplePINVOKE.FbxString_Find__SWIG_2(swigCPtr, pStrSub, pStartPosition);
    return ret;
  }

  public int Find(string pStrSub) {
    int ret = examplePINVOKE.FbxString_Find__SWIG_3(swigCPtr, pStrSub);
    return ret;
  }

  public int ReverseFind(char pChar) {
    int ret = examplePINVOKE.FbxString_ReverseFind(swigCPtr, pChar);
    return ret;
  }

  public int FindOneOf(string pStrCharSet, uint pStartPosition) {
    int ret = examplePINVOKE.FbxString_FindOneOf__SWIG_0(swigCPtr, pStrCharSet, pStartPosition);
    return ret;
  }

  public int FindOneOf(string pStrCharSet) {
    int ret = examplePINVOKE.FbxString_FindOneOf__SWIG_1(swigCPtr, pStrCharSet);
    return ret;
  }

  public bool FindAndReplace(string pFind, string pReplaceBy, uint pStartPosition) {
    bool ret = examplePINVOKE.FbxString_FindAndReplace__SWIG_0(swigCPtr, pFind, pReplaceBy, pStartPosition);
    return ret;
  }

  public bool FindAndReplace(string pFind, string pReplaceBy) {
    bool ret = examplePINVOKE.FbxString_FindAndReplace__SWIG_1(swigCPtr, pFind, pReplaceBy);
    return ret;
  }

  public bool ReplaceAll(string pFind, string pReplaceBy) {
    bool ret = examplePINVOKE.FbxString_ReplaceAll__SWIG_0(swigCPtr, pFind, pReplaceBy);
    return ret;
  }

  public bool ReplaceAll(char pFind, char pReplaceBy) {
    bool ret = examplePINVOKE.FbxString_ReplaceAll__SWIG_1(swigCPtr, pFind, pReplaceBy);
    return ret;
  }

  public int GetTokenCount(string pSpans) {
    int ret = examplePINVOKE.FbxString_GetTokenCount(swigCPtr, pSpans);
    return ret;
  }

  public FbxString GetToken(int pTokenIndex, string pSpans) {
    FbxString ret = new FbxString(examplePINVOKE.FbxString_GetToken(swigCPtr, pTokenIndex, pSpans), true);
    return ret;
  }

  public enum EPaddingType {
    eRight,
    eLeft,
    eBoth
  }

}

}
