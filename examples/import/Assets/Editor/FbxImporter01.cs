//#define UNI_18892
// ***********************************************************************
// Copyright (c) 2017 Unity Technologies. All rights reserved.  
//
// Licensed under the ##LICENSENAME##. 
// See LICENSE.md file in the project root for full license information.
// ***********************************************************************

using System.IO;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEditor;
using FbxSdk;

namespace FbxSdk.Examples
{
    namespace Editor
    {

        public class FbxImporter01 : System.IDisposable
        {
            const string Title =
                 "Example 01: import scene and log basic info";

            const string Subject =
                 @"Example FbxImporter01 illustrates how to:
                                1) create and initialize the importer
                                2) import the scene from an FBX file (FBX201400 compatible)
                                3) report basic information about scene";

            const string Keywords =
                 "import scene";

            const string Comments =
                 @"";

            const string MenuItemName = "File/Import FBX/1. Import Scene";

            /// <summary>
            /// Create instance of example
            /// </summary>
            public static FbxImporter01 Create () { return new FbxImporter01 (); }

            /// <summary>
            /// Import all from scene.
            /// Return the number of objects we imported.
            /// </summary>
            public int ImportAll (IEnumerable<UnityEngine.Object> unitySelectionSet)
            {
                // Create the FBX manager
                using (var fbxManager = FbxManager.Create ()) 
                {
                    FbxIOSettings fbxIOSettings = FbxIOSettings.Create (fbxManager, Globals.IOSROOT);

                    // Configure the IO settings.
                    fbxManager.SetIOSettings (fbxIOSettings);

                    // Get the version number of the FBX files generated by the
                    // version of FBX SDK that you are using.
                    int sdkMajor = -1, sdkMinor = -1, sdkRevision = -1;

                    FbxManager.GetFileFormatVersion (out sdkMajor, out sdkMinor, out sdkRevision);

                    // Create the importer 
                    var fbxImporter = FbxImporter.Create (fbxManager, "Importer");

                    // Initialize the importer.
                    int fileFormat = -1;

                    bool status = fbxImporter.Initialize (LastFilePath, fileFormat, fbxIOSettings);
                    FbxStatus fbxStatus = fbxImporter.GetStatus ();

                    // Get the version number of the FBX file format.
                    int fileMajor = -1, fileMinor = -1, fileRevision = -1;

#if UNI_18892
                    fbxImporter.GetFileVersion (fileMajor, fileMinor, fileRevision);
#endif
                    // Check that initialization of the fbxImporter was successful
                    if (!status) 
                    {
                        string error = fbxStatus.GetErrorString ();

                        Debug.LogError (string.Format ("failed to initialize FbxImporter, error returned {0}", error));

                        if (fbxStatus.GetCode () == FbxStatus.EStatusCode.eInvalidFileVersion) {
                            Debug.LogError (string.Format ("Invalid file version detected\nSDK version: {0}.{1}.{2}\nFile version: {3}.{4}.{5}",
                                                sdkMajor, sdkMinor, sdkRevision,
                                                           fileMajor, fileMinor, fileRevision));

                        }

                        return 0;
                    }

                    string msgLine = "";

                    msgLine += kBorderLine;
                    msgLine += "File";
                    msgLine += kNewLine;
                    msgLine += kBorderLine;

                    msgLine += kPadding + string.Format ("FilePath: {0}", LastFilePath);
                    msgLine += kNewLine;
                    msgLine += kPadding + string.Format ("SDK version: {0}.{1}.{2}", 
                                              sdkMajor, sdkMinor, sdkRevision);
                    msgLine += kNewLine;

                    bool isFBX = true;
#if UNI_18892
                    isFBX = fbxImporter.IsFBX ();
#endif
                    if (isFBX) 
                    {
                        msgLine += kPadding + string.Format ("File version: {0}.{1}.{2}",
                                                  fileMajor, fileMinor, fileRevision);
                        msgLine += kNewLine;
                        Debug.Log (msgLine);

                        msgLine = kBorderLine;
                        msgLine += "Animation";
                        msgLine += kNewLine;
                        msgLine += kBorderLine;

                        int numAnimStack = 0;
#if UNI_18892
                        numAnimStack = fbxImporter.GetAnimStackCount ();
#endif

                        msgLine += kPadding + string.Format ("number of stacks: {0}", numAnimStack);
                        msgLine += kNewLine;
#if UNI_18892
                        msgLine += string.Format ("{0}active animation stack: \"{1}\"\n", fbxImporter.GetActiveAnimStackName());
#endif

                        for (int i = 0; i < numAnimStack; i++) {
#if UNI_18892
                            FbxTakeInfo fbxTakeInfo = fbxImporter.GetTakeInfo (i);
#endif
                            msgLine += kPadding + string.Format ("Animation Stack ({0})", i);
                            msgLine += kNewLine;

#if UNI_18892
                            msgLine += kPadding +string.Format ("name: \"{0}\"", fbxTakeInfo.mName) + string.kNewLine;
                            msgLine += kNewLine;
                            msgLine += kPadding +string.Format ("description: \"{0}\"", fbxTakeInfo.mDescription);
                            msgLine += kNewLine;
                            msgLine += kPadding +string.Format ("import name: \"{0}\"", fbxTakeInfo.mImportName);
                            msgLine += kNewLine;
                            msgLine += kPadding +string.Format ("import state: \"{0}\"", fbxTakeInfo.mSelect);
                            msgLine += kNewLine;
#endif
                        }

                        // Import options. Determine what kind of data is to be imported.
                        // The default is true, but here we set the options explictly.
#if UNI_18892
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_MATERIAL,         false);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_TEXTURE,          false);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_LINK,             false);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_SHAPE,            false);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_GOBO,             false);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_ANIMATION,        false);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_GLOBAL_SETTINGS,  true);
#endif
                    }
                    Debug.Log (msgLine);

                    // Create a scene
                    var fbxScene = FbxScene.Create (fbxManager, "Scene");

                    // Import the scene to the file.
                    status = fbxImporter.Import (fbxScene);
                    fbxStatus = fbxImporter.GetStatus ();

                    if (status == false && fbxStatus.GetCode() == FbxStatus.EStatusCode.ePasswordError)
                    {
#if UNI_18892
                        string password = "abc123";
                        fbxIOSettings.SetStringProp(Globals.IMP_FBX_PASSWORD,      password);
                        fbxIOSettings.SetBoolProp(Globals.IMP_FBX_PASSWORD_ENABLE, true);
#endif

                        status = fbxImporter.Import (fbxScene);

                        if (status == false && 
                            fbxImporter.GetStatus ().GetCode () == FbxStatus.EStatusCode.ePasswordError)
                        {
                			Debug.LogError ("\nWrong password.\n");
                        }                        
                    }

                    if (status == false) 
                    {
                        Debug.LogError (string.Format ("failed to import file ({0})", fbxStatus.GetErrorString ()));
                    } 
                    else 
                    {
                        // import data into scene 
                        ProcessScene (fbxScene, unitySelectionSet);
                    }

                    // cleanup
                    fbxScene.Destroy ();
                    fbxImporter.Destroy ();

                    return status == true ? NumNodes : 0;
                }
            }

            /// <summary>
            /// Process fbx scene by doing nothing
            /// </summary>
            public void ProcessScene (FbxScene fbxScene, IEnumerable<UnityEngine.Object> unitySelectionSet)
            {
                FbxDocumentInfo sceneInfo = fbxScene.GetSceneInfo ();

                if (sceneInfo != null) 
                {
                    string msgLine = "";

                    msgLine += kBorderLine;
                    msgLine += "Scene Meta-Data";
                    msgLine += kNewLine;
                    msgLine += kBorderLine;

                    msgLine += string.Format ("{0}Title: \"{1}\"", kPadding, sceneInfo.mTitle);
                    msgLine += kNewLine;
                    msgLine += string.Format ("{0}Subject: \"{1}\"", kPadding, sceneInfo.mSubject);
                    msgLine += kNewLine;
                    msgLine += string.Format ("{0}Author: \"{1}\"", kPadding, sceneInfo.mAuthor);
                    msgLine += kNewLine;
                    msgLine += string.Format ("{0}Keywords: \"{1}\"", kPadding, sceneInfo.mKeywords);
                    msgLine += kNewLine;
                    msgLine += string.Format ("{0}Revision: \"{1}\"", kPadding, sceneInfo.mRevision);
                    msgLine += kNewLine;
                    msgLine += string.Format ("{0}Comment: \"{1}\"", kPadding, sceneInfo.mComment);
                    msgLine += kNewLine;

                    Debug.Log (msgLine);
                }

                var fbxSettings = fbxScene.GetGlobalSettings ();
                FbxSystemUnit fbxSystemUnit = fbxSettings.GetSystemUnit ();

                if (fbxSystemUnit != UnitySystemUnit) 
                {
                    Debug.LogWarning (string.Format("file system unit do not match Unity. Expected {0}, found {1}", 
                                             UnitySystemUnit.ToString(), fbxSystemUnit.ToString()));
                }

                // The Unity axis system has Y up, Z forward, X to the right.

                FbxAxisSystem fbxAxisSystem = fbxSettings.GetAxisSystem();

                if (fbxAxisSystem != UnityAxisSystem)
                {
                   Debug.LogWarning (string.Format ("file axis system do not match Unity, Expected [{0}, {1}, {2}] found [{3}, {4}, {5}]",
                                                     UnityAxisSystem.GetUpVector().ToString (),
                                                     UnityAxisSystem.GetFrontVector().ToString (),
                                                     UnityAxisSystem.GetCoorSystem().ToString (),
                                                     fbxAxisSystem.GetUpVector().ToString (),
                                                     fbxAxisSystem.GetFrontVector().ToString (),
                                                     fbxAxisSystem.GetCoorSystem().ToString ()));
                }

                return;
            }

            // 
            // Create a simple user interface (menu items)
            //
            /// <summary>
            /// create menu item in the File menu
            /// </summary>
            [MenuItem (MenuItemName, false)]
            public static void OnMenuItem ()
            {
                OnImport();
            }

            /// <summary>
            // Validate the menu item defined by the function above.
            /// </summary>
            [MenuItem (MenuItemName, true)]
            public static bool OnValidateMenuItem ()
            {
                // Return true
                return true;
            }

            /// <summary>
            /// Number of nodes imported including siblings and decendents
            /// </summary>
            public int NumNodes { private set; get; }

            /// <summary>
            /// Clean up this class on garbage collection
            /// </summary>
            public void Dispose () { }

            public bool Verbose { private set; get; }

            /// <summary>
            /// manage the selection of a filename
            /// </summary>
            static string LastFilePath { get; set; }
            const string kExtension = "fbx";
            const string kBorderLine = "--------------------\n";
            const string kNewLine = "\n";
            const string kPadding = "    ";

            private static string MakeFileName(string basename = "test", string extension = "fbx")
            {
                return basename + "." + extension;
            }

            private FbxSystemUnit UnitySystemUnit { get { return FbxSystemUnit.m; } }

            private FbxAxisSystem UnityAxisSystem { 
                get { return new FbxAxisSystem (FbxAxisSystem.EUpVector.eYAxis, 
                                                FbxAxisSystem.EFrontVector.eParityOdd, 
                                                FbxAxisSystem.ECoordSystem.eLeftHanded); }
            }

            // use the SaveFile panel to allow user to enter a file name
            private static void OnImport()
            {
                // Now that we know we have stuff to import, get the user-desired path.
                var directory = string.IsNullOrEmpty (LastFilePath) 
                                      ? Application.dataPath 
                                      : System.IO.Path.GetDirectoryName (LastFilePath);
                
                var title = "Import FBX";

                var filePath = EditorUtility.OpenFilePanel(title, directory, kExtension);

                if (string.IsNullOrEmpty (filePath)) 
                {
                    return;
                }

                LastFilePath = filePath;

                using (var fbxImporter = Create()) 
                {
                    if (fbxImporter.ImportAll(Selection.objects) > 0)
                    {
                        Debug.Log (string.Format ("Successfully imported: {0}", filePath));
                    }
                }
            }
        }
    }
}
